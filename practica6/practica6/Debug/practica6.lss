
practica6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000474  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  00000474  00000508  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800070  00800070  00000518  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000518  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000548  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  00000584  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f3f  00000000  00000000  00000644  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008eb  00000000  00000000  00001583  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007a6  00000000  00000000  00001e6e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000019c  00000000  00000000  00002614  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000045b  00000000  00000000  000027b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006f0  00000000  00000000  00002c0b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  000032fb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e7       	ldi	r30, 0x74	; 116
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e7       	ldi	r26, 0x70	; 112
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 37       	cpi	r26, 0x74	; 116
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 90 01 	call	0x320	; 0x320 <main>
  8a:	0c 94 38 02 	jmp	0x470	; 0x470 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) ) {
        lcd_putc(c);
    }

}/* lcd_puts_p */
  92:	85 b3       	in	r24, 0x15	; 21
  94:	80 64       	ori	r24, 0x40	; 64
  96:	85 bb       	out	0x15, r24	; 21
  98:	00 c0       	rjmp	.+0      	; 0x9a <toggle_e+0x8>
  9a:	85 b3       	in	r24, 0x15	; 21
  9c:	8f 7b       	andi	r24, 0xBF	; 191
  9e:	85 bb       	out	0x15, r24	; 21
  a0:	08 95       	ret

000000a2 <lcd_write>:
  a2:	cf 93       	push	r28
  a4:	df 93       	push	r29
  a6:	d8 2f       	mov	r29, r24
  a8:	66 23       	and	r22, r22
  aa:	21 f0       	breq	.+8      	; 0xb4 <lcd_write+0x12>
  ac:	85 b3       	in	r24, 0x15	; 21
  ae:	80 61       	ori	r24, 0x10	; 16
  b0:	85 bb       	out	0x15, r24	; 21
  b2:	03 c0       	rjmp	.+6      	; 0xba <lcd_write+0x18>
  b4:	85 b3       	in	r24, 0x15	; 21
  b6:	8f 7e       	andi	r24, 0xEF	; 239
  b8:	85 bb       	out	0x15, r24	; 21
  ba:	85 b3       	in	r24, 0x15	; 21
  bc:	8f 7d       	andi	r24, 0xDF	; 223
  be:	85 bb       	out	0x15, r24	; 21
  c0:	84 b3       	in	r24, 0x14	; 20
  c2:	8f 60       	ori	r24, 0x0F	; 15
  c4:	84 bb       	out	0x14, r24	; 20
  c6:	c5 b3       	in	r28, 0x15	; 21
  c8:	c0 7f       	andi	r28, 0xF0	; 240
  ca:	8d 2f       	mov	r24, r29
  cc:	82 95       	swap	r24
  ce:	8f 70       	andi	r24, 0x0F	; 15
  d0:	8c 2b       	or	r24, r28
  d2:	85 bb       	out	0x15, r24	; 21
  d4:	0e 94 49 00 	call	0x92	; 0x92 <toggle_e>
  d8:	df 70       	andi	r29, 0x0F	; 15
  da:	dc 2b       	or	r29, r28
  dc:	d5 bb       	out	0x15, r29	; 21
  de:	0e 94 49 00 	call	0x92	; 0x92 <toggle_e>
  e2:	cf 60       	ori	r28, 0x0F	; 15
  e4:	c5 bb       	out	0x15, r28	; 21
  e6:	df 91       	pop	r29
  e8:	cf 91       	pop	r28
  ea:	08 95       	ret

000000ec <lcd_read>:
  ec:	88 23       	and	r24, r24
  ee:	21 f0       	breq	.+8      	; 0xf8 <lcd_read+0xc>
  f0:	85 b3       	in	r24, 0x15	; 21
  f2:	80 61       	ori	r24, 0x10	; 16
  f4:	85 bb       	out	0x15, r24	; 21
  f6:	03 c0       	rjmp	.+6      	; 0xfe <lcd_read+0x12>
  f8:	85 b3       	in	r24, 0x15	; 21
  fa:	8f 7e       	andi	r24, 0xEF	; 239
  fc:	85 bb       	out	0x15, r24	; 21
  fe:	85 b3       	in	r24, 0x15	; 21
 100:	80 62       	ori	r24, 0x20	; 32
 102:	85 bb       	out	0x15, r24	; 21
 104:	84 b3       	in	r24, 0x14	; 20
 106:	80 7f       	andi	r24, 0xF0	; 240
 108:	84 bb       	out	0x14, r24	; 20
 10a:	85 b3       	in	r24, 0x15	; 21
 10c:	80 64       	ori	r24, 0x40	; 64
 10e:	85 bb       	out	0x15, r24	; 21
 110:	00 c0       	rjmp	.+0      	; 0x112 <lcd_read+0x26>
 112:	93 b3       	in	r25, 0x13	; 19
 114:	92 95       	swap	r25
 116:	90 7f       	andi	r25, 0xF0	; 240
 118:	85 b3       	in	r24, 0x15	; 21
 11a:	8f 7b       	andi	r24, 0xBF	; 191
 11c:	85 bb       	out	0x15, r24	; 21
 11e:	00 c0       	rjmp	.+0      	; 0x120 <lcd_read+0x34>
 120:	85 b3       	in	r24, 0x15	; 21
 122:	80 64       	ori	r24, 0x40	; 64
 124:	85 bb       	out	0x15, r24	; 21
 126:	00 c0       	rjmp	.+0      	; 0x128 <lcd_read+0x3c>
 128:	83 b3       	in	r24, 0x13	; 19
 12a:	8f 70       	andi	r24, 0x0F	; 15
 12c:	25 b3       	in	r18, 0x15	; 21
 12e:	2f 7b       	andi	r18, 0xBF	; 191
 130:	25 bb       	out	0x15, r18	; 21
 132:	89 2b       	or	r24, r25
 134:	08 95       	ret

00000136 <lcd_waitbusy>:
 136:	80 e0       	ldi	r24, 0x00	; 0
 138:	0e 94 76 00 	call	0xec	; 0xec <lcd_read>
 13c:	88 23       	and	r24, r24
 13e:	dc f3       	brlt	.-10     	; 0x136 <lcd_waitbusy>
 140:	84 e0       	ldi	r24, 0x04	; 4
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	01 97       	sbiw	r24, 0x01	; 1
 146:	f1 f7       	brne	.-4      	; 0x144 <lcd_waitbusy+0xe>
 148:	80 e0       	ldi	r24, 0x00	; 0
 14a:	0e 94 76 00 	call	0xec	; 0xec <lcd_read>
 14e:	08 95       	ret

00000150 <lcd_command>:
 150:	cf 93       	push	r28
 152:	c8 2f       	mov	r28, r24
 154:	0e 94 9b 00 	call	0x136	; 0x136 <lcd_waitbusy>
 158:	60 e0       	ldi	r22, 0x00	; 0
 15a:	8c 2f       	mov	r24, r28
 15c:	0e 94 51 00 	call	0xa2	; 0xa2 <lcd_write>
 160:	cf 91       	pop	r28
 162:	08 95       	ret

00000164 <lcd_gotoxy>:
 164:	61 11       	cpse	r22, r1
 166:	04 c0       	rjmp	.+8      	; 0x170 <lcd_gotoxy+0xc>
 168:	80 58       	subi	r24, 0x80	; 128
 16a:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_command>
 16e:	08 95       	ret
 170:	80 54       	subi	r24, 0x40	; 64
 172:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_command>
 176:	08 95       	ret

00000178 <lcd_clrscr>:
 178:	81 e0       	ldi	r24, 0x01	; 1
 17a:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_command>
 17e:	08 95       	ret

00000180 <lcd_putc>:
 180:	cf 93       	push	r28
 182:	c8 2f       	mov	r28, r24
 184:	0e 94 9b 00 	call	0x136	; 0x136 <lcd_waitbusy>
 188:	ca 30       	cpi	r28, 0x0A	; 10
 18a:	49 f4       	brne	.+18     	; 0x19e <lcd_putc+0x1e>
 18c:	80 34       	cpi	r24, 0x40	; 64
 18e:	10 f4       	brcc	.+4      	; 0x194 <lcd_putc+0x14>
 190:	80 e4       	ldi	r24, 0x40	; 64
 192:	01 c0       	rjmp	.+2      	; 0x196 <lcd_putc+0x16>
 194:	80 e0       	ldi	r24, 0x00	; 0
 196:	80 58       	subi	r24, 0x80	; 128
 198:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_command>
 19c:	04 c0       	rjmp	.+8      	; 0x1a6 <lcd_putc+0x26>
 19e:	61 e0       	ldi	r22, 0x01	; 1
 1a0:	8c 2f       	mov	r24, r28
 1a2:	0e 94 51 00 	call	0xa2	; 0xa2 <lcd_write>
 1a6:	cf 91       	pop	r28
 1a8:	08 95       	ret

000001aa <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 1aa:	1f 93       	push	r17
 1ac:	cf 93       	push	r28
 1ae:	df 93       	push	r29
 1b0:	18 2f       	mov	r17, r24
      && ( &LCD_RS_PORT == &LCD_DATA0_PORT) && ( &LCD_RW_PORT == &LCD_DATA0_PORT) && (&LCD_E_PORT == &LCD_DATA0_PORT)
      && (LCD_DATA0_PIN == 0 ) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) 
      && (LCD_RS_PIN == 4 ) && (LCD_RW_PIN == 5) && (LCD_E_PIN == 6 ) )
    {
        /* configure all port bits as output (all LCD lines on same port) */
        DDR(LCD_DATA0_PORT) |= 0x7F;
 1b2:	84 b3       	in	r24, 0x14	; 20
 1b4:	8f 67       	ori	r24, 0x7F	; 127
 1b6:	84 bb       	out	0x14, r24	; 20
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 1b8:	80 e0       	ldi	r24, 0x00	; 0
 1ba:	9d e7       	ldi	r25, 0x7D	; 125
 1bc:	01 97       	sbiw	r24, 0x01	; 1
 1be:	f1 f7       	brne	.-4      	; 0x1bc <lcd_init+0x12>
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
    }
    delay(16000);        /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);  // _BV(LCD_FUNCTION)>>4;
 1c0:	85 b3       	in	r24, 0x15	; 21
 1c2:	82 60       	ori	r24, 0x02	; 2
 1c4:	85 bb       	out	0x15, r24	; 21
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
 1c6:	85 b3       	in	r24, 0x15	; 21
 1c8:	81 60       	ori	r24, 0x01	; 1
 1ca:	85 bb       	out	0x15, r24	; 21
    lcd_e_toggle();
 1cc:	0e 94 49 00 	call	0x92	; 0x92 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 1d0:	80 e0       	ldi	r24, 0x00	; 0
 1d2:	97 e2       	ldi	r25, 0x27	; 39
 1d4:	01 97       	sbiw	r24, 0x01	; 1
 1d6:	f1 f7       	brne	.-4      	; 0x1d4 <lcd_init+0x2a>
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
    lcd_e_toggle();
    delay(4992);         /* delay, busy flag can't be checked here */
   
    /* repeat last command */ 
    lcd_e_toggle();      
 1d8:	0e 94 49 00 	call	0x92	; 0x92 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 1dc:	c0 e8       	ldi	r28, 0x80	; 128
 1de:	d0 e0       	ldi	r29, 0x00	; 0
 1e0:	ce 01       	movw	r24, r28
 1e2:	01 97       	sbiw	r24, 0x01	; 1
 1e4:	f1 f7       	brne	.-4      	; 0x1e2 <lcd_init+0x38>
    /* repeat last command */ 
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */
    
    /* repeat last command a third time */
    lcd_e_toggle();      
 1e6:	0e 94 49 00 	call	0x92	; 0x92 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 1ea:	ce 01       	movw	r24, r28
 1ec:	01 97       	sbiw	r24, 0x01	; 1
 1ee:	f1 f7       	brne	.-4      	; 0x1ec <lcd_init+0x42>
    /* repeat last command a third time */
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
 1f0:	85 b3       	in	r24, 0x15	; 21
 1f2:	8e 7f       	andi	r24, 0xFE	; 254
 1f4:	85 bb       	out	0x15, r24	; 21
    lcd_e_toggle();
 1f6:	0e 94 49 00 	call	0x92	; 0x92 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 1fa:	21 97       	sbiw	r28, 0x01	; 1
 1fc:	f1 f7       	brne	.-4      	; 0x1fa <lcd_init+0x50>
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
 1fe:	88 e2       	ldi	r24, 0x28	; 40
 200:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
 204:	88 e0       	ldi	r24, 0x08	; 8
 206:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_command>
    lcd_clrscr();                           /* display clear                */ 
 20a:	0e 94 bc 00 	call	0x178	; 0x178 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 20e:	86 e0       	ldi	r24, 0x06	; 6
 210:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
 214:	81 2f       	mov	r24, r17
 216:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_command>

}/* lcd_init */
 21a:	df 91       	pop	r29
 21c:	cf 91       	pop	r28
 21e:	1f 91       	pop	r17
 220:	08 95       	ret

00000222 <keyboard>:
};
uint8_t p_pin;
char letra=0;
uint8_t pos=0;
char keyboard(){
	p_pin=0;
 222:	10 92 73 00 	sts	0x0073, r1	; 0x800073 <p_pin>
	
		for(uint8_t i = 0; i<4; i++){
 226:	20 e0       	ldi	r18, 0x00	; 0
 228:	48 c0       	rjmp	.+144    	; 0x2ba <keyboard+0x98>
			PORTD = 0b11111111 ^ (1<<(7-i));
 22a:	62 2f       	mov	r22, r18
 22c:	70 e0       	ldi	r23, 0x00	; 0
 22e:	47 e0       	ldi	r20, 0x07	; 7
 230:	50 e0       	ldi	r21, 0x00	; 0
 232:	46 1b       	sub	r20, r22
 234:	57 0b       	sbc	r21, r23
 236:	81 e0       	ldi	r24, 0x01	; 1
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	02 c0       	rjmp	.+4      	; 0x240 <keyboard+0x1e>
 23c:	88 0f       	add	r24, r24
 23e:	99 1f       	adc	r25, r25
 240:	4a 95       	dec	r20
 242:	e2 f7       	brpl	.-8      	; 0x23c <keyboard+0x1a>
 244:	80 95       	com	r24
 246:	82 bb       	out	0x12, r24	; 18
			if(~PIND&1) {p_pin = 1;return mat[i][3];}
 248:	80 99       	sbic	0x10, 0	; 16
 24a:	0c c0       	rjmp	.+24     	; 0x264 <keyboard+0x42>
 24c:	81 e0       	ldi	r24, 0x01	; 1
 24e:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <p_pin>
 252:	66 0f       	add	r22, r22
 254:	77 1f       	adc	r23, r23
 256:	66 0f       	add	r22, r22
 258:	77 1f       	adc	r23, r23
 25a:	fb 01       	movw	r30, r22
 25c:	e0 5a       	subi	r30, 0xA0	; 160
 25e:	ff 4f       	sbci	r31, 0xFF	; 255
 260:	83 81       	ldd	r24, Z+3	; 0x03
 262:	08 95       	ret
			if(~PIND&2) {p_pin = 2;return mat[i][2];}
 264:	81 99       	sbic	0x10, 1	; 16
 266:	0c c0       	rjmp	.+24     	; 0x280 <keyboard+0x5e>
 268:	82 e0       	ldi	r24, 0x02	; 2
 26a:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <p_pin>
 26e:	66 0f       	add	r22, r22
 270:	77 1f       	adc	r23, r23
 272:	66 0f       	add	r22, r22
 274:	77 1f       	adc	r23, r23
 276:	fb 01       	movw	r30, r22
 278:	e0 5a       	subi	r30, 0xA0	; 160
 27a:	ff 4f       	sbci	r31, 0xFF	; 255
 27c:	82 81       	ldd	r24, Z+2	; 0x02
 27e:	08 95       	ret
			if(~PIND&4) {p_pin = 4;return mat[i][1];}
 280:	82 99       	sbic	0x10, 2	; 16
 282:	0c c0       	rjmp	.+24     	; 0x29c <keyboard+0x7a>
 284:	84 e0       	ldi	r24, 0x04	; 4
 286:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <p_pin>
 28a:	66 0f       	add	r22, r22
 28c:	77 1f       	adc	r23, r23
 28e:	66 0f       	add	r22, r22
 290:	77 1f       	adc	r23, r23
 292:	fb 01       	movw	r30, r22
 294:	e0 5a       	subi	r30, 0xA0	; 160
 296:	ff 4f       	sbci	r31, 0xFF	; 255
 298:	81 81       	ldd	r24, Z+1	; 0x01
 29a:	08 95       	ret
			if(~PIND&8) {p_pin = 8;return mat[i][0];}
 29c:	83 99       	sbic	0x10, 3	; 16
 29e:	0c c0       	rjmp	.+24     	; 0x2b8 <keyboard+0x96>
 2a0:	88 e0       	ldi	r24, 0x08	; 8
 2a2:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <p_pin>
 2a6:	66 0f       	add	r22, r22
 2a8:	77 1f       	adc	r23, r23
 2aa:	66 0f       	add	r22, r22
 2ac:	77 1f       	adc	r23, r23
 2ae:	fb 01       	movw	r30, r22
 2b0:	e0 5a       	subi	r30, 0xA0	; 160
 2b2:	ff 4f       	sbci	r31, 0xFF	; 255
 2b4:	80 81       	ld	r24, Z
 2b6:	08 95       	ret
char letra=0;
uint8_t pos=0;
char keyboard(){
	p_pin=0;
	
		for(uint8_t i = 0; i<4; i++){
 2b8:	2f 5f       	subi	r18, 0xFF	; 255
 2ba:	24 30       	cpi	r18, 0x04	; 4
 2bc:	08 f4       	brcc	.+2      	; 0x2c0 <keyboard+0x9e>
 2be:	b5 cf       	rjmp	.-150    	; 0x22a <keyboard+0x8>
			if(~PIND&1) {p_pin = 1;return mat[i][3];}
			if(~PIND&2) {p_pin = 2;return mat[i][2];}
			if(~PIND&4) {p_pin = 4;return mat[i][1];}
			if(~PIND&8) {p_pin = 8;return mat[i][0];}
		}
	return 0;
 2c0:	80 e0       	ldi	r24, 0x00	; 0
}
 2c2:	08 95       	ret

000002c4 <wait_btn>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2c4:	8f e4       	ldi	r24, 0x4F	; 79
 2c6:	93 ec       	ldi	r25, 0xC3	; 195
 2c8:	01 97       	sbiw	r24, 0x01	; 1
 2ca:	f1 f7       	brne	.-4      	; 0x2c8 <wait_btn+0x4>
 2cc:	00 c0       	rjmp	.+0      	; 0x2ce <wait_btn+0xa>
 2ce:	00 00       	nop
void wait_btn(){
	_delay_ms(50);
	while(~PIND&p_pin);
 2d0:	80 b3       	in	r24, 0x10	; 16
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	9c 01       	movw	r18, r24
 2d6:	20 95       	com	r18
 2d8:	30 95       	com	r19
 2da:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <p_pin>
 2de:	90 e0       	ldi	r25, 0x00	; 0
 2e0:	82 23       	and	r24, r18
 2e2:	93 23       	and	r25, r19
 2e4:	89 2b       	or	r24, r25
 2e6:	a1 f7       	brne	.-24     	; 0x2d0 <wait_btn+0xc>
 2e8:	8f e4       	ldi	r24, 0x4F	; 79
 2ea:	93 ec       	ldi	r25, 0xC3	; 195
 2ec:	01 97       	sbiw	r24, 0x01	; 1
 2ee:	f1 f7       	brne	.-4      	; 0x2ec <wait_btn+0x28>
 2f0:	00 c0       	rjmp	.+0      	; 0x2f2 <wait_btn+0x2e>
 2f2:	00 00       	nop
 2f4:	08 95       	ret

000002f6 <init>:
	_delay_ms(50);
}
void init() {
 2f6:	cf 93       	push	r28
	DDRA = 0xFF;
 2f8:	8f ef       	ldi	r24, 0xFF	; 255
 2fa:	8a bb       	out	0x1a, r24	; 26
	PORTA = 0x00;
 2fc:	1b ba       	out	0x1b, r1	; 27
	DDRC = 0xF0;
 2fe:	c0 ef       	ldi	r28, 0xF0	; 240
 300:	c4 bb       	out	0x14, r28	; 20
	lcd_init(LCD_DISP_ON); 
 302:	8c e0       	ldi	r24, 0x0C	; 12
 304:	0e 94 d5 00 	call	0x1aa	; 0x1aa <lcd_init>
	DDRD = 0xF0;
 308:	c1 bb       	out	0x11, r28	; 17
    DDRB |= (1 << SERVO_PIN);
 30a:	87 b3       	in	r24, 0x17	; 23
 30c:	88 60       	ori	r24, 0x08	; 8
 30e:	87 bb       	out	0x17, r24	; 23
	DDRB |= (1<<7);
 310:	87 b3       	in	r24, 0x17	; 23
 312:	80 68       	ori	r24, 0x80	; 128
 314:	87 bb       	out	0x17, r24	; 23
    TCCR0 |= (1 << WGM00) | (1 << WGM01) | (1 << COM01) | (1<<CS02);
 316:	83 b7       	in	r24, 0x33	; 51
 318:	8c 66       	ori	r24, 0x6C	; 108
 31a:	83 bf       	out	0x33, r24	; 51
}
 31c:	cf 91       	pop	r28
 31e:	08 95       	ret

00000320 <main>:
uint8_t val = 0;

int main(void)
{
	init();
 320:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <init>
	OCR0 = 0;
 324:	1c be       	out	0x3c, r1	; 60
    /* Replace with your application code */
    while (1) 
    {
		if (pos < 2) {
 326:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <pos>
 32a:	82 30       	cpi	r24, 0x02	; 2
 32c:	08 f0       	brcs	.+2      	; 0x330 <main+0x10>
 32e:	80 c0       	rjmp	.+256    	; 0x430 <__DATA_REGION_LENGTH__+0x30>
			letra = keyboard();
 330:	0e 94 11 01 	call	0x222	; 0x222 <keyboard>
 334:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <letra>
			if (letra != 0) {
 338:	88 23       	and	r24, r24
 33a:	01 f1       	breq	.+64     	; 0x37c <main+0x5c>
				if ('0' <= letra && letra <= '9') {
 33c:	80 53       	subi	r24, 0x30	; 48
 33e:	8a 30       	cpi	r24, 0x0A	; 10
 340:	d0 f4       	brcc	.+52     	; 0x376 <main+0x56>
					// escribir en lcd
					lcd_gotoxy(pos++,0);
 342:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <pos>
 346:	91 e0       	ldi	r25, 0x01	; 1
 348:	98 0f       	add	r25, r24
 34a:	90 93 71 00 	sts	0x0071, r25	; 0x800071 <pos>
 34e:	60 e0       	ldi	r22, 0x00	; 0
 350:	0e 94 b2 00 	call	0x164	; 0x164 <lcd_gotoxy>
					lcd_putc(letra);
 354:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <letra>
 358:	0e 94 c0 00 	call	0x180	; 0x180 <lcd_putc>
					val*=10;
 35c:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__data_end>
 360:	88 0f       	add	r24, r24
 362:	98 2f       	mov	r25, r24
 364:	99 0f       	add	r25, r25
 366:	99 0f       	add	r25, r25
 368:	98 0f       	add	r25, r24
					val+=letra-'0';
 36a:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <letra>
 36e:	89 0f       	add	r24, r25
 370:	80 53       	subi	r24, 0x30	; 48
 372:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__data_end>
				}
				wait_btn();
 376:	0e 94 62 01 	call	0x2c4	; 0x2c4 <wait_btn>
 37a:	d5 cf       	rjmp	.-86     	; 0x326 <main+0x6>
			} else {
				wait_btn();
 37c:	0e 94 62 01 	call	0x2c4	; 0x2c4 <wait_btn>
 380:	d2 cf       	rjmp	.-92     	; 0x326 <main+0x6>
		} else {
			uint8_t z=0;
			uint8_t cp = val;
			float x = (37.0-9.0)/val;
			for (int i=8;i<=37;i++) {
				OCR0=i;
 382:	0c bf       	out	0x3c, r16	; 60
			
				cp=val;
 384:	d0 91 70 00 	lds	r29, 0x0070	; 0x800070 <__data_end>
				for (int j=0;j<val;j++) { _delay_ms(250);
 388:	e1 2c       	mov	r14, r1
 38a:	f1 2c       	mov	r15, r1
 38c:	2a c0       	rjmp	.+84     	; 0x3e2 <main+0xc2>
 38e:	2f e3       	ldi	r18, 0x3F	; 63
 390:	8d e0       	ldi	r24, 0x0D	; 13
 392:	93 e0       	ldi	r25, 0x03	; 3
 394:	21 50       	subi	r18, 0x01	; 1
 396:	80 40       	sbci	r24, 0x00	; 0
 398:	90 40       	sbci	r25, 0x00	; 0
 39a:	e1 f7       	brne	.-8      	; 0x394 <main+0x74>
 39c:	00 c0       	rjmp	.+0      	; 0x39e <main+0x7e>
 39e:	00 00       	nop
					lcd_gotoxy(0,0);
 3a0:	60 e0       	ldi	r22, 0x00	; 0
 3a2:	80 e0       	ldi	r24, 0x00	; 0
 3a4:	0e 94 b2 00 	call	0x164	; 0x164 <lcd_gotoxy>
					lcd_putc(cp/10+'0');
 3a8:	cd ec       	ldi	r28, 0xCD	; 205
 3aa:	dc 9f       	mul	r29, r28
 3ac:	c1 2d       	mov	r28, r1
 3ae:	11 24       	eor	r1, r1
 3b0:	c6 95       	lsr	r28
 3b2:	c6 95       	lsr	r28
 3b4:	c6 95       	lsr	r28
 3b6:	80 e3       	ldi	r24, 0x30	; 48
 3b8:	8c 0f       	add	r24, r28
 3ba:	0e 94 c0 00 	call	0x180	; 0x180 <lcd_putc>
					lcd_gotoxy(1,0);
 3be:	60 e0       	ldi	r22, 0x00	; 0
 3c0:	81 e0       	ldi	r24, 0x01	; 1
 3c2:	0e 94 b2 00 	call	0x164	; 0x164 <lcd_gotoxy>
					lcd_putc(cp%10+'0');
 3c6:	cc 0f       	add	r28, r28
 3c8:	8c 2f       	mov	r24, r28
 3ca:	88 0f       	add	r24, r24
 3cc:	88 0f       	add	r24, r24
 3ce:	c8 0f       	add	r28, r24
 3d0:	8d 2f       	mov	r24, r29
 3d2:	8c 1b       	sub	r24, r28
 3d4:	80 5d       	subi	r24, 0xD0	; 208
 3d6:	0e 94 c0 00 	call	0x180	; 0x180 <lcd_putc>
					cp--;
 3da:	d1 50       	subi	r29, 0x01	; 1
			float x = (37.0-9.0)/val;
			for (int i=8;i<=37;i++) {
				OCR0=i;
			
				cp=val;
				for (int j=0;j<val;j++) { _delay_ms(250);
 3dc:	2f ef       	ldi	r18, 0xFF	; 255
 3de:	e2 1a       	sub	r14, r18
 3e0:	f2 0a       	sbc	r15, r18
 3e2:	c0 91 70 00 	lds	r28, 0x0070	; 0x800070 <__data_end>
 3e6:	8c 2f       	mov	r24, r28
 3e8:	90 e0       	ldi	r25, 0x00	; 0
 3ea:	e8 16       	cp	r14, r24
 3ec:	f9 06       	cpc	r15, r25
 3ee:	7c f2       	brlt	.-98     	; 0x38e <main+0x6e>
					lcd_gotoxy(1,0);
					lcd_putc(cp%10+'0');
					cp--;
				}
				cp=val;
									lcd_gotoxy(0,0);
 3f0:	60 e0       	ldi	r22, 0x00	; 0
 3f2:	80 e0       	ldi	r24, 0x00	; 0
 3f4:	0e 94 b2 00 	call	0x164	; 0x164 <lcd_gotoxy>
									lcd_putc(cp/10+'0');
 3f8:	dd ec       	ldi	r29, 0xCD	; 205
 3fa:	cd 9f       	mul	r28, r29
 3fc:	d1 2d       	mov	r29, r1
 3fe:	11 24       	eor	r1, r1
 400:	d6 95       	lsr	r29
 402:	d6 95       	lsr	r29
 404:	d6 95       	lsr	r29
 406:	80 e3       	ldi	r24, 0x30	; 48
 408:	8d 0f       	add	r24, r29
 40a:	0e 94 c0 00 	call	0x180	; 0x180 <lcd_putc>
									lcd_gotoxy(1,0);
 40e:	60 e0       	ldi	r22, 0x00	; 0
 410:	81 e0       	ldi	r24, 0x01	; 1
 412:	0e 94 b2 00 	call	0x164	; 0x164 <lcd_gotoxy>
									lcd_putc(cp%10+'0');
 416:	dd 0f       	add	r29, r29
 418:	8d 2f       	mov	r24, r29
 41a:	88 0f       	add	r24, r24
 41c:	88 0f       	add	r24, r24
 41e:	d8 0f       	add	r29, r24
 420:	8c 2f       	mov	r24, r28
 422:	8d 1b       	sub	r24, r29
 424:	80 5d       	subi	r24, 0xD0	; 208
 426:	0e 94 c0 00 	call	0x180	; 0x180 <lcd_putc>
			}
		} else {
			uint8_t z=0;
			uint8_t cp = val;
			float x = (37.0-9.0)/val;
			for (int i=8;i<=37;i++) {
 42a:	0f 5f       	subi	r16, 0xFF	; 255
 42c:	1f 4f       	sbci	r17, 0xFF	; 255
 42e:	02 c0       	rjmp	.+4      	; 0x434 <__DATA_REGION_LENGTH__+0x34>
 430:	08 e0       	ldi	r16, 0x08	; 8
 432:	10 e0       	ldi	r17, 0x00	; 0
 434:	06 32       	cpi	r16, 0x26	; 38
 436:	11 05       	cpc	r17, r1
 438:	0c f4       	brge	.+2      	; 0x43c <__DATA_REGION_LENGTH__+0x3c>
 43a:	a3 cf       	rjmp	.-186    	; 0x382 <main+0x62>
									lcd_gotoxy(0,0);
									lcd_putc(cp/10+'0');
									lcd_gotoxy(1,0);
									lcd_putc(cp%10+'0');
			}
			pos=0;
 43c:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <pos>
			lcd_clrscr();
 440:	0e 94 bc 00 	call	0x178	; 0x178 <lcd_clrscr>
			PORTA = 0xff;
 444:	8f ef       	ldi	r24, 0xFF	; 255
 446:	8b bb       	out	0x1b, r24	; 27
			PORTB |= (1<<7);
 448:	88 b3       	in	r24, 0x18	; 24
 44a:	80 68       	ori	r24, 0x80	; 128
 44c:	88 bb       	out	0x18, r24	; 24
 44e:	8f ef       	ldi	r24, 0xFF	; 255
 450:	99 e6       	ldi	r25, 0x69	; 105
 452:	28 e1       	ldi	r18, 0x18	; 24
 454:	81 50       	subi	r24, 0x01	; 1
 456:	90 40       	sbci	r25, 0x00	; 0
 458:	20 40       	sbci	r18, 0x00	; 0
 45a:	e1 f7       	brne	.-8      	; 0x454 <__DATA_REGION_LENGTH__+0x54>
 45c:	00 c0       	rjmp	.+0      	; 0x45e <__DATA_REGION_LENGTH__+0x5e>
 45e:	00 00       	nop
			_delay_ms(2000);
			OCR0 = 0;
 460:	1c be       	out	0x3c, r1	; 60
		
			PORTA = 0;
 462:	1b ba       	out	0x1b, r1	; 27
			PORTB &= 0b01111111;
 464:	88 b3       	in	r24, 0x18	; 24
 466:	8f 77       	andi	r24, 0x7F	; 127
 468:	88 bb       	out	0x18, r24	; 24
			val=0;
 46a:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <__data_end>
 46e:	5b cf       	rjmp	.-330    	; 0x326 <main+0x6>

00000470 <_exit>:
 470:	f8 94       	cli

00000472 <__stop_program>:
 472:	ff cf       	rjmp	.-2      	; 0x472 <__stop_program>
