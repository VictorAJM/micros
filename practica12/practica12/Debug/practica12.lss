
practica12.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003d0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000016  00800060  000003d0  00000464  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800076  00800076  0000047a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000047a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000004ac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f8  00000000  00000000  000004e8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001001  00000000  00000000  000005e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000901  00000000  00000000  000015e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000895  00000000  00000000  00001ee2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000184  00000000  00000000  00002778  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000047c  00000000  00000000  000028fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005da  00000000  00000000  00002d78  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  00003352  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 ed       	ldi	r30, 0xD0	; 208
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 37       	cpi	r26, 0x76	; 118
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a6 e7       	ldi	r26, 0x76	; 118
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a7 37       	cpi	r26, 0x77	; 119
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 8a 01 	call	0x314	; 0x314 <main>
  8a:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) ) {
        lcd_putc(c);
    }

}/* lcd_puts_p */
  92:	85 b3       	in	r24, 0x15	; 21
  94:	80 64       	ori	r24, 0x40	; 64
  96:	85 bb       	out	0x15, r24	; 21
  98:	00 c0       	rjmp	.+0      	; 0x9a <toggle_e+0x8>
  9a:	85 b3       	in	r24, 0x15	; 21
  9c:	8f 7b       	andi	r24, 0xBF	; 191
  9e:	85 bb       	out	0x15, r24	; 21
  a0:	08 95       	ret

000000a2 <lcd_write>:
  a2:	cf 93       	push	r28
  a4:	df 93       	push	r29
  a6:	d8 2f       	mov	r29, r24
  a8:	66 23       	and	r22, r22
  aa:	21 f0       	breq	.+8      	; 0xb4 <lcd_write+0x12>
  ac:	85 b3       	in	r24, 0x15	; 21
  ae:	80 61       	ori	r24, 0x10	; 16
  b0:	85 bb       	out	0x15, r24	; 21
  b2:	03 c0       	rjmp	.+6      	; 0xba <lcd_write+0x18>
  b4:	85 b3       	in	r24, 0x15	; 21
  b6:	8f 7e       	andi	r24, 0xEF	; 239
  b8:	85 bb       	out	0x15, r24	; 21
  ba:	85 b3       	in	r24, 0x15	; 21
  bc:	8f 7d       	andi	r24, 0xDF	; 223
  be:	85 bb       	out	0x15, r24	; 21
  c0:	84 b3       	in	r24, 0x14	; 20
  c2:	8f 60       	ori	r24, 0x0F	; 15
  c4:	84 bb       	out	0x14, r24	; 20
  c6:	c5 b3       	in	r28, 0x15	; 21
  c8:	c0 7f       	andi	r28, 0xF0	; 240
  ca:	8d 2f       	mov	r24, r29
  cc:	82 95       	swap	r24
  ce:	8f 70       	andi	r24, 0x0F	; 15
  d0:	8c 2b       	or	r24, r28
  d2:	85 bb       	out	0x15, r24	; 21
  d4:	0e 94 49 00 	call	0x92	; 0x92 <toggle_e>
  d8:	df 70       	andi	r29, 0x0F	; 15
  da:	dc 2b       	or	r29, r28
  dc:	d5 bb       	out	0x15, r29	; 21
  de:	0e 94 49 00 	call	0x92	; 0x92 <toggle_e>
  e2:	cf 60       	ori	r28, 0x0F	; 15
  e4:	c5 bb       	out	0x15, r28	; 21
  e6:	df 91       	pop	r29
  e8:	cf 91       	pop	r28
  ea:	08 95       	ret

000000ec <lcd_read>:
  ec:	88 23       	and	r24, r24
  ee:	21 f0       	breq	.+8      	; 0xf8 <lcd_read+0xc>
  f0:	85 b3       	in	r24, 0x15	; 21
  f2:	80 61       	ori	r24, 0x10	; 16
  f4:	85 bb       	out	0x15, r24	; 21
  f6:	03 c0       	rjmp	.+6      	; 0xfe <lcd_read+0x12>
  f8:	85 b3       	in	r24, 0x15	; 21
  fa:	8f 7e       	andi	r24, 0xEF	; 239
  fc:	85 bb       	out	0x15, r24	; 21
  fe:	85 b3       	in	r24, 0x15	; 21
 100:	80 62       	ori	r24, 0x20	; 32
 102:	85 bb       	out	0x15, r24	; 21
 104:	84 b3       	in	r24, 0x14	; 20
 106:	80 7f       	andi	r24, 0xF0	; 240
 108:	84 bb       	out	0x14, r24	; 20
 10a:	85 b3       	in	r24, 0x15	; 21
 10c:	80 64       	ori	r24, 0x40	; 64
 10e:	85 bb       	out	0x15, r24	; 21
 110:	00 c0       	rjmp	.+0      	; 0x112 <lcd_read+0x26>
 112:	93 b3       	in	r25, 0x13	; 19
 114:	92 95       	swap	r25
 116:	90 7f       	andi	r25, 0xF0	; 240
 118:	85 b3       	in	r24, 0x15	; 21
 11a:	8f 7b       	andi	r24, 0xBF	; 191
 11c:	85 bb       	out	0x15, r24	; 21
 11e:	00 c0       	rjmp	.+0      	; 0x120 <lcd_read+0x34>
 120:	85 b3       	in	r24, 0x15	; 21
 122:	80 64       	ori	r24, 0x40	; 64
 124:	85 bb       	out	0x15, r24	; 21
 126:	00 c0       	rjmp	.+0      	; 0x128 <lcd_read+0x3c>
 128:	83 b3       	in	r24, 0x13	; 19
 12a:	8f 70       	andi	r24, 0x0F	; 15
 12c:	25 b3       	in	r18, 0x15	; 21
 12e:	2f 7b       	andi	r18, 0xBF	; 191
 130:	25 bb       	out	0x15, r18	; 21
 132:	89 2b       	or	r24, r25
 134:	08 95       	ret

00000136 <lcd_waitbusy>:
 136:	80 e0       	ldi	r24, 0x00	; 0
 138:	0e 94 76 00 	call	0xec	; 0xec <lcd_read>
 13c:	88 23       	and	r24, r24
 13e:	dc f3       	brlt	.-10     	; 0x136 <lcd_waitbusy>
 140:	00 c0       	rjmp	.+0      	; 0x142 <lcd_waitbusy+0xc>
 142:	80 e0       	ldi	r24, 0x00	; 0
 144:	0e 94 76 00 	call	0xec	; 0xec <lcd_read>
 148:	08 95       	ret

0000014a <lcd_command>:
 14a:	cf 93       	push	r28
 14c:	c8 2f       	mov	r28, r24
 14e:	0e 94 9b 00 	call	0x136	; 0x136 <lcd_waitbusy>
 152:	60 e0       	ldi	r22, 0x00	; 0
 154:	8c 2f       	mov	r24, r28
 156:	0e 94 51 00 	call	0xa2	; 0xa2 <lcd_write>
 15a:	cf 91       	pop	r28
 15c:	08 95       	ret

0000015e <lcd_clrscr>:
 15e:	81 e0       	ldi	r24, 0x01	; 1
 160:	0e 94 a5 00 	call	0x14a	; 0x14a <lcd_command>
 164:	08 95       	ret

00000166 <lcd_putc>:
 166:	cf 93       	push	r28
 168:	c8 2f       	mov	r28, r24
 16a:	0e 94 9b 00 	call	0x136	; 0x136 <lcd_waitbusy>
 16e:	ca 30       	cpi	r28, 0x0A	; 10
 170:	49 f4       	brne	.+18     	; 0x184 <lcd_putc+0x1e>
 172:	80 34       	cpi	r24, 0x40	; 64
 174:	10 f4       	brcc	.+4      	; 0x17a <lcd_putc+0x14>
 176:	80 e4       	ldi	r24, 0x40	; 64
 178:	01 c0       	rjmp	.+2      	; 0x17c <lcd_putc+0x16>
 17a:	80 e0       	ldi	r24, 0x00	; 0
 17c:	80 58       	subi	r24, 0x80	; 128
 17e:	0e 94 a5 00 	call	0x14a	; 0x14a <lcd_command>
 182:	04 c0       	rjmp	.+8      	; 0x18c <lcd_putc+0x26>
 184:	61 e0       	ldi	r22, 0x01	; 1
 186:	8c 2f       	mov	r24, r28
 188:	0e 94 51 00 	call	0xa2	; 0xa2 <lcd_write>
 18c:	cf 91       	pop	r28
 18e:	08 95       	ret

00000190 <lcd_puts>:
 190:	cf 93       	push	r28
 192:	df 93       	push	r29
 194:	fc 01       	movw	r30, r24
 196:	03 c0       	rjmp	.+6      	; 0x19e <lcd_puts+0xe>
 198:	0e 94 b3 00 	call	0x166	; 0x166 <lcd_putc>
 19c:	fe 01       	movw	r30, r28
 19e:	ef 01       	movw	r28, r30
 1a0:	21 96       	adiw	r28, 0x01	; 1
 1a2:	80 81       	ld	r24, Z
 1a4:	81 11       	cpse	r24, r1
 1a6:	f8 cf       	rjmp	.-16     	; 0x198 <lcd_puts+0x8>
 1a8:	df 91       	pop	r29
 1aa:	cf 91       	pop	r28
 1ac:	08 95       	ret

000001ae <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 1ae:	1f 93       	push	r17
 1b0:	cf 93       	push	r28
 1b2:	df 93       	push	r29
 1b4:	18 2f       	mov	r17, r24
      && ( &LCD_RS_PORT == &LCD_DATA0_PORT) && ( &LCD_RW_PORT == &LCD_DATA0_PORT) && (&LCD_E_PORT == &LCD_DATA0_PORT)
      && (LCD_DATA0_PIN == 0 ) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) 
      && (LCD_RS_PIN == 4 ) && (LCD_RW_PIN == 5) && (LCD_E_PIN == 6 ) )
    {
        /* configure all port bits as output (all LCD lines on same port) */
        DDR(LCD_DATA0_PORT) |= 0x7F;
 1b6:	84 b3       	in	r24, 0x14	; 20
 1b8:	8f 67       	ori	r24, 0x7F	; 127
 1ba:	84 bb       	out	0x14, r24	; 20
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 1bc:	80 ea       	ldi	r24, 0xA0	; 160
 1be:	9f e0       	ldi	r25, 0x0F	; 15
 1c0:	01 97       	sbiw	r24, 0x01	; 1
 1c2:	f1 f7       	brne	.-4      	; 0x1c0 <lcd_init+0x12>
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
    }
    delay(16000);        /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);  // _BV(LCD_FUNCTION)>>4;
 1c4:	85 b3       	in	r24, 0x15	; 21
 1c6:	82 60       	ori	r24, 0x02	; 2
 1c8:	85 bb       	out	0x15, r24	; 21
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
 1ca:	85 b3       	in	r24, 0x15	; 21
 1cc:	81 60       	ori	r24, 0x01	; 1
 1ce:	85 bb       	out	0x15, r24	; 21
    lcd_e_toggle();
 1d0:	0e 94 49 00 	call	0x92	; 0x92 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 1d4:	80 ee       	ldi	r24, 0xE0	; 224
 1d6:	94 e0       	ldi	r25, 0x04	; 4
 1d8:	01 97       	sbiw	r24, 0x01	; 1
 1da:	f1 f7       	brne	.-4      	; 0x1d8 <lcd_init+0x2a>
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
    lcd_e_toggle();
    delay(4992);         /* delay, busy flag can't be checked here */
   
    /* repeat last command */ 
    lcd_e_toggle();      
 1dc:	0e 94 49 00 	call	0x92	; 0x92 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 1e0:	c0 e1       	ldi	r28, 0x10	; 16
 1e2:	d0 e0       	ldi	r29, 0x00	; 0
 1e4:	ce 01       	movw	r24, r28
 1e6:	01 97       	sbiw	r24, 0x01	; 1
 1e8:	f1 f7       	brne	.-4      	; 0x1e6 <lcd_init+0x38>
    /* repeat last command */ 
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */
    
    /* repeat last command a third time */
    lcd_e_toggle();      
 1ea:	0e 94 49 00 	call	0x92	; 0x92 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 1ee:	ce 01       	movw	r24, r28
 1f0:	01 97       	sbiw	r24, 0x01	; 1
 1f2:	f1 f7       	brne	.-4      	; 0x1f0 <lcd_init+0x42>
    /* repeat last command a third time */
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
 1f4:	85 b3       	in	r24, 0x15	; 21
 1f6:	8e 7f       	andi	r24, 0xFE	; 254
 1f8:	85 bb       	out	0x15, r24	; 21
    lcd_e_toggle();
 1fa:	0e 94 49 00 	call	0x92	; 0x92 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 1fe:	21 97       	sbiw	r28, 0x01	; 1
 200:	f1 f7       	brne	.-4      	; 0x1fe <lcd_init+0x50>
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
 202:	88 e2       	ldi	r24, 0x28	; 40
 204:	0e 94 a5 00 	call	0x14a	; 0x14a <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
 208:	88 e0       	ldi	r24, 0x08	; 8
 20a:	0e 94 a5 00 	call	0x14a	; 0x14a <lcd_command>
    lcd_clrscr();                           /* display clear                */ 
 20e:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 212:	86 e0       	ldi	r24, 0x06	; 6
 214:	0e 94 a5 00 	call	0x14a	; 0x14a <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
 218:	81 2f       	mov	r24, r17
 21a:	0e 94 a5 00 	call	0x14a	; 0x14a <lcd_command>

}/* lcd_init */
 21e:	df 91       	pop	r29
 220:	cf 91       	pop	r28
 222:	1f 91       	pop	r17
 224:	08 95       	ret

00000226 <keyboard>:
	{'E', '0', 'F', 'D'}
};
uint8_t p_pin;
char keyboard(){
	while(1){
		for(uint8_t i = 0; i<4; i++){
 226:	40 e0       	ldi	r20, 0x00	; 0
 228:	58 c0       	rjmp	.+176    	; 0x2da <keyboard+0xb4>
			PORTD = 0b11111111 ^ (1<<(7-i));
 22a:	24 2f       	mov	r18, r20
 22c:	30 e0       	ldi	r19, 0x00	; 0
 22e:	67 e0       	ldi	r22, 0x07	; 7
 230:	70 e0       	ldi	r23, 0x00	; 0
 232:	62 1b       	sub	r22, r18
 234:	73 0b       	sbc	r23, r19
 236:	81 e0       	ldi	r24, 0x01	; 1
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	02 c0       	rjmp	.+4      	; 0x240 <keyboard+0x1a>
 23c:	88 0f       	add	r24, r24
 23e:	99 1f       	adc	r25, r25
 240:	6a 95       	dec	r22
 242:	e2 f7       	brpl	.-8      	; 0x23c <keyboard+0x16>
 244:	80 95       	com	r24
 246:	82 bb       	out	0x12, r24	; 18
			if(~PIND&1 && '0' <= mat[i][3] && mat[i][3]<='9') {p_pin = 1;return mat[i][3];}
 248:	80 99       	sbic	0x10, 0	; 16
 24a:	10 c0       	rjmp	.+32     	; 0x26c <keyboard+0x46>
 24c:	f9 01       	movw	r30, r18
 24e:	ee 0f       	add	r30, r30
 250:	ff 1f       	adc	r31, r31
 252:	ee 0f       	add	r30, r30
 254:	ff 1f       	adc	r31, r31
 256:	e0 5a       	subi	r30, 0xA0	; 160
 258:	ff 4f       	sbci	r31, 0xFF	; 255
 25a:	83 81       	ldd	r24, Z+3	; 0x03
 25c:	80 33       	cpi	r24, 0x30	; 48
 25e:	30 f0       	brcs	.+12     	; 0x26c <keyboard+0x46>
 260:	8a 33       	cpi	r24, 0x3A	; 58
 262:	20 f4       	brcc	.+8      	; 0x26c <keyboard+0x46>
 264:	91 e0       	ldi	r25, 0x01	; 1
 266:	90 93 76 00 	sts	0x0076, r25	; 0x800076 <__data_end>
 26a:	08 95       	ret
			if(~PIND&2 && '0' <= mat[i][2] && mat[i][2]<='9') {p_pin = 2;return mat[i][2];}
 26c:	81 99       	sbic	0x10, 1	; 16
 26e:	10 c0       	rjmp	.+32     	; 0x290 <keyboard+0x6a>
 270:	f9 01       	movw	r30, r18
 272:	ee 0f       	add	r30, r30
 274:	ff 1f       	adc	r31, r31
 276:	ee 0f       	add	r30, r30
 278:	ff 1f       	adc	r31, r31
 27a:	e0 5a       	subi	r30, 0xA0	; 160
 27c:	ff 4f       	sbci	r31, 0xFF	; 255
 27e:	82 81       	ldd	r24, Z+2	; 0x02
 280:	80 33       	cpi	r24, 0x30	; 48
 282:	30 f0       	brcs	.+12     	; 0x290 <keyboard+0x6a>
 284:	8a 33       	cpi	r24, 0x3A	; 58
 286:	20 f4       	brcc	.+8      	; 0x290 <keyboard+0x6a>
 288:	92 e0       	ldi	r25, 0x02	; 2
 28a:	90 93 76 00 	sts	0x0076, r25	; 0x800076 <__data_end>
 28e:	08 95       	ret
			if(~PIND&4 && '0' <= mat[i][1] && mat[i][1]<='9') {p_pin = 4;return mat[i][1];}
 290:	82 99       	sbic	0x10, 2	; 16
 292:	10 c0       	rjmp	.+32     	; 0x2b4 <keyboard+0x8e>
 294:	f9 01       	movw	r30, r18
 296:	ee 0f       	add	r30, r30
 298:	ff 1f       	adc	r31, r31
 29a:	ee 0f       	add	r30, r30
 29c:	ff 1f       	adc	r31, r31
 29e:	e0 5a       	subi	r30, 0xA0	; 160
 2a0:	ff 4f       	sbci	r31, 0xFF	; 255
 2a2:	81 81       	ldd	r24, Z+1	; 0x01
 2a4:	80 33       	cpi	r24, 0x30	; 48
 2a6:	30 f0       	brcs	.+12     	; 0x2b4 <keyboard+0x8e>
 2a8:	8a 33       	cpi	r24, 0x3A	; 58
 2aa:	20 f4       	brcc	.+8      	; 0x2b4 <keyboard+0x8e>
 2ac:	94 e0       	ldi	r25, 0x04	; 4
 2ae:	90 93 76 00 	sts	0x0076, r25	; 0x800076 <__data_end>
 2b2:	08 95       	ret
			if(~PIND&8 && '0' <= mat[i][0] && mat[i][0]<='9') {p_pin = 8;return mat[i][0];}
 2b4:	83 99       	sbic	0x10, 3	; 16
 2b6:	10 c0       	rjmp	.+32     	; 0x2d8 <keyboard+0xb2>
 2b8:	22 0f       	add	r18, r18
 2ba:	33 1f       	adc	r19, r19
 2bc:	22 0f       	add	r18, r18
 2be:	33 1f       	adc	r19, r19
 2c0:	f9 01       	movw	r30, r18
 2c2:	e0 5a       	subi	r30, 0xA0	; 160
 2c4:	ff 4f       	sbci	r31, 0xFF	; 255
 2c6:	80 81       	ld	r24, Z
 2c8:	80 33       	cpi	r24, 0x30	; 48
 2ca:	30 f0       	brcs	.+12     	; 0x2d8 <keyboard+0xb2>
 2cc:	8a 33       	cpi	r24, 0x3A	; 58
 2ce:	20 f4       	brcc	.+8      	; 0x2d8 <keyboard+0xb2>
 2d0:	98 e0       	ldi	r25, 0x08	; 8
 2d2:	90 93 76 00 	sts	0x0076, r25	; 0x800076 <__data_end>
 2d6:	08 95       	ret
	{'E', '0', 'F', 'D'}
};
uint8_t p_pin;
char keyboard(){
	while(1){
		for(uint8_t i = 0; i<4; i++){
 2d8:	4f 5f       	subi	r20, 0xFF	; 255
 2da:	44 30       	cpi	r20, 0x04	; 4
 2dc:	08 f4       	brcc	.+2      	; 0x2e0 <keyboard+0xba>
 2de:	a5 cf       	rjmp	.-182    	; 0x22a <keyboard+0x4>
 2e0:	a2 cf       	rjmp	.-188    	; 0x226 <keyboard>

000002e2 <wait_btn>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2e2:	83 ed       	ldi	r24, 0xD3	; 211
 2e4:	90 e3       	ldi	r25, 0x30	; 48
 2e6:	01 97       	sbiw	r24, 0x01	; 1
 2e8:	f1 f7       	brne	.-4      	; 0x2e6 <wait_btn+0x4>
 2ea:	00 c0       	rjmp	.+0      	; 0x2ec <wait_btn+0xa>
 2ec:	00 00       	nop
	}
}

void wait_btn(){
	_delay_ms(50);
	while(~PIND&p_pin);
 2ee:	80 b3       	in	r24, 0x10	; 16
 2f0:	90 e0       	ldi	r25, 0x00	; 0
 2f2:	9c 01       	movw	r18, r24
 2f4:	20 95       	com	r18
 2f6:	30 95       	com	r19
 2f8:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <__data_end>
 2fc:	90 e0       	ldi	r25, 0x00	; 0
 2fe:	82 23       	and	r24, r18
 300:	93 23       	and	r25, r19
 302:	89 2b       	or	r24, r25
 304:	a1 f7       	brne	.-24     	; 0x2ee <wait_btn+0xc>
 306:	83 ed       	ldi	r24, 0xD3	; 211
 308:	90 e3       	ldi	r25, 0x30	; 48
 30a:	01 97       	sbiw	r24, 0x01	; 1
 30c:	f1 f7       	brne	.-4      	; 0x30a <wait_btn+0x28>
 30e:	00 c0       	rjmp	.+0      	; 0x310 <wait_btn+0x2e>
 310:	00 00       	nop
 312:	08 95       	ret

00000314 <main>:
	_delay_ms(50);
}
int main(void)
{
	lcd_init(LCD_DISP_ON);
 314:	8c e0       	ldi	r24, 0x0C	; 12
 316:	0e 94 d7 00 	call	0x1ae	; 0x1ae <lcd_init>
	DDRD = 0xF0;
 31a:	80 ef       	ldi	r24, 0xF0	; 240
 31c:	81 bb       	out	0x11, r24	; 17
	
    /* Replace with your application code */
	char R[4];
		lcd_clrscr();
 31e:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_clrscr>
		lcd_puts("0000");
 322:	80 e7       	ldi	r24, 0x70	; 112
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	0e 94 c8 00 	call	0x190	; 0x190 <lcd_puts>
	do {
		R[0] = eeprom_read_byte(0);
 32a:	80 e0       	ldi	r24, 0x00	; 0
 32c:	90 e0       	ldi	r25, 0x00	; 0
 32e:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <eeprom_read_byte>
 332:	18 2f       	mov	r17, r24
		R[1] = eeprom_read_byte(1);
 334:	81 e0       	ldi	r24, 0x01	; 1
 336:	90 e0       	ldi	r25, 0x00	; 0
 338:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <eeprom_read_byte>
 33c:	d8 2f       	mov	r29, r24
		R[2] = eeprom_read_byte(2);
 33e:	82 e0       	ldi	r24, 0x02	; 2
 340:	90 e0       	ldi	r25, 0x00	; 0
 342:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <eeprom_read_byte>
 346:	c8 2f       	mov	r28, r24
		R[3] = eeprom_read_byte(3);
 348:	83 e0       	ldi	r24, 0x03	; 3
 34a:	90 e0       	ldi	r25, 0x00	; 0
 34c:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <eeprom_read_byte>
 350:	08 2f       	mov	r16, r24

		lcd_clrscr();
 352:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_clrscr>
		lcd_putc(R[0]); lcd_putc(R[1]); lcd_putc(R[2]); lcd_putc(R[3]);
 356:	81 2f       	mov	r24, r17
 358:	0e 94 b3 00 	call	0x166	; 0x166 <lcd_putc>
 35c:	8d 2f       	mov	r24, r29
 35e:	0e 94 b3 00 	call	0x166	; 0x166 <lcd_putc>
 362:	8c 2f       	mov	r24, r28
 364:	0e 94 b3 00 	call	0x166	; 0x166 <lcd_putc>
 368:	80 2f       	mov	r24, r16
 36a:	0e 94 b3 00 	call	0x166	; 0x166 <lcd_putc>
		uint8_t num = keyboard();
 36e:	0e 94 13 01 	call	0x226	; 0x226 <keyboard>
 372:	08 2f       	mov	r16, r24
		wait_btn();
 374:	0e 94 71 01 	call	0x2e2	; 0x2e2 <wait_btn>
		R[3] = R[2];
		R[2] = R[1];
		R[1] = R[0];
		R[0] = num;
		eeprom_write_byte(0,R[0]);
 378:	60 2f       	mov	r22, r16
 37a:	80 e0       	ldi	r24, 0x00	; 0
 37c:	90 e0       	ldi	r25, 0x00	; 0
 37e:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <eeprom_write_byte>
		eeprom_write_byte(1,R[1]);
 382:	61 2f       	mov	r22, r17
 384:	81 e0       	ldi	r24, 0x01	; 1
 386:	90 e0       	ldi	r25, 0x00	; 0
 388:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <eeprom_write_byte>
		eeprom_write_byte(2,R[2]);
 38c:	6d 2f       	mov	r22, r29
 38e:	82 e0       	ldi	r24, 0x02	; 2
 390:	90 e0       	ldi	r25, 0x00	; 0
 392:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <eeprom_write_byte>
		eeprom_write_byte(3,R[3]);
 396:	6c 2f       	mov	r22, r28
 398:	83 e0       	ldi	r24, 0x03	; 3
 39a:	90 e0       	ldi	r25, 0x00	; 0
 39c:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <eeprom_write_byte>
 3a0:	c4 cf       	rjmp	.-120    	; 0x32a <main+0x16>

000003a2 <eeprom_read_byte>:
 3a2:	e1 99       	sbic	0x1c, 1	; 28
 3a4:	fe cf       	rjmp	.-4      	; 0x3a2 <eeprom_read_byte>
 3a6:	9f bb       	out	0x1f, r25	; 31
 3a8:	8e bb       	out	0x1e, r24	; 30
 3aa:	e0 9a       	sbi	0x1c, 0	; 28
 3ac:	99 27       	eor	r25, r25
 3ae:	8d b3       	in	r24, 0x1d	; 29
 3b0:	08 95       	ret

000003b2 <eeprom_write_byte>:
 3b2:	26 2f       	mov	r18, r22

000003b4 <eeprom_write_r18>:
 3b4:	e1 99       	sbic	0x1c, 1	; 28
 3b6:	fe cf       	rjmp	.-4      	; 0x3b4 <eeprom_write_r18>
 3b8:	9f bb       	out	0x1f, r25	; 31
 3ba:	8e bb       	out	0x1e, r24	; 30
 3bc:	2d bb       	out	0x1d, r18	; 29
 3be:	0f b6       	in	r0, 0x3f	; 63
 3c0:	f8 94       	cli
 3c2:	e2 9a       	sbi	0x1c, 2	; 28
 3c4:	e1 9a       	sbi	0x1c, 1	; 28
 3c6:	0f be       	out	0x3f, r0	; 63
 3c8:	01 96       	adiw	r24, 0x01	; 1
 3ca:	08 95       	ret

000003cc <_exit>:
 3cc:	f8 94       	cli

000003ce <__stop_program>:
 3ce:	ff cf       	rjmp	.-2      	; 0x3ce <__stop_program>
