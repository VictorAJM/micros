
practica5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000374  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000374  00000408  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800062  00800062  0000040a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000040a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000043c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  00000478  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d7e  00000000  00000000  00000530  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000885  00000000  00000000  000012ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006f5  00000000  00000000  00001b33  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000194  00000000  00000000  00002228  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000464  00000000  00000000  000023bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005e4  00000000  00000000  00002820  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  00002e04  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 9d 01 	jmp	0x33a	; 0x33a <__vector_19>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e7       	ldi	r30, 0x74	; 116
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e6       	ldi	r26, 0x62	; 98
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 36       	cpi	r26, 0x66	; 102
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 25 01 	call	0x24a	; 0x24a <main>
  8a:	0c 94 b8 01 	jmp	0x370	; 0x370 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) ) {
        lcd_putc(c);
    }

}/* lcd_puts_p */
  92:	85 b3       	in	r24, 0x15	; 21
  94:	80 64       	ori	r24, 0x40	; 64
  96:	85 bb       	out	0x15, r24	; 21
  98:	00 c0       	rjmp	.+0      	; 0x9a <toggle_e+0x8>
  9a:	85 b3       	in	r24, 0x15	; 21
  9c:	8f 7b       	andi	r24, 0xBF	; 191
  9e:	85 bb       	out	0x15, r24	; 21
  a0:	08 95       	ret

000000a2 <lcd_write>:
  a2:	cf 93       	push	r28
  a4:	df 93       	push	r29
  a6:	d8 2f       	mov	r29, r24
  a8:	66 23       	and	r22, r22
  aa:	21 f0       	breq	.+8      	; 0xb4 <lcd_write+0x12>
  ac:	85 b3       	in	r24, 0x15	; 21
  ae:	80 61       	ori	r24, 0x10	; 16
  b0:	85 bb       	out	0x15, r24	; 21
  b2:	03 c0       	rjmp	.+6      	; 0xba <lcd_write+0x18>
  b4:	85 b3       	in	r24, 0x15	; 21
  b6:	8f 7e       	andi	r24, 0xEF	; 239
  b8:	85 bb       	out	0x15, r24	; 21
  ba:	85 b3       	in	r24, 0x15	; 21
  bc:	8f 7d       	andi	r24, 0xDF	; 223
  be:	85 bb       	out	0x15, r24	; 21
  c0:	84 b3       	in	r24, 0x14	; 20
  c2:	8f 60       	ori	r24, 0x0F	; 15
  c4:	84 bb       	out	0x14, r24	; 20
  c6:	c5 b3       	in	r28, 0x15	; 21
  c8:	c0 7f       	andi	r28, 0xF0	; 240
  ca:	8d 2f       	mov	r24, r29
  cc:	82 95       	swap	r24
  ce:	8f 70       	andi	r24, 0x0F	; 15
  d0:	8c 2b       	or	r24, r28
  d2:	85 bb       	out	0x15, r24	; 21
  d4:	0e 94 49 00 	call	0x92	; 0x92 <toggle_e>
  d8:	df 70       	andi	r29, 0x0F	; 15
  da:	dc 2b       	or	r29, r28
  dc:	d5 bb       	out	0x15, r29	; 21
  de:	0e 94 49 00 	call	0x92	; 0x92 <toggle_e>
  e2:	cf 60       	ori	r28, 0x0F	; 15
  e4:	c5 bb       	out	0x15, r28	; 21
  e6:	df 91       	pop	r29
  e8:	cf 91       	pop	r28
  ea:	08 95       	ret

000000ec <lcd_read>:
  ec:	88 23       	and	r24, r24
  ee:	21 f0       	breq	.+8      	; 0xf8 <lcd_read+0xc>
  f0:	85 b3       	in	r24, 0x15	; 21
  f2:	80 61       	ori	r24, 0x10	; 16
  f4:	85 bb       	out	0x15, r24	; 21
  f6:	03 c0       	rjmp	.+6      	; 0xfe <lcd_read+0x12>
  f8:	85 b3       	in	r24, 0x15	; 21
  fa:	8f 7e       	andi	r24, 0xEF	; 239
  fc:	85 bb       	out	0x15, r24	; 21
  fe:	85 b3       	in	r24, 0x15	; 21
 100:	80 62       	ori	r24, 0x20	; 32
 102:	85 bb       	out	0x15, r24	; 21
 104:	84 b3       	in	r24, 0x14	; 20
 106:	80 7f       	andi	r24, 0xF0	; 240
 108:	84 bb       	out	0x14, r24	; 20
 10a:	85 b3       	in	r24, 0x15	; 21
 10c:	80 64       	ori	r24, 0x40	; 64
 10e:	85 bb       	out	0x15, r24	; 21
 110:	00 c0       	rjmp	.+0      	; 0x112 <lcd_read+0x26>
 112:	93 b3       	in	r25, 0x13	; 19
 114:	92 95       	swap	r25
 116:	90 7f       	andi	r25, 0xF0	; 240
 118:	85 b3       	in	r24, 0x15	; 21
 11a:	8f 7b       	andi	r24, 0xBF	; 191
 11c:	85 bb       	out	0x15, r24	; 21
 11e:	00 c0       	rjmp	.+0      	; 0x120 <lcd_read+0x34>
 120:	85 b3       	in	r24, 0x15	; 21
 122:	80 64       	ori	r24, 0x40	; 64
 124:	85 bb       	out	0x15, r24	; 21
 126:	00 c0       	rjmp	.+0      	; 0x128 <lcd_read+0x3c>
 128:	83 b3       	in	r24, 0x13	; 19
 12a:	8f 70       	andi	r24, 0x0F	; 15
 12c:	25 b3       	in	r18, 0x15	; 21
 12e:	2f 7b       	andi	r18, 0xBF	; 191
 130:	25 bb       	out	0x15, r18	; 21
 132:	89 2b       	or	r24, r25
 134:	08 95       	ret

00000136 <lcd_waitbusy>:
 136:	80 e0       	ldi	r24, 0x00	; 0
 138:	0e 94 76 00 	call	0xec	; 0xec <lcd_read>
 13c:	88 23       	and	r24, r24
 13e:	dc f3       	brlt	.-10     	; 0x136 <lcd_waitbusy>
 140:	84 e0       	ldi	r24, 0x04	; 4
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	01 97       	sbiw	r24, 0x01	; 1
 146:	f1 f7       	brne	.-4      	; 0x144 <lcd_waitbusy+0xe>
 148:	80 e0       	ldi	r24, 0x00	; 0
 14a:	0e 94 76 00 	call	0xec	; 0xec <lcd_read>
 14e:	08 95       	ret

00000150 <lcd_command>:
 150:	cf 93       	push	r28
 152:	c8 2f       	mov	r28, r24
 154:	0e 94 9b 00 	call	0x136	; 0x136 <lcd_waitbusy>
 158:	60 e0       	ldi	r22, 0x00	; 0
 15a:	8c 2f       	mov	r24, r28
 15c:	0e 94 51 00 	call	0xa2	; 0xa2 <lcd_write>
 160:	cf 91       	pop	r28
 162:	08 95       	ret

00000164 <lcd_gotoxy>:
 164:	61 11       	cpse	r22, r1
 166:	04 c0       	rjmp	.+8      	; 0x170 <lcd_gotoxy+0xc>
 168:	80 58       	subi	r24, 0x80	; 128
 16a:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_command>
 16e:	08 95       	ret
 170:	80 54       	subi	r24, 0x40	; 64
 172:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_command>
 176:	08 95       	ret

00000178 <lcd_clrscr>:
 178:	81 e0       	ldi	r24, 0x01	; 1
 17a:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_command>
 17e:	08 95       	ret

00000180 <lcd_putc>:
 180:	cf 93       	push	r28
 182:	c8 2f       	mov	r28, r24
 184:	0e 94 9b 00 	call	0x136	; 0x136 <lcd_waitbusy>
 188:	ca 30       	cpi	r28, 0x0A	; 10
 18a:	49 f4       	brne	.+18     	; 0x19e <lcd_putc+0x1e>
 18c:	80 34       	cpi	r24, 0x40	; 64
 18e:	10 f4       	brcc	.+4      	; 0x194 <lcd_putc+0x14>
 190:	80 e4       	ldi	r24, 0x40	; 64
 192:	01 c0       	rjmp	.+2      	; 0x196 <lcd_putc+0x16>
 194:	80 e0       	ldi	r24, 0x00	; 0
 196:	80 58       	subi	r24, 0x80	; 128
 198:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_command>
 19c:	04 c0       	rjmp	.+8      	; 0x1a6 <lcd_putc+0x26>
 19e:	61 e0       	ldi	r22, 0x01	; 1
 1a0:	8c 2f       	mov	r24, r28
 1a2:	0e 94 51 00 	call	0xa2	; 0xa2 <lcd_write>
 1a6:	cf 91       	pop	r28
 1a8:	08 95       	ret

000001aa <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 1aa:	1f 93       	push	r17
 1ac:	cf 93       	push	r28
 1ae:	df 93       	push	r29
 1b0:	18 2f       	mov	r17, r24
      && ( &LCD_RS_PORT == &LCD_DATA0_PORT) && ( &LCD_RW_PORT == &LCD_DATA0_PORT) && (&LCD_E_PORT == &LCD_DATA0_PORT)
      && (LCD_DATA0_PIN == 0 ) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) 
      && (LCD_RS_PIN == 4 ) && (LCD_RW_PIN == 5) && (LCD_E_PIN == 6 ) )
    {
        /* configure all port bits as output (all LCD lines on same port) */
        DDR(LCD_DATA0_PORT) |= 0x7F;
 1b2:	84 b3       	in	r24, 0x14	; 20
 1b4:	8f 67       	ori	r24, 0x7F	; 127
 1b6:	84 bb       	out	0x14, r24	; 20
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 1b8:	80 e0       	ldi	r24, 0x00	; 0
 1ba:	9d e7       	ldi	r25, 0x7D	; 125
 1bc:	01 97       	sbiw	r24, 0x01	; 1
 1be:	f1 f7       	brne	.-4      	; 0x1bc <lcd_init+0x12>
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
    }
    delay(16000);        /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);  // _BV(LCD_FUNCTION)>>4;
 1c0:	85 b3       	in	r24, 0x15	; 21
 1c2:	82 60       	ori	r24, 0x02	; 2
 1c4:	85 bb       	out	0x15, r24	; 21
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
 1c6:	85 b3       	in	r24, 0x15	; 21
 1c8:	81 60       	ori	r24, 0x01	; 1
 1ca:	85 bb       	out	0x15, r24	; 21
    lcd_e_toggle();
 1cc:	0e 94 49 00 	call	0x92	; 0x92 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 1d0:	80 e0       	ldi	r24, 0x00	; 0
 1d2:	97 e2       	ldi	r25, 0x27	; 39
 1d4:	01 97       	sbiw	r24, 0x01	; 1
 1d6:	f1 f7       	brne	.-4      	; 0x1d4 <lcd_init+0x2a>
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
    lcd_e_toggle();
    delay(4992);         /* delay, busy flag can't be checked here */
   
    /* repeat last command */ 
    lcd_e_toggle();      
 1d8:	0e 94 49 00 	call	0x92	; 0x92 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 1dc:	c0 e8       	ldi	r28, 0x80	; 128
 1de:	d0 e0       	ldi	r29, 0x00	; 0
 1e0:	ce 01       	movw	r24, r28
 1e2:	01 97       	sbiw	r24, 0x01	; 1
 1e4:	f1 f7       	brne	.-4      	; 0x1e2 <lcd_init+0x38>
    /* repeat last command */ 
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */
    
    /* repeat last command a third time */
    lcd_e_toggle();      
 1e6:	0e 94 49 00 	call	0x92	; 0x92 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 1ea:	ce 01       	movw	r24, r28
 1ec:	01 97       	sbiw	r24, 0x01	; 1
 1ee:	f1 f7       	brne	.-4      	; 0x1ec <lcd_init+0x42>
    /* repeat last command a third time */
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
 1f0:	85 b3       	in	r24, 0x15	; 21
 1f2:	8e 7f       	andi	r24, 0xFE	; 254
 1f4:	85 bb       	out	0x15, r24	; 21
    lcd_e_toggle();
 1f6:	0e 94 49 00 	call	0x92	; 0x92 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 1fa:	21 97       	sbiw	r28, 0x01	; 1
 1fc:	f1 f7       	brne	.-4      	; 0x1fa <lcd_init+0x50>
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
 1fe:	88 e2       	ldi	r24, 0x28	; 40
 200:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
 204:	88 e0       	ldi	r24, 0x08	; 8
 206:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_command>
    lcd_clrscr();                           /* display clear                */ 
 20a:	0e 94 bc 00 	call	0x178	; 0x178 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 20e:	86 e0       	ldi	r24, 0x06	; 6
 210:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
 214:	81 2f       	mov	r24, r17
 216:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_command>

}/* lcd_init */
 21a:	df 91       	pop	r29
 21c:	cf 91       	pop	r28
 21e:	1f 91       	pop	r17
 220:	08 95       	ret

00000222 <init>:
volatile uint8_t letter = 'A';             
volatile uint8_t letter_count = 0;     
volatile uint8_t x_cur = 0;
volatile uint8_t cnt = 0;
void init() {
	DDRA = 0x00;
 222:	1a ba       	out	0x1a, r1	; 26
	PORTA = 0xFF;
 224:	8f ef       	ldi	r24, 0xFF	; 255
 226:	8b bb       	out	0x1b, r24	; 27

	DDRC = 0xF0;
 228:	80 ef       	ldi	r24, 0xF0	; 240
 22a:	84 bb       	out	0x14, r24	; 20
	lcd_init(LCD_DISP_ON);
 22c:	8c e0       	ldi	r24, 0x0C	; 12
 22e:	0e 94 d5 00 	call	0x1aa	; 0x1aa <lcd_init>
	cnt=100;
 232:	84 e6       	ldi	r24, 0x64	; 100
 234:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
	TCNT0= 0;
 238:	12 be       	out	0x32, r1	; 50
	TIMSK= 2;
 23a:	82 e0       	ldi	r24, 0x02	; 2
 23c:	89 bf       	out	0x39, r24	; 57
	OCR0= 38;
 23e:	86 e2       	ldi	r24, 0x26	; 38
 240:	8c bf       	out	0x3c, r24	; 60
		TCCR0= 0b00001100;
 242:	8c e0       	ldi	r24, 0x0C	; 12
 244:	83 bf       	out	0x33, r24	; 51
	sei();
 246:	78 94       	sei
 248:	08 95       	ret

0000024a <main>:
}


int main() {
	init();
 24a:	0e 94 11 01 	call	0x222	; 0x222 <init>

	while (1) {
		if (!!(PINA&(1<<0))) continue;
 24e:	c8 99       	sbic	0x19, 0	; 25
 250:	fe cf       	rjmp	.-4      	; 0x24e <main+0x4>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 252:	83 ed       	ldi	r24, 0xD3	; 211
 254:	90 e3       	ldi	r25, 0x30	; 48
 256:	01 97       	sbiw	r24, 0x01	; 1
 258:	f1 f7       	brne	.-4      	; 0x256 <main+0xc>
 25a:	00 c0       	rjmp	.+0      	; 0x25c <main+0x12>
 25c:	00 00       	nop
		_delay_ms(50);
		if (letter_count == 0) {
 25e:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <letter_count>
 262:	81 11       	cpse	r24, r1
 264:	18 c0       	rjmp	.+48     	; 0x296 <main+0x4c>
			letter = 'A';
 266:	81 e4       	ldi	r24, 0x41	; 65
 268:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
			lcd_gotoxy(x_cur,0);
 26c:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <x_cur>
 270:	60 e0       	ldi	r22, 0x00	; 0
 272:	0e 94 b2 00 	call	0x164	; 0x164 <lcd_gotoxy>
			lcd_putc(letter);
 276:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 27a:	0e 94 c0 00 	call	0x180	; 0x180 <lcd_putc>
			letter_count++;
 27e:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <letter_count>
 282:	8f 5f       	subi	r24, 0xFF	; 255
 284:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <letter_count>
			cnt=100;
 288:	84 e6       	ldi	r24, 0x64	; 100
 28a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
			morethanasecond = 0;
 28e:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <morethanasecond>


			TCNT0=0;
 292:	12 be       	out	0x32, r1	; 50
 294:	49 c0       	rjmp	.+146    	; 0x328 <main+0xde>

		} else {
		if (morethanasecond) {
 296:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <morethanasecond>
 29a:	88 23       	and	r24, r24
 29c:	51 f1       	breq	.+84     	; 0x2f2 <main+0xa8>
			if (letter_count == 16) {
 29e:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <letter_count>
 2a2:	80 31       	cpi	r24, 0x10	; 16
 2a4:	49 f4       	brne	.+18     	; 0x2b8 <main+0x6e>
				lcd_clrscr();
 2a6:	0e 94 bc 00 	call	0x178	; 0x178 <lcd_clrscr>
				letter_count=0;
 2aa:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <letter_count>
				x_cur = 0;
 2ae:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <x_cur>
				letter = 0;
 2b2:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
 2b6:	16 c0       	rjmp	.+44     	; 0x2e4 <main+0x9a>
			} else {
				letter='A';
 2b8:	81 e4       	ldi	r24, 0x41	; 65
 2ba:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
				x_cur++;
 2be:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <x_cur>
 2c2:	8f 5f       	subi	r24, 0xFF	; 255
 2c4:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <x_cur>
				lcd_gotoxy(x_cur,0);
 2c8:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <x_cur>
 2cc:	60 e0       	ldi	r22, 0x00	; 0
 2ce:	0e 94 b2 00 	call	0x164	; 0x164 <lcd_gotoxy>
				lcd_putc(letter);
 2d2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 2d6:	0e 94 c0 00 	call	0x180	; 0x180 <lcd_putc>
				letter_count++;
 2da:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <letter_count>
 2de:	8f 5f       	subi	r24, 0xFF	; 255
 2e0:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <letter_count>
			}
			cnt=100;
 2e4:	84 e6       	ldi	r24, 0x64	; 100
 2e6:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
			morethanasecond = 0;
 2ea:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <morethanasecond>


			TCNT0=0;
 2ee:	12 be       	out	0x32, r1	; 50
 2f0:	1b c0       	rjmp	.+54     	; 0x328 <main+0xde>

		} else {
			letter++;
 2f2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 2f6:	8f 5f       	subi	r24, 0xFF	; 255
 2f8:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
			if (letter>'Z') letter = 'A';
 2fc:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 300:	8b 35       	cpi	r24, 0x5B	; 91
 302:	18 f0       	brcs	.+6      	; 0x30a <main+0xc0>
 304:	81 e4       	ldi	r24, 0x41	; 65
 306:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
			lcd_gotoxy(x_cur,0);
 30a:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <x_cur>
 30e:	60 e0       	ldi	r22, 0x00	; 0
 310:	0e 94 b2 00 	call	0x164	; 0x164 <lcd_gotoxy>
			lcd_putc(letter);
 314:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 318:	0e 94 c0 00 	call	0x180	; 0x180 <lcd_putc>
					cnt=100;
 31c:	84 e6       	ldi	r24, 0x64	; 100
 31e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
					morethanasecond = 0;
 322:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <morethanasecond>


		TCNT0=0;
 326:	12 be       	out	0x32, r1	; 50

		}
			}
		while (!(PINA&(1<<0)));
 328:	c8 9b       	sbis	0x19, 0	; 25
 32a:	fe cf       	rjmp	.-4      	; 0x328 <main+0xde>
 32c:	83 ed       	ldi	r24, 0xD3	; 211
 32e:	90 e3       	ldi	r25, 0x30	; 48
 330:	01 97       	sbiw	r24, 0x01	; 1
 332:	f1 f7       	brne	.-4      	; 0x330 <main+0xe6>
 334:	00 c0       	rjmp	.+0      	; 0x336 <main+0xec>
 336:	00 00       	nop
 338:	8a cf       	rjmp	.-236    	; 0x24e <main+0x4>

0000033a <__vector_19>:
		_delay_ms(50);
	}
	return 0;
}

ISR(TIMER0_COMP_vect) {
 33a:	1f 92       	push	r1
 33c:	0f 92       	push	r0
 33e:	0f b6       	in	r0, 0x3f	; 63
 340:	0f 92       	push	r0
 342:	11 24       	eor	r1, r1
 344:	8f 93       	push	r24
	cnt--;
 346:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 34a:	81 50       	subi	r24, 0x01	; 1
 34c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
	if (cnt==0) {
 350:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 354:	81 11       	cpse	r24, r1
 356:	06 c0       	rjmp	.+12     	; 0x364 <__vector_19+0x2a>
		morethanasecond=1;
 358:	81 e0       	ldi	r24, 0x01	; 1
 35a:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <morethanasecond>
		cnt=100;
 35e:	84 e6       	ldi	r24, 0x64	; 100
 360:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
	}
 364:	8f 91       	pop	r24
 366:	0f 90       	pop	r0
 368:	0f be       	out	0x3f, r0	; 63
 36a:	0f 90       	pop	r0
 36c:	1f 90       	pop	r1
 36e:	18 95       	reti

00000370 <_exit>:
 370:	f8 94       	cli

00000372 <__stop_program>:
 372:	ff cf       	rjmp	.-2      	; 0x372 <__stop_program>
