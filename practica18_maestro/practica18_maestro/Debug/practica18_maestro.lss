
practica18_maestro.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000cc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000120  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000120  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000150  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  0000018c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000650  00000000  00000000  000001c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005d2  00000000  00000000  00000814  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000282  00000000  00000000  00000de6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  00001068  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000328  00000000  00000000  000010bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000001f  00000000  00000000  000013e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001403  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 4a 00 	call	0x94	; 0x94 <main>
  64:	0c 94 64 00 	jmp	0xc8	; 0xc8 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <SPI_Init>:
char SPI_Read()				/* SPI read data function */
{
	SPDR = 0xFF;
	while(!(SPSR & (1<<SPIF)));	/* Wait till reception complete */
	return(SPDR);			/* Return received data */
}
  6c:	87 b3       	in	r24, 0x17	; 23
  6e:	80 6a       	ori	r24, 0xA0	; 160
  70:	87 bb       	out	0x17, r24	; 23
  72:	87 b3       	in	r24, 0x17	; 23
  74:	8f 7b       	andi	r24, 0xBF	; 191
  76:	87 bb       	out	0x17, r24	; 23
  78:	88 b3       	in	r24, 0x18	; 24
  7a:	80 61       	ori	r24, 0x10	; 16
  7c:	88 bb       	out	0x18, r24	; 24
  7e:	81 e5       	ldi	r24, 0x51	; 81
  80:	8d b9       	out	0x0d, r24	; 13
  82:	8e b1       	in	r24, 0x0e	; 14
  84:	8e 7f       	andi	r24, 0xFE	; 254
  86:	8e b9       	out	0x0e, r24	; 14
  88:	08 95       	ret

0000008a <SPI_Write>:
  8a:	8f b9       	out	0x0f, r24	; 15
  8c:	77 9b       	sbis	0x0e, 7	; 14
  8e:	fe cf       	rjmp	.-4      	; 0x8c <SPI_Write+0x2>
  90:	8f b1       	in	r24, 0x0f	; 15
  92:	08 95       	ret

00000094 <main>:
int main(void)
{
	SPI_Init();
  94:	0e 94 36 00 	call	0x6c	; 0x6c <SPI_Init>
	SS_Enable;
  98:	88 b3       	in	r24, 0x18	; 24
  9a:	8f 7e       	andi	r24, 0xEF	; 239
  9c:	88 bb       	out	0x18, r24	; 24
	DDRC = 0x00;
  9e:	14 ba       	out	0x14, r1	; 20
	PORTC = 0xFF;
  a0:	8f ef       	ldi	r24, 0xFF	; 255
  a2:	85 bb       	out	0x15, r24	; 21
	DDRA = 0xFF;
  a4:	8a bb       	out	0x1a, r24	; 26
	PORTA = 0;
  a6:	1b ba       	out	0x1b, r1	; 27
    /* Replace with your application code */
    while (1) 
    {
		if (!(PINC&1) > 0) {
  a8:	98 99       	sbic	0x13, 0	; 19
  aa:	fe cf       	rjmp	.-4      	; 0xa8 <main+0x14>
			PORTA = 0x7F;
  ac:	8f e7       	ldi	r24, 0x7F	; 127
  ae:	8b bb       	out	0x1b, r24	; 27
			SPI_Write(0xF0);
  b0:	80 ef       	ldi	r24, 0xF0	; 240
  b2:	0e 94 45 00 	call	0x8a	; 0x8a <SPI_Write>
			
			PORTA = 0x8F;
  b6:	8f e8       	ldi	r24, 0x8F	; 143
  b8:	8b bb       	out	0x1b, r24	; 27
			SPI_Write(0xFE);
  ba:	8e ef       	ldi	r24, 0xFE	; 254
  bc:	0e 94 45 00 	call	0x8a	; 0x8a <SPI_Write>
			PORTA=0;
  c0:	1b ba       	out	0x1b, r1	; 27
			while (!(PINC&(1<<0)));
  c2:	98 9b       	sbis	0x13, 0	; 19
  c4:	fe cf       	rjmp	.-4      	; 0xc2 <main+0x2e>
  c6:	f0 cf       	rjmp	.-32     	; 0xa8 <main+0x14>

000000c8 <_exit>:
  c8:	f8 94       	cli

000000ca <__stop_program>:
  ca:	ff cf       	rjmp	.-2      	; 0xca <__stop_program>
