
practica16.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000278  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000002ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  000002ec  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002ec  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000031c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00000358  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006f5  00000000  00000000  00000398  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000605  00000000  00000000  00000a8d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002ee  00000000  00000000  00001092  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000ac  00000000  00000000  00001380  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000342  00000000  00000000  0000142c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000010f  00000000  00000000  0000176e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  0000187d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 97 00 	jmp	0x12e	; 0x12e <__vector_14>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 74 00 	call	0xe8	; 0xe8 <main>
  74:	0c 94 3a 01 	jmp	0x274	; 0x274 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <serial_init>:
uint8_t sensor = 0;
uint8_t wait = 0;


void serial_init(long USART_BAUDRATE){
	UCSRB |= (1 << RXEN) | (1 << TXEN);
  7c:	2a b1       	in	r18, 0x0a	; 10
  7e:	28 61       	ori	r18, 0x18	; 24
  80:	2a b9       	out	0x0a, r18	; 10
	UCSRC |= (1 << URSEL) | (1 << UCSZ0) | (1 << UCSZ1);
  82:	20 b5       	in	r18, 0x20	; 32
  84:	26 68       	ori	r18, 0x86	; 134
  86:	20 bd       	out	0x20, r18	; 32
	UBRRL = BAUD_PRESCALE;
  88:	dc 01       	movw	r26, r24
  8a:	cb 01       	movw	r24, r22
  8c:	88 0f       	add	r24, r24
  8e:	99 1f       	adc	r25, r25
  90:	aa 1f       	adc	r26, r26
  92:	bb 1f       	adc	r27, r27
  94:	88 0f       	add	r24, r24
  96:	99 1f       	adc	r25, r25
  98:	aa 1f       	adc	r26, r26
  9a:	bb 1f       	adc	r27, r27
  9c:	9c 01       	movw	r18, r24
  9e:	ad 01       	movw	r20, r26
  a0:	22 0f       	add	r18, r18
  a2:	33 1f       	adc	r19, r19
  a4:	44 1f       	adc	r20, r20
  a6:	55 1f       	adc	r21, r21
  a8:	22 0f       	add	r18, r18
  aa:	33 1f       	adc	r19, r19
  ac:	44 1f       	adc	r20, r20
  ae:	55 1f       	adc	r21, r21
  b0:	60 e0       	ldi	r22, 0x00	; 0
  b2:	79 e0       	ldi	r23, 0x09	; 9
  b4:	8d e3       	ldi	r24, 0x3D	; 61
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	0e 94 18 01 	call	0x230	; 0x230 <__udivmodsi4>
  bc:	8f ef       	ldi	r24, 0xFF	; 255
  be:	82 0f       	add	r24, r18
  c0:	89 b9       	out	0x09, r24	; 9
	UBRRH = (BAUD_PRESCALE >> 8);
  c2:	da 01       	movw	r26, r20
  c4:	c9 01       	movw	r24, r18
  c6:	01 97       	sbiw	r24, 0x01	; 1
  c8:	a1 09       	sbc	r26, r1
  ca:	b1 09       	sbc	r27, r1
  cc:	89 2f       	mov	r24, r25
  ce:	9a 2f       	mov	r25, r26
  d0:	ab 2f       	mov	r26, r27
  d2:	bb 27       	eor	r27, r27
  d4:	80 bd       	out	0x20, r24	; 32
  d6:	08 95       	ret

000000d8 <serial_rxbyte>:
}

uint8_t serial_rxbyte(){
	while ((UCSRA & (1 << RXC)) == 0);
  d8:	5f 9b       	sbis	0x0b, 7	; 11
  da:	fe cf       	rjmp	.-4      	; 0xd8 <serial_rxbyte>
	return(UDR);
  dc:	8c b1       	in	r24, 0x0c	; 12
}
  de:	08 95       	ret

000000e0 <serial_txbyte>:

void serial_txbyte(uint8_t ch){
	while (! (UCSRA & (1<<UDRE)));	/* Wait for empty transmit buffer*/
  e0:	5d 9b       	sbis	0x0b, 5	; 11
  e2:	fe cf       	rjmp	.-4      	; 0xe0 <serial_txbyte>
	UDR = ch ;
  e4:	8c b9       	out	0x0c, r24	; 12
  e6:	08 95       	ret

000000e8 <main>:
}

int main(void){
	sei();
  e8:	78 94       	sei
	DDRD = 0x00000010;
  ea:	80 e1       	ldi	r24, 0x10	; 16
  ec:	81 bb       	out	0x11, r24	; 17
	PORTD = 0;
  ee:	12 ba       	out	0x12, r1	; 18
	DDRA = 0;
  f0:	1a ba       	out	0x1a, r1	; 26
	PORTA = 0;
  f2:	1b ba       	out	0x1b, r1	; 27
	DDRB = 0xff;
  f4:	8f ef       	ldi	r24, 0xFF	; 255
  f6:	87 bb       	out	0x17, r24	; 23
	DDRC = 0xff;
  f8:	84 bb       	out	0x14, r24	; 20
	PORTB=PORTC=0;
  fa:	15 ba       	out	0x15, r1	; 21
  fc:	18 ba       	out	0x18, r1	; 24
	serial_init(9600);
  fe:	60 e8       	ldi	r22, 0x80	; 128
 100:	75 e2       	ldi	r23, 0x25	; 37
 102:	80 e0       	ldi	r24, 0x00	; 0
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	0e 94 3e 00 	call	0x7c	; 0x7c <serial_init>
	
	ADMUX = 0b01000000;
 10a:	80 e4       	ldi	r24, 0x40	; 64
 10c:	87 b9       	out	0x07, r24	; 7
	SFIOR = 0;
 10e:	10 be       	out	0x30, r1	; 48
	ADCSRA = 0b10011011;
 110:	8b e9       	ldi	r24, 0x9B	; 155
 112:	86 b9       	out	0x06, r24	; 6
	
	while(1){
		sensor = serial_rxbyte();
 114:	0e 94 6c 00 	call	0xd8	; 0xd8 <serial_rxbyte>
 118:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		ADMUX = (ADMUX&(0xF0)) | (sensor-'0');
 11c:	97 b1       	in	r25, 0x07	; 7
 11e:	90 7f       	andi	r25, 0xF0	; 240
 120:	80 53       	subi	r24, 0x30	; 48
 122:	89 2b       	or	r24, r25
 124:	87 b9       	out	0x07, r24	; 7
		ADCSRA |= (1 << ADSC);
 126:	86 b1       	in	r24, 0x06	; 6
 128:	80 64       	ori	r24, 0x40	; 64
 12a:	86 b9       	out	0x06, r24	; 6
 12c:	f3 cf       	rjmp	.-26     	; 0x114 <main+0x2c>

0000012e <__vector_14>:
	}
}

ISR(ADC_vect) {
 12e:	1f 92       	push	r1
 130:	0f 92       	push	r0
 132:	0f b6       	in	r0, 0x3f	; 63
 134:	0f 92       	push	r0
 136:	11 24       	eor	r1, r1
 138:	2f 93       	push	r18
 13a:	3f 93       	push	r19
 13c:	4f 93       	push	r20
 13e:	5f 93       	push	r21
 140:	6f 93       	push	r22
 142:	7f 93       	push	r23
 144:	8f 93       	push	r24
 146:	9f 93       	push	r25
 148:	af 93       	push	r26
 14a:	bf 93       	push	r27
 14c:	ef 93       	push	r30
 14e:	ff 93       	push	r31
	uint16_t val =  ADC;
 150:	84 b1       	in	r24, 0x04	; 4
 152:	95 b1       	in	r25, 0x05	; 5
	val >>= 2;
 154:	96 95       	lsr	r25
 156:	87 95       	ror	r24
 158:	96 95       	lsr	r25
 15a:	87 95       	ror	r24
	if (sensor == '0') {
 15c:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 160:	20 33       	cpi	r18, 0x30	; 48
 162:	d9 f4       	brne	.+54     	; 0x19a <__vector_14+0x6c>
		int g = (val+1)/64;
 164:	bc 01       	movw	r22, r24
 166:	6f 5f       	subi	r22, 0xFF	; 255
 168:	7f 4f       	sbci	r23, 0xFF	; 255
 16a:	00 24       	eor	r0, r0
 16c:	66 0f       	add	r22, r22
 16e:	77 1f       	adc	r23, r23
 170:	00 1c       	adc	r0, r0
 172:	66 0f       	add	r22, r22
 174:	77 1f       	adc	r23, r23
 176:	00 1c       	adc	r0, r0
 178:	67 2f       	mov	r22, r23
 17a:	70 2d       	mov	r23, r0
		PORTB &= 0XF0;
 17c:	28 b3       	in	r18, 0x18	; 24
 17e:	20 7f       	andi	r18, 0xF0	; 240
 180:	28 bb       	out	0x18, r18	; 24
		PORTB |= ((1<<(g))-1);
 182:	48 b3       	in	r20, 0x18	; 24
 184:	21 e0       	ldi	r18, 0x01	; 1
 186:	30 e0       	ldi	r19, 0x00	; 0
 188:	02 c0       	rjmp	.+4      	; 0x18e <__vector_14+0x60>
 18a:	22 0f       	add	r18, r18
 18c:	33 1f       	adc	r19, r19
 18e:	6a 95       	dec	r22
 190:	e2 f7       	brpl	.-8      	; 0x18a <__vector_14+0x5c>
 192:	21 50       	subi	r18, 0x01	; 1
 194:	24 2b       	or	r18, r20
 196:	28 bb       	out	0x18, r18	; 24
 198:	38 c0       	rjmp	.+112    	; 0x20a <__EEPROM_REGION_LENGTH__+0xa>
	}else if (sensor == '1') {
 19a:	21 33       	cpi	r18, 0x31	; 49
 19c:	f1 f4       	brne	.+60     	; 0x1da <__vector_14+0xac>
		int g = (val+1)/64;
 19e:	bc 01       	movw	r22, r24
 1a0:	6f 5f       	subi	r22, 0xFF	; 255
 1a2:	7f 4f       	sbci	r23, 0xFF	; 255
 1a4:	00 24       	eor	r0, r0
 1a6:	66 0f       	add	r22, r22
 1a8:	77 1f       	adc	r23, r23
 1aa:	00 1c       	adc	r0, r0
 1ac:	66 0f       	add	r22, r22
 1ae:	77 1f       	adc	r23, r23
 1b0:	00 1c       	adc	r0, r0
 1b2:	67 2f       	mov	r22, r23
 1b4:	70 2d       	mov	r23, r0
		PORTB &= 0X0F;
 1b6:	28 b3       	in	r18, 0x18	; 24
 1b8:	2f 70       	andi	r18, 0x0F	; 15
 1ba:	28 bb       	out	0x18, r18	; 24
		PORTB |= ((1<<(g))-1)*16;
 1bc:	48 b3       	in	r20, 0x18	; 24
 1be:	21 e0       	ldi	r18, 0x01	; 1
 1c0:	30 e0       	ldi	r19, 0x00	; 0
 1c2:	02 c0       	rjmp	.+4      	; 0x1c8 <__vector_14+0x9a>
 1c4:	22 0f       	add	r18, r18
 1c6:	33 1f       	adc	r19, r19
 1c8:	6a 95       	dec	r22
 1ca:	e2 f7       	brpl	.-8      	; 0x1c4 <__vector_14+0x96>
 1cc:	21 50       	subi	r18, 0x01	; 1
 1ce:	31 09       	sbc	r19, r1
 1d0:	22 95       	swap	r18
 1d2:	20 7f       	andi	r18, 0xF0	; 240
 1d4:	24 2b       	or	r18, r20
 1d6:	28 bb       	out	0x18, r18	; 24
 1d8:	18 c0       	rjmp	.+48     	; 0x20a <__EEPROM_REGION_LENGTH__+0xa>
	} else {
		int g = (val+1)/64;
 1da:	bc 01       	movw	r22, r24
 1dc:	6f 5f       	subi	r22, 0xFF	; 255
 1de:	7f 4f       	sbci	r23, 0xFF	; 255
 1e0:	00 24       	eor	r0, r0
 1e2:	66 0f       	add	r22, r22
 1e4:	77 1f       	adc	r23, r23
 1e6:	00 1c       	adc	r0, r0
 1e8:	66 0f       	add	r22, r22
 1ea:	77 1f       	adc	r23, r23
 1ec:	00 1c       	adc	r0, r0
 1ee:	67 2f       	mov	r22, r23
 1f0:	70 2d       	mov	r23, r0
		PORTC=0;
 1f2:	15 ba       	out	0x15, r1	; 21
		PORTC |= ((1<<(g))-1);
 1f4:	45 b3       	in	r20, 0x15	; 21
 1f6:	21 e0       	ldi	r18, 0x01	; 1
 1f8:	30 e0       	ldi	r19, 0x00	; 0
 1fa:	02 c0       	rjmp	.+4      	; 0x200 <__EEPROM_REGION_LENGTH__>
 1fc:	22 0f       	add	r18, r18
 1fe:	33 1f       	adc	r19, r19
 200:	6a 95       	dec	r22
 202:	e2 f7       	brpl	.-8      	; 0x1fc <__vector_14+0xce>
 204:	21 50       	subi	r18, 0x01	; 1
 206:	24 2b       	or	r18, r20
 208:	25 bb       	out	0x15, r18	; 21
	}
	serial_txbyte(val);
 20a:	0e 94 70 00 	call	0xe0	; 0xe0 <serial_txbyte>
 20e:	ff 91       	pop	r31
 210:	ef 91       	pop	r30
 212:	bf 91       	pop	r27
 214:	af 91       	pop	r26
 216:	9f 91       	pop	r25
 218:	8f 91       	pop	r24
 21a:	7f 91       	pop	r23
 21c:	6f 91       	pop	r22
 21e:	5f 91       	pop	r21
 220:	4f 91       	pop	r20
 222:	3f 91       	pop	r19
 224:	2f 91       	pop	r18
 226:	0f 90       	pop	r0
 228:	0f be       	out	0x3f, r0	; 63
 22a:	0f 90       	pop	r0
 22c:	1f 90       	pop	r1
 22e:	18 95       	reti

00000230 <__udivmodsi4>:
 230:	a1 e2       	ldi	r26, 0x21	; 33
 232:	1a 2e       	mov	r1, r26
 234:	aa 1b       	sub	r26, r26
 236:	bb 1b       	sub	r27, r27
 238:	fd 01       	movw	r30, r26
 23a:	0d c0       	rjmp	.+26     	; 0x256 <__udivmodsi4_ep>

0000023c <__udivmodsi4_loop>:
 23c:	aa 1f       	adc	r26, r26
 23e:	bb 1f       	adc	r27, r27
 240:	ee 1f       	adc	r30, r30
 242:	ff 1f       	adc	r31, r31
 244:	a2 17       	cp	r26, r18
 246:	b3 07       	cpc	r27, r19
 248:	e4 07       	cpc	r30, r20
 24a:	f5 07       	cpc	r31, r21
 24c:	20 f0       	brcs	.+8      	; 0x256 <__udivmodsi4_ep>
 24e:	a2 1b       	sub	r26, r18
 250:	b3 0b       	sbc	r27, r19
 252:	e4 0b       	sbc	r30, r20
 254:	f5 0b       	sbc	r31, r21

00000256 <__udivmodsi4_ep>:
 256:	66 1f       	adc	r22, r22
 258:	77 1f       	adc	r23, r23
 25a:	88 1f       	adc	r24, r24
 25c:	99 1f       	adc	r25, r25
 25e:	1a 94       	dec	r1
 260:	69 f7       	brne	.-38     	; 0x23c <__udivmodsi4_loop>
 262:	60 95       	com	r22
 264:	70 95       	com	r23
 266:	80 95       	com	r24
 268:	90 95       	com	r25
 26a:	9b 01       	movw	r18, r22
 26c:	ac 01       	movw	r20, r24
 26e:	bd 01       	movw	r22, r26
 270:	cf 01       	movw	r24, r30
 272:	08 95       	ret

00000274 <_exit>:
 274:	f8 94       	cli

00000276 <__stop_program>:
 276:	ff cf       	rjmp	.-2      	; 0x276 <__stop_program>
