
practica10.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000162  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001b6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001b6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001e8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000224  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000777  00000000  00000000  0000024c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000632  00000000  00000000  000009c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000034d  00000000  00000000  00000ff5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001344  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000036d  00000000  00000000  00001378  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000013f  00000000  00000000  000016e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001824  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 43 00 	call	0x86	; 0x86 <main>
  64:	0c 94 af 00 	jmp	0x15e	; 0x15e <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <ADC_Read>:
#include <util/delay.h>
#include "lcd.h" // Debes tener una librería para controlar el LCD
int ADC_Read(char channel)
{

    ADMUX =(ADMUX & 0xF8) | (channel & 7);
  6c:	97 b1       	in	r25, 0x07	; 7
  6e:	98 7f       	andi	r25, 0xF8	; 248
  70:	87 70       	andi	r24, 0x07	; 7
  72:	89 2b       	or	r24, r25
  74:	87 b9       	out	0x07, r24	; 7
    
    // se inicia la conversión.
    ADCSRA |= (1 << ADSC);
  76:	86 b1       	in	r24, 0x06	; 6
  78:	80 64       	ori	r24, 0x40	; 64
  7a:	86 b9       	out	0x06, r24	; 6
    
    // espera a que termina la conversión.
    while(ADCSRA & (1 << ADSC));
  7c:	36 99       	sbic	0x06, 6	; 6
  7e:	fe cf       	rjmp	.-4      	; 0x7c <ADC_Read+0x10>
    return ADC;
  80:	84 b1       	in	r24, 0x04	; 4
  82:	95 b1       	in	r25, 0x05	; 5
}
  84:	08 95       	ret

00000086 <main>:
int main(void)
{
	char String[5];
		DDRA=0x0;			/* Make ADC port as input */
  86:	1a ba       	out	0x1a, r1	; 26
		ADCSRA = (1 << ADEN) | (1 << ADPS0) | (1 << ADPS2);
  88:	85 e8       	ldi	r24, 0x85	; 133
  8a:	86 b9       	out	0x06, r24	; 6
		ADMUX = 0x47;			/* Vref: Avcc, ADC channel: 0 */
  8c:	87 e4       	ldi	r24, 0x47	; 71
  8e:	87 b9       	out	0x07, r24	; 7

DDRB = 0xFF;
  90:	8f ef       	ldi	r24, 0xFF	; 255
  92:	87 bb       	out	0x17, r24	; 23
DDRC  = 0xFF;
  94:	84 bb       	out	0x14, r24	; 20
	uint8_t puertoB = 0;
  96:	c0 e0       	ldi	r28, 0x00	; 0
	while (1)
	{
		
		
		// Convertir a voltaje (0.0 a 5.0 V)
		value = ADC_Read(0);
  98:	80 e0       	ldi	r24, 0x00	; 0
  9a:	0e 94 36 00 	call	0x6c	; 0x6c <ADC_Read>
		puertoB &= 0xF0;
  9e:	c0 7f       	andi	r28, 0xF0	; 240
		if (value >= 0) {
			puertoB += 0;
		}
		if (value >= 205) {
  a0:	8d 3c       	cpi	r24, 0xCD	; 205
  a2:	91 05       	cpc	r25, r1
  a4:	0c f0       	brlt	.+2      	; 0xa8 <main+0x22>
			puertoB += 1;
  a6:	cf 5f       	subi	r28, 0xFF	; 255
		}
		if (value >= 410) {
  a8:	8a 39       	cpi	r24, 0x9A	; 154
  aa:	21 e0       	ldi	r18, 0x01	; 1
  ac:	92 07       	cpc	r25, r18
  ae:	0c f0       	brlt	.+2      	; 0xb2 <main+0x2c>
			puertoB +=2;
  b0:	ce 5f       	subi	r28, 0xFE	; 254
		}
		if (value >= 615) {
  b2:	87 36       	cpi	r24, 0x67	; 103
  b4:	22 e0       	ldi	r18, 0x02	; 2
  b6:	92 07       	cpc	r25, r18
  b8:	0c f0       	brlt	.+2      	; 0xbc <main+0x36>
			puertoB += 4;
  ba:	cc 5f       	subi	r28, 0xFC	; 252
		}
		if (value >= 820) {
  bc:	84 33       	cpi	r24, 0x34	; 52
  be:	93 40       	sbci	r25, 0x03	; 3
  c0:	0c f0       	brlt	.+2      	; 0xc4 <main+0x3e>
			puertoB += 8;
  c2:	c8 5f       	subi	r28, 0xF8	; 248
		}
		PORTB = puertoB;
  c4:	c8 bb       	out	0x18, r28	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c6:	8f ef       	ldi	r24, 0xFF	; 255
  c8:	90 e7       	ldi	r25, 0x70	; 112
  ca:	22 e0       	ldi	r18, 0x02	; 2
  cc:	81 50       	subi	r24, 0x01	; 1
  ce:	90 40       	sbci	r25, 0x00	; 0
  d0:	20 40       	sbci	r18, 0x00	; 0
  d2:	e1 f7       	brne	.-8      	; 0xcc <main+0x46>
  d4:	00 c0       	rjmp	.+0      	; 0xd6 <main+0x50>
  d6:	00 00       	nop
		_delay_ms(200);
		value = ADC_Read(1);
  d8:	81 e0       	ldi	r24, 0x01	; 1
  da:	0e 94 36 00 	call	0x6c	; 0x6c <ADC_Read>
		puertoB &= 0x0F;
  de:	cf 70       	andi	r28, 0x0F	; 15
		if (value >= 205) {
  e0:	8d 3c       	cpi	r24, 0xCD	; 205
  e2:	91 05       	cpc	r25, r1
  e4:	0c f0       	brlt	.+2      	; 0xe8 <main+0x62>
			puertoB += 16;
  e6:	c0 5f       	subi	r28, 0xF0	; 240
		}
		if (value >= 410) {
  e8:	8a 39       	cpi	r24, 0x9A	; 154
  ea:	21 e0       	ldi	r18, 0x01	; 1
  ec:	92 07       	cpc	r25, r18
  ee:	0c f0       	brlt	.+2      	; 0xf2 <main+0x6c>
			puertoB +=32;
  f0:	c0 5e       	subi	r28, 0xE0	; 224
		}
		if (value >= 615) {
  f2:	87 36       	cpi	r24, 0x67	; 103
  f4:	22 e0       	ldi	r18, 0x02	; 2
  f6:	92 07       	cpc	r25, r18
  f8:	0c f0       	brlt	.+2      	; 0xfc <main+0x76>
			puertoB += 64;
  fa:	c0 5c       	subi	r28, 0xC0	; 192
		}
		if (value >= 820) {
  fc:	84 33       	cpi	r24, 0x34	; 52
  fe:	93 40       	sbci	r25, 0x03	; 3
 100:	0c f0       	brlt	.+2      	; 0x104 <main+0x7e>
			puertoB += 128;
 102:	c0 58       	subi	r28, 0x80	; 128
 104:	8f ef       	ldi	r24, 0xFF	; 255
 106:	90 e7       	ldi	r25, 0x70	; 112
 108:	22 e0       	ldi	r18, 0x02	; 2
 10a:	81 50       	subi	r24, 0x01	; 1
 10c:	90 40       	sbci	r25, 0x00	; 0
 10e:	20 40       	sbci	r18, 0x00	; 0
 110:	e1 f7       	brne	.-8      	; 0x10a <main+0x84>
 112:	00 c0       	rjmp	.+0      	; 0x114 <main+0x8e>
 114:	00 00       	nop
		}
		_delay_ms(200);
		PORTB = puertoB;
 116:	c8 bb       	out	0x18, r28	; 24
		value = ADC_Read(2);
 118:	82 e0       	ldi	r24, 0x02	; 2
 11a:	0e 94 36 00 	call	0x6c	; 0x6c <ADC_Read>
 11e:	9c 01       	movw	r18, r24
		puertoC = 0;
		if (value >= 0) {
			puertoC += 0;
		}
		if (value >= 205) {
 120:	8d 3c       	cpi	r24, 0xCD	; 205
 122:	91 05       	cpc	r25, r1
 124:	14 f4       	brge	.+4      	; 0x12a <main+0xa4>
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	01 c0       	rjmp	.+2      	; 0x12c <main+0xa6>
			puertoC += 1;
 12a:	91 e0       	ldi	r25, 0x01	; 1
		}
		if (value >= 410) {
 12c:	2a 39       	cpi	r18, 0x9A	; 154
 12e:	81 e0       	ldi	r24, 0x01	; 1
 130:	38 07       	cpc	r19, r24
 132:	0c f0       	brlt	.+2      	; 0x136 <main+0xb0>
			puertoC +=2;
 134:	9e 5f       	subi	r25, 0xFE	; 254
		}
		if (value >= 615) {
 136:	27 36       	cpi	r18, 0x67	; 103
 138:	82 e0       	ldi	r24, 0x02	; 2
 13a:	38 07       	cpc	r19, r24
 13c:	0c f0       	brlt	.+2      	; 0x140 <main+0xba>
			puertoC += 4;
 13e:	9c 5f       	subi	r25, 0xFC	; 252
		}
		if (value >= 820) {
 140:	24 33       	cpi	r18, 0x34	; 52
 142:	33 40       	sbci	r19, 0x03	; 3
 144:	0c f0       	brlt	.+2      	; 0x148 <main+0xc2>
			puertoC += 8;
 146:	98 5f       	subi	r25, 0xF8	; 248
		}
		PORTC = puertoC;
 148:	95 bb       	out	0x15, r25	; 21
 14a:	9f ef       	ldi	r25, 0xFF	; 255
 14c:	20 e7       	ldi	r18, 0x70	; 112
 14e:	82 e0       	ldi	r24, 0x02	; 2
 150:	91 50       	subi	r25, 0x01	; 1
 152:	20 40       	sbci	r18, 0x00	; 0
 154:	80 40       	sbci	r24, 0x00	; 0
 156:	e1 f7       	brne	.-8      	; 0x150 <main+0xca>
 158:	00 c0       	rjmp	.+0      	; 0x15a <main+0xd4>
 15a:	00 00       	nop
 15c:	9d cf       	rjmp	.-198    	; 0x98 <main+0x12>

0000015e <_exit>:
 15e:	f8 94       	cli

00000160 <__stop_program>:
 160:	ff cf       	rjmp	.-2      	; 0x160 <__stop_program>
