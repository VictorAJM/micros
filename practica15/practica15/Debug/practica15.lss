
practica15.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002b8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000030c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000030c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000033c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000b8  00000000  00000000  00000378  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c55  00000000  00000000  00000430  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000808  00000000  00000000  00001085  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000599  00000000  00000000  0000188d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000018c  00000000  00000000  00001e28  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000412  00000000  00000000  00001fb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000005ce  00000000  00000000  000023c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000098  00000000  00000000  00002994  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 2c 01 	call	0x258	; 0x258 <main>
  64:	0c 94 5a 01 	jmp	0x2b4	; 0x2b4 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) ) {
        lcd_putc(c);
    }

}/* lcd_puts_p */
  6c:	85 b3       	in	r24, 0x15	; 21
  6e:	80 64       	ori	r24, 0x40	; 64
  70:	85 bb       	out	0x15, r24	; 21
  72:	00 c0       	rjmp	.+0      	; 0x74 <toggle_e+0x8>
  74:	85 b3       	in	r24, 0x15	; 21
  76:	8f 7b       	andi	r24, 0xBF	; 191
  78:	85 bb       	out	0x15, r24	; 21
  7a:	08 95       	ret

0000007c <lcd_write>:
  7c:	cf 93       	push	r28
  7e:	df 93       	push	r29
  80:	d8 2f       	mov	r29, r24
  82:	66 23       	and	r22, r22
  84:	21 f0       	breq	.+8      	; 0x8e <lcd_write+0x12>
  86:	85 b3       	in	r24, 0x15	; 21
  88:	80 61       	ori	r24, 0x10	; 16
  8a:	85 bb       	out	0x15, r24	; 21
  8c:	03 c0       	rjmp	.+6      	; 0x94 <lcd_write+0x18>
  8e:	85 b3       	in	r24, 0x15	; 21
  90:	8f 7e       	andi	r24, 0xEF	; 239
  92:	85 bb       	out	0x15, r24	; 21
  94:	85 b3       	in	r24, 0x15	; 21
  96:	8f 7d       	andi	r24, 0xDF	; 223
  98:	85 bb       	out	0x15, r24	; 21
  9a:	84 b3       	in	r24, 0x14	; 20
  9c:	8f 60       	ori	r24, 0x0F	; 15
  9e:	84 bb       	out	0x14, r24	; 20
  a0:	c5 b3       	in	r28, 0x15	; 21
  a2:	c0 7f       	andi	r28, 0xF0	; 240
  a4:	8d 2f       	mov	r24, r29
  a6:	82 95       	swap	r24
  a8:	8f 70       	andi	r24, 0x0F	; 15
  aa:	8c 2b       	or	r24, r28
  ac:	85 bb       	out	0x15, r24	; 21
  ae:	0e 94 36 00 	call	0x6c	; 0x6c <toggle_e>
  b2:	df 70       	andi	r29, 0x0F	; 15
  b4:	dc 2b       	or	r29, r28
  b6:	d5 bb       	out	0x15, r29	; 21
  b8:	0e 94 36 00 	call	0x6c	; 0x6c <toggle_e>
  bc:	cf 60       	ori	r28, 0x0F	; 15
  be:	c5 bb       	out	0x15, r28	; 21
  c0:	df 91       	pop	r29
  c2:	cf 91       	pop	r28
  c4:	08 95       	ret

000000c6 <lcd_read>:
  c6:	88 23       	and	r24, r24
  c8:	21 f0       	breq	.+8      	; 0xd2 <lcd_read+0xc>
  ca:	85 b3       	in	r24, 0x15	; 21
  cc:	80 61       	ori	r24, 0x10	; 16
  ce:	85 bb       	out	0x15, r24	; 21
  d0:	03 c0       	rjmp	.+6      	; 0xd8 <lcd_read+0x12>
  d2:	85 b3       	in	r24, 0x15	; 21
  d4:	8f 7e       	andi	r24, 0xEF	; 239
  d6:	85 bb       	out	0x15, r24	; 21
  d8:	85 b3       	in	r24, 0x15	; 21
  da:	80 62       	ori	r24, 0x20	; 32
  dc:	85 bb       	out	0x15, r24	; 21
  de:	84 b3       	in	r24, 0x14	; 20
  e0:	80 7f       	andi	r24, 0xF0	; 240
  e2:	84 bb       	out	0x14, r24	; 20
  e4:	85 b3       	in	r24, 0x15	; 21
  e6:	80 64       	ori	r24, 0x40	; 64
  e8:	85 bb       	out	0x15, r24	; 21
  ea:	00 c0       	rjmp	.+0      	; 0xec <lcd_read+0x26>
  ec:	93 b3       	in	r25, 0x13	; 19
  ee:	92 95       	swap	r25
  f0:	90 7f       	andi	r25, 0xF0	; 240
  f2:	85 b3       	in	r24, 0x15	; 21
  f4:	8f 7b       	andi	r24, 0xBF	; 191
  f6:	85 bb       	out	0x15, r24	; 21
  f8:	00 c0       	rjmp	.+0      	; 0xfa <lcd_read+0x34>
  fa:	85 b3       	in	r24, 0x15	; 21
  fc:	80 64       	ori	r24, 0x40	; 64
  fe:	85 bb       	out	0x15, r24	; 21
 100:	00 c0       	rjmp	.+0      	; 0x102 <lcd_read+0x3c>
 102:	83 b3       	in	r24, 0x13	; 19
 104:	8f 70       	andi	r24, 0x0F	; 15
 106:	25 b3       	in	r18, 0x15	; 21
 108:	2f 7b       	andi	r18, 0xBF	; 191
 10a:	25 bb       	out	0x15, r18	; 21
 10c:	89 2b       	or	r24, r25
 10e:	08 95       	ret

00000110 <lcd_waitbusy>:
 110:	80 e0       	ldi	r24, 0x00	; 0
 112:	0e 94 63 00 	call	0xc6	; 0xc6 <lcd_read>
 116:	88 23       	and	r24, r24
 118:	dc f3       	brlt	.-10     	; 0x110 <lcd_waitbusy>
 11a:	84 e0       	ldi	r24, 0x04	; 4
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	01 97       	sbiw	r24, 0x01	; 1
 120:	f1 f7       	brne	.-4      	; 0x11e <lcd_waitbusy+0xe>
 122:	80 e0       	ldi	r24, 0x00	; 0
 124:	0e 94 63 00 	call	0xc6	; 0xc6 <lcd_read>
 128:	08 95       	ret

0000012a <lcd_command>:
 12a:	cf 93       	push	r28
 12c:	c8 2f       	mov	r28, r24
 12e:	0e 94 88 00 	call	0x110	; 0x110 <lcd_waitbusy>
 132:	60 e0       	ldi	r22, 0x00	; 0
 134:	8c 2f       	mov	r24, r28
 136:	0e 94 3e 00 	call	0x7c	; 0x7c <lcd_write>
 13a:	cf 91       	pop	r28
 13c:	08 95       	ret

0000013e <lcd_clrscr>:
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	0e 94 95 00 	call	0x12a	; 0x12a <lcd_command>
 144:	08 95       	ret

00000146 <lcd_putc>:
 146:	cf 93       	push	r28
 148:	c8 2f       	mov	r28, r24
 14a:	0e 94 88 00 	call	0x110	; 0x110 <lcd_waitbusy>
 14e:	ca 30       	cpi	r28, 0x0A	; 10
 150:	49 f4       	brne	.+18     	; 0x164 <lcd_putc+0x1e>
 152:	80 34       	cpi	r24, 0x40	; 64
 154:	10 f4       	brcc	.+4      	; 0x15a <lcd_putc+0x14>
 156:	80 e4       	ldi	r24, 0x40	; 64
 158:	01 c0       	rjmp	.+2      	; 0x15c <lcd_putc+0x16>
 15a:	80 e0       	ldi	r24, 0x00	; 0
 15c:	80 58       	subi	r24, 0x80	; 128
 15e:	0e 94 95 00 	call	0x12a	; 0x12a <lcd_command>
 162:	04 c0       	rjmp	.+8      	; 0x16c <lcd_putc+0x26>
 164:	61 e0       	ldi	r22, 0x01	; 1
 166:	8c 2f       	mov	r24, r28
 168:	0e 94 3e 00 	call	0x7c	; 0x7c <lcd_write>
 16c:	cf 91       	pop	r28
 16e:	08 95       	ret

00000170 <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 170:	1f 93       	push	r17
 172:	cf 93       	push	r28
 174:	df 93       	push	r29
 176:	18 2f       	mov	r17, r24
      && ( &LCD_RS_PORT == &LCD_DATA0_PORT) && ( &LCD_RW_PORT == &LCD_DATA0_PORT) && (&LCD_E_PORT == &LCD_DATA0_PORT)
      && (LCD_DATA0_PIN == 0 ) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) 
      && (LCD_RS_PIN == 4 ) && (LCD_RW_PIN == 5) && (LCD_E_PIN == 6 ) )
    {
        /* configure all port bits as output (all LCD lines on same port) */
        DDR(LCD_DATA0_PORT) |= 0x7F;
 178:	84 b3       	in	r24, 0x14	; 20
 17a:	8f 67       	ori	r24, 0x7F	; 127
 17c:	84 bb       	out	0x14, r24	; 20
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 17e:	80 e0       	ldi	r24, 0x00	; 0
 180:	9d e7       	ldi	r25, 0x7D	; 125
 182:	01 97       	sbiw	r24, 0x01	; 1
 184:	f1 f7       	brne	.-4      	; 0x182 <lcd_init+0x12>
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
    }
    delay(16000);        /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);  // _BV(LCD_FUNCTION)>>4;
 186:	85 b3       	in	r24, 0x15	; 21
 188:	82 60       	ori	r24, 0x02	; 2
 18a:	85 bb       	out	0x15, r24	; 21
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
 18c:	85 b3       	in	r24, 0x15	; 21
 18e:	81 60       	ori	r24, 0x01	; 1
 190:	85 bb       	out	0x15, r24	; 21
    lcd_e_toggle();
 192:	0e 94 36 00 	call	0x6c	; 0x6c <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 196:	80 e0       	ldi	r24, 0x00	; 0
 198:	97 e2       	ldi	r25, 0x27	; 39
 19a:	01 97       	sbiw	r24, 0x01	; 1
 19c:	f1 f7       	brne	.-4      	; 0x19a <lcd_init+0x2a>
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
    lcd_e_toggle();
    delay(4992);         /* delay, busy flag can't be checked here */
   
    /* repeat last command */ 
    lcd_e_toggle();      
 19e:	0e 94 36 00 	call	0x6c	; 0x6c <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 1a2:	c0 e8       	ldi	r28, 0x80	; 128
 1a4:	d0 e0       	ldi	r29, 0x00	; 0
 1a6:	ce 01       	movw	r24, r28
 1a8:	01 97       	sbiw	r24, 0x01	; 1
 1aa:	f1 f7       	brne	.-4      	; 0x1a8 <lcd_init+0x38>
    /* repeat last command */ 
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */
    
    /* repeat last command a third time */
    lcd_e_toggle();      
 1ac:	0e 94 36 00 	call	0x6c	; 0x6c <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 1b0:	ce 01       	movw	r24, r28
 1b2:	01 97       	sbiw	r24, 0x01	; 1
 1b4:	f1 f7       	brne	.-4      	; 0x1b2 <lcd_init+0x42>
    /* repeat last command a third time */
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
 1b6:	85 b3       	in	r24, 0x15	; 21
 1b8:	8e 7f       	andi	r24, 0xFE	; 254
 1ba:	85 bb       	out	0x15, r24	; 21
    lcd_e_toggle();
 1bc:	0e 94 36 00 	call	0x6c	; 0x6c <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 1c0:	21 97       	sbiw	r28, 0x01	; 1
 1c2:	f1 f7       	brne	.-4      	; 0x1c0 <lcd_init+0x50>
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
 1c4:	88 e2       	ldi	r24, 0x28	; 40
 1c6:	0e 94 95 00 	call	0x12a	; 0x12a <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
 1ca:	88 e0       	ldi	r24, 0x08	; 8
 1cc:	0e 94 95 00 	call	0x12a	; 0x12a <lcd_command>
    lcd_clrscr();                           /* display clear                */ 
 1d0:	0e 94 9f 00 	call	0x13e	; 0x13e <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 1d4:	86 e0       	ldi	r24, 0x06	; 6
 1d6:	0e 94 95 00 	call	0x12a	; 0x12a <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
 1da:	81 2f       	mov	r24, r17
 1dc:	0e 94 95 00 	call	0x12a	; 0x12a <lcd_command>

}/* lcd_init */
 1e0:	df 91       	pop	r29
 1e2:	cf 91       	pop	r28
 1e4:	1f 91       	pop	r17
 1e6:	08 95       	ret

000001e8 <UART_init>:
#define BAUD_PRESCALE (((F_CPU / (USART_BAUDRATE * 16UL))) - 1)


void UART_init(long USART_BAUDRATE)
{
	UCSRB |= (1 << RXEN) | (1 << TXEN);/* Turn on transmission and reception */
 1e8:	2a b1       	in	r18, 0x0a	; 10
 1ea:	28 61       	ori	r18, 0x18	; 24
 1ec:	2a b9       	out	0x0a, r18	; 10
	UCSRC |= (1 << URSEL) | (1 << UCSZ0) | (1 << UCSZ1);/* Use 8-bit character sizes */
 1ee:	20 b5       	in	r18, 0x20	; 32
 1f0:	26 68       	ori	r18, 0x86	; 134
 1f2:	20 bd       	out	0x20, r18	; 32
	UBRRL = BAUD_PRESCALE;		/* Load lower 8-bits of the baud rate value */
 1f4:	dc 01       	movw	r26, r24
 1f6:	cb 01       	movw	r24, r22
 1f8:	88 0f       	add	r24, r24
 1fa:	99 1f       	adc	r25, r25
 1fc:	aa 1f       	adc	r26, r26
 1fe:	bb 1f       	adc	r27, r27
 200:	88 0f       	add	r24, r24
 202:	99 1f       	adc	r25, r25
 204:	aa 1f       	adc	r26, r26
 206:	bb 1f       	adc	r27, r27
 208:	9c 01       	movw	r18, r24
 20a:	ad 01       	movw	r20, r26
 20c:	22 0f       	add	r18, r18
 20e:	33 1f       	adc	r19, r19
 210:	44 1f       	adc	r20, r20
 212:	55 1f       	adc	r21, r21
 214:	22 0f       	add	r18, r18
 216:	33 1f       	adc	r19, r19
 218:	44 1f       	adc	r20, r20
 21a:	55 1f       	adc	r21, r21
 21c:	60 e0       	ldi	r22, 0x00	; 0
 21e:	72 e1       	ldi	r23, 0x12	; 18
 220:	8a e7       	ldi	r24, 0x7A	; 122
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	0e 94 38 01 	call	0x270	; 0x270 <__udivmodsi4>
 228:	8f ef       	ldi	r24, 0xFF	; 255
 22a:	82 0f       	add	r24, r18
 22c:	89 b9       	out	0x09, r24	; 9
	UBRRH = (BAUD_PRESCALE >> 8);	/* Load upper 8-bits*/
 22e:	da 01       	movw	r26, r20
 230:	c9 01       	movw	r24, r18
 232:	01 97       	sbiw	r24, 0x01	; 1
 234:	a1 09       	sbc	r26, r1
 236:	b1 09       	sbc	r27, r1
 238:	89 2f       	mov	r24, r25
 23a:	9a 2f       	mov	r25, r26
 23c:	ab 2f       	mov	r26, r27
 23e:	bb 27       	eor	r27, r27
 240:	80 bd       	out	0x20, r24	; 32
 242:	08 95       	ret

00000244 <UART_RxChar>:
}

unsigned char UART_RxChar()
{
 244:	cf 93       	push	r28
	while ((UCSRA & (1 << RXC)) == 0);/* Wait till data is received */
 246:	5f 9b       	sbis	0x0b, 7	; 11
 248:	fe cf       	rjmp	.-4      	; 0x246 <UART_RxChar+0x2>
	char ch = UDR;
 24a:	cc b1       	in	r28, 0x0c	; 12
	lcd_putc(ch);
 24c:	8c 2f       	mov	r24, r28
 24e:	0e 94 a3 00 	call	0x146	; 0x146 <lcd_putc>
	return ch;			/* Return the byte*/
}
 252:	8c 2f       	mov	r24, r28
 254:	cf 91       	pop	r28
 256:	08 95       	ret

00000258 <main>:


int main()
{
	lcd_init(LCD_DISP_ON);
 258:	8c e0       	ldi	r24, 0x0C	; 12
 25a:	0e 94 b8 00 	call	0x170	; 0x170 <lcd_init>
	char c;
	UART_init(4800);
 25e:	60 ec       	ldi	r22, 0xC0	; 192
 260:	72 e1       	ldi	r23, 0x12	; 18
 262:	80 e0       	ldi	r24, 0x00	; 0
 264:	90 e0       	ldi	r25, 0x00	; 0
 266:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <UART_init>
	while(1)
	{
		c=UART_RxChar();
 26a:	0e 94 22 01 	call	0x244	; 0x244 <UART_RxChar>
 26e:	fd cf       	rjmp	.-6      	; 0x26a <main+0x12>

00000270 <__udivmodsi4>:
 270:	a1 e2       	ldi	r26, 0x21	; 33
 272:	1a 2e       	mov	r1, r26
 274:	aa 1b       	sub	r26, r26
 276:	bb 1b       	sub	r27, r27
 278:	fd 01       	movw	r30, r26
 27a:	0d c0       	rjmp	.+26     	; 0x296 <__udivmodsi4_ep>

0000027c <__udivmodsi4_loop>:
 27c:	aa 1f       	adc	r26, r26
 27e:	bb 1f       	adc	r27, r27
 280:	ee 1f       	adc	r30, r30
 282:	ff 1f       	adc	r31, r31
 284:	a2 17       	cp	r26, r18
 286:	b3 07       	cpc	r27, r19
 288:	e4 07       	cpc	r30, r20
 28a:	f5 07       	cpc	r31, r21
 28c:	20 f0       	brcs	.+8      	; 0x296 <__udivmodsi4_ep>
 28e:	a2 1b       	sub	r26, r18
 290:	b3 0b       	sbc	r27, r19
 292:	e4 0b       	sbc	r30, r20
 294:	f5 0b       	sbc	r31, r21

00000296 <__udivmodsi4_ep>:
 296:	66 1f       	adc	r22, r22
 298:	77 1f       	adc	r23, r23
 29a:	88 1f       	adc	r24, r24
 29c:	99 1f       	adc	r25, r25
 29e:	1a 94       	dec	r1
 2a0:	69 f7       	brne	.-38     	; 0x27c <__udivmodsi4_loop>
 2a2:	60 95       	com	r22
 2a4:	70 95       	com	r23
 2a6:	80 95       	com	r24
 2a8:	90 95       	com	r25
 2aa:	9b 01       	movw	r18, r22
 2ac:	ac 01       	movw	r20, r24
 2ae:	bd 01       	movw	r22, r26
 2b0:	cf 01       	movw	r24, r30
 2b2:	08 95       	ret

000002b4 <_exit>:
 2b4:	f8 94       	cli

000002b6 <__stop_program>:
 2b6:	ff cf       	rjmp	.-2      	; 0x2b6 <__stop_program>
