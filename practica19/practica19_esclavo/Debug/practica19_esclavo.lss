
practica19_esclavo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000f0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000144  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000144  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000174  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  000001b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000737  00000000  00000000  000001f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000659  00000000  00000000  0000092f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000032c  00000000  00000000  00000f88  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000074  00000000  00000000  000012b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000039c  00000000  00000000  00001328  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000008a  00000000  00000000  000016c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  0000174e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 58 00 	call	0xb0	; 0xb0 <main>
  64:	0c 94 76 00 	jmp	0xec	; 0xec <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <SPI_Init>:
#define SS 4
#define SS_Enable PORTB &= ~(1<<SS)			/* Define Slave enable */
#define SS_Disable PORTB |= (1<<SS)			/* Define Slave disable */
void SPI_Init()					/* SPI Initialize function */
{
	DDRB = (1<<MISO);			/* Make MISO pin as 
  6c:	80 e4       	ldi	r24, 0x40	; 64
  6e:	87 bb       	out	0x17, r24	; 23
						output pin */
	SPCR = (1<<SPE);		
  70:	8d b9       	out	0x0d, r24	; 13
  72:	08 95       	ret

00000074 <ADC_Read>:
}
int ADC_Read(char channel)
{
	int Ain,AinLow;
	
	ADMUX=ADMUX|(channel & 0x0f);	/* Set input channel to read */
  74:	97 b1       	in	r25, 0x07	; 7
  76:	8f 70       	andi	r24, 0x0F	; 15
  78:	98 2b       	or	r25, r24
  7a:	97 b9       	out	0x07, r25	; 7

	ADCSRA |= (1<<ADSC);		/* Start conversion */
  7c:	86 b1       	in	r24, 0x06	; 6
  7e:	80 64       	ori	r24, 0x40	; 64
  80:	86 b9       	out	0x06, r24	; 6
	while((ADCSRA&(1<<ADIF))==0);	/* Monitor end of conversion interrupt */
  82:	34 9b       	sbis	0x06, 4	; 6
  84:	fe cf       	rjmp	.-4      	; 0x82 <ADC_Read+0xe>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  86:	8a e1       	ldi	r24, 0x1A	; 26
  88:	8a 95       	dec	r24
  8a:	f1 f7       	brne	.-4      	; 0x88 <ADC_Read+0x14>
  8c:	00 c0       	rjmp	.+0      	; 0x8e <ADC_Read+0x1a>
	
	_delay_us(10);
	return ADC;		/* Return digital value*/
  8e:	84 b1       	in	r24, 0x04	; 4
  90:	95 b1       	in	r25, 0x05	; 5
}
  92:	08 95       	ret

00000094 <SPI_Transmit>:
void SPI_Transmit(char data)					/* SPI transmit data function */
{
	SPDR = data;								/* Write data to SPI data register */
  94:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));					/* Wait till transmission complete */
  96:	77 9b       	sbis	0x0e, 7	; 14
  98:	fe cf       	rjmp	.-4      	; 0x96 <SPI_Transmit+0x2>
}
  9a:	08 95       	ret

0000009c <SPI_Receive>:

char SPI_Receive()								/* SPI Receive data function */
{
	while(!(SPSR & (1<<SPIF)));					/* Wait till reception complete */
  9c:	77 9b       	sbis	0x0e, 7	; 14
  9e:	fe cf       	rjmp	.-4      	; 0x9c <SPI_Receive>
	return(SPDR);								/* return received data */
  a0:	8f b1       	in	r24, 0x0f	; 15
}
  a2:	08 95       	ret

000000a4 <ADC_Init>:

void ADC_Init()
{
	DDRA=0x0;			/* Make ADC port as input */
  a4:	1a ba       	out	0x1a, r1	; 26
	ADCSRA = 0x87;			/* Enable ADC, fr/128  */
  a6:	87 e8       	ldi	r24, 0x87	; 135
  a8:	86 b9       	out	0x06, r24	; 6
	ADMUX = 0x40;			/* Vref: Avcc, ADC channel: 0 */
  aa:	80 e4       	ldi	r24, 0x40	; 64
  ac:	87 b9       	out	0x07, r24	; 7
  ae:	08 95       	ret

000000b0 <main>:
}


int main(void)
{
	SPI_Init();
  b0:	0e 94 36 00 	call	0x6c	; 0x6c <SPI_Init>
	ADC_Init();
  b4:	0e 94 52 00 	call	0xa4	; 0xa4 <ADC_Init>
    /* Replace with your application code */
	int count=0;		
	DDRC = 0xFF;
  b8:	8f ef       	ldi	r24, 0xFF	; 255
  ba:	84 bb       	out	0x14, r24	; 20
	PORTC=0;
  bc:	15 ba       	out	0x15, r1	; 21
    while (1) 
    {
		PORTC = 0;
  be:	15 ba       	out	0x15, r1	; 21
		count = SPI_Receive();
  c0:	0e 94 4e 00 	call	0x9c	; 0x9c <SPI_Receive>
  c4:	90 e0       	ldi	r25, 0x00	; 0
		if (count == 1) count = 7;
  c6:	81 30       	cpi	r24, 0x01	; 1
  c8:	91 05       	cpc	r25, r1
  ca:	11 f4       	brne	.+4      	; 0xd0 <main+0x20>
  cc:	87 e0       	ldi	r24, 0x07	; 7
  ce:	90 e0       	ldi	r25, 0x00	; 0
		PORTC = count;
  d0:	85 bb       	out	0x15, r24	; 21
		count = ADC_Read(count);
  d2:	0e 94 3a 00 	call	0x74	; 0x74 <ADC_Read>
		count/=4;
  d6:	99 23       	and	r25, r25
  d8:	0c f4       	brge	.+2      	; 0xdc <main+0x2c>
  da:	03 96       	adiw	r24, 0x03	; 3
  dc:	95 95       	asr	r25
  de:	87 95       	ror	r24
  e0:	95 95       	asr	r25
  e2:	87 95       	ror	r24
		PORTC = count;
  e4:	85 bb       	out	0x15, r24	; 21
		SPI_Transmit(count);
  e6:	0e 94 4a 00 	call	0x94	; 0x94 <SPI_Transmit>
    }
  ea:	e9 cf       	rjmp	.-46     	; 0xbe <main+0xe>

000000ec <_exit>:
  ec:	f8 94       	cli

000000ee <__stop_program>:
  ee:	ff cf       	rjmp	.-2      	; 0xee <__stop_program>
