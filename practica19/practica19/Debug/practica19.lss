
practica19.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000bd0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000066  00800060  00000bd0  00000c44  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000caa  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000cdc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000c0  00000000  00000000  00000d18  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000010bf  00000000  00000000  00000dd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000087d  00000000  00000000  00001e97  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000945  00000000  00000000  00002714  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000194  00000000  00000000  0000305c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000460  00000000  00000000  000031f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000916  00000000  00000000  00003650  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a0  00000000  00000000  00003f66  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 ed       	ldi	r30, 0xD0	; 208
  68:	fb e0       	ldi	r31, 0x0B	; 11
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 3c       	cpi	r26, 0xC6	; 198
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 30 01 	call	0x260	; 0x260 <main>
  7a:	0c 94 e6 05 	jmp	0xbcc	; 0xbcc <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) ) {
        lcd_putc(c);
    }

}/* lcd_puts_p */
  82:	82 b3       	in	r24, 0x12	; 18
  84:	80 64       	ori	r24, 0x40	; 64
  86:	82 bb       	out	0x12, r24	; 18
  88:	00 c0       	rjmp	.+0      	; 0x8a <toggle_e+0x8>
  8a:	82 b3       	in	r24, 0x12	; 18
  8c:	8f 7b       	andi	r24, 0xBF	; 191
  8e:	82 bb       	out	0x12, r24	; 18
  90:	08 95       	ret

00000092 <lcd_write>:
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	d8 2f       	mov	r29, r24
  98:	66 23       	and	r22, r22
  9a:	21 f0       	breq	.+8      	; 0xa4 <lcd_write+0x12>
  9c:	82 b3       	in	r24, 0x12	; 18
  9e:	80 61       	ori	r24, 0x10	; 16
  a0:	82 bb       	out	0x12, r24	; 18
  a2:	03 c0       	rjmp	.+6      	; 0xaa <lcd_write+0x18>
  a4:	82 b3       	in	r24, 0x12	; 18
  a6:	8f 7e       	andi	r24, 0xEF	; 239
  a8:	82 bb       	out	0x12, r24	; 18
  aa:	82 b3       	in	r24, 0x12	; 18
  ac:	8f 7d       	andi	r24, 0xDF	; 223
  ae:	82 bb       	out	0x12, r24	; 18
  b0:	81 b3       	in	r24, 0x11	; 17
  b2:	8f 60       	ori	r24, 0x0F	; 15
  b4:	81 bb       	out	0x11, r24	; 17
  b6:	c2 b3       	in	r28, 0x12	; 18
  b8:	c0 7f       	andi	r28, 0xF0	; 240
  ba:	8d 2f       	mov	r24, r29
  bc:	82 95       	swap	r24
  be:	8f 70       	andi	r24, 0x0F	; 15
  c0:	8c 2b       	or	r24, r28
  c2:	82 bb       	out	0x12, r24	; 18
  c4:	0e 94 41 00 	call	0x82	; 0x82 <toggle_e>
  c8:	df 70       	andi	r29, 0x0F	; 15
  ca:	dc 2b       	or	r29, r28
  cc:	d2 bb       	out	0x12, r29	; 18
  ce:	0e 94 41 00 	call	0x82	; 0x82 <toggle_e>
  d2:	cf 60       	ori	r28, 0x0F	; 15
  d4:	c2 bb       	out	0x12, r28	; 18
  d6:	df 91       	pop	r29
  d8:	cf 91       	pop	r28
  da:	08 95       	ret

000000dc <lcd_read>:
  dc:	88 23       	and	r24, r24
  de:	21 f0       	breq	.+8      	; 0xe8 <lcd_read+0xc>
  e0:	82 b3       	in	r24, 0x12	; 18
  e2:	80 61       	ori	r24, 0x10	; 16
  e4:	82 bb       	out	0x12, r24	; 18
  e6:	03 c0       	rjmp	.+6      	; 0xee <lcd_read+0x12>
  e8:	82 b3       	in	r24, 0x12	; 18
  ea:	8f 7e       	andi	r24, 0xEF	; 239
  ec:	82 bb       	out	0x12, r24	; 18
  ee:	82 b3       	in	r24, 0x12	; 18
  f0:	80 62       	ori	r24, 0x20	; 32
  f2:	82 bb       	out	0x12, r24	; 18
  f4:	81 b3       	in	r24, 0x11	; 17
  f6:	80 7f       	andi	r24, 0xF0	; 240
  f8:	81 bb       	out	0x11, r24	; 17
  fa:	82 b3       	in	r24, 0x12	; 18
  fc:	80 64       	ori	r24, 0x40	; 64
  fe:	82 bb       	out	0x12, r24	; 18
 100:	00 c0       	rjmp	.+0      	; 0x102 <lcd_read+0x26>
 102:	90 b3       	in	r25, 0x10	; 16
 104:	92 95       	swap	r25
 106:	90 7f       	andi	r25, 0xF0	; 240
 108:	82 b3       	in	r24, 0x12	; 18
 10a:	8f 7b       	andi	r24, 0xBF	; 191
 10c:	82 bb       	out	0x12, r24	; 18
 10e:	00 c0       	rjmp	.+0      	; 0x110 <lcd_read+0x34>
 110:	82 b3       	in	r24, 0x12	; 18
 112:	80 64       	ori	r24, 0x40	; 64
 114:	82 bb       	out	0x12, r24	; 18
 116:	00 c0       	rjmp	.+0      	; 0x118 <lcd_read+0x3c>
 118:	80 b3       	in	r24, 0x10	; 16
 11a:	8f 70       	andi	r24, 0x0F	; 15
 11c:	22 b3       	in	r18, 0x12	; 18
 11e:	2f 7b       	andi	r18, 0xBF	; 191
 120:	22 bb       	out	0x12, r18	; 18
 122:	89 2b       	or	r24, r25
 124:	08 95       	ret

00000126 <lcd_waitbusy>:
 126:	80 e0       	ldi	r24, 0x00	; 0
 128:	0e 94 6e 00 	call	0xdc	; 0xdc <lcd_read>
 12c:	88 23       	and	r24, r24
 12e:	dc f3       	brlt	.-10     	; 0x126 <lcd_waitbusy>
 130:	84 e0       	ldi	r24, 0x04	; 4
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	01 97       	sbiw	r24, 0x01	; 1
 136:	f1 f7       	brne	.-4      	; 0x134 <lcd_waitbusy+0xe>
 138:	80 e0       	ldi	r24, 0x00	; 0
 13a:	0e 94 6e 00 	call	0xdc	; 0xdc <lcd_read>
 13e:	08 95       	ret

00000140 <lcd_command>:
 140:	cf 93       	push	r28
 142:	c8 2f       	mov	r28, r24
 144:	0e 94 93 00 	call	0x126	; 0x126 <lcd_waitbusy>
 148:	60 e0       	ldi	r22, 0x00	; 0
 14a:	8c 2f       	mov	r24, r28
 14c:	0e 94 49 00 	call	0x92	; 0x92 <lcd_write>
 150:	cf 91       	pop	r28
 152:	08 95       	ret

00000154 <lcd_gotoxy>:
 154:	61 11       	cpse	r22, r1
 156:	04 c0       	rjmp	.+8      	; 0x160 <lcd_gotoxy+0xc>
 158:	80 58       	subi	r24, 0x80	; 128
 15a:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_command>
 15e:	08 95       	ret
 160:	80 54       	subi	r24, 0x40	; 64
 162:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_command>
 166:	08 95       	ret

00000168 <lcd_clrscr>:
 168:	81 e0       	ldi	r24, 0x01	; 1
 16a:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_command>
 16e:	08 95       	ret

00000170 <lcd_putc>:
 170:	cf 93       	push	r28
 172:	c8 2f       	mov	r28, r24
 174:	0e 94 93 00 	call	0x126	; 0x126 <lcd_waitbusy>
 178:	ca 30       	cpi	r28, 0x0A	; 10
 17a:	49 f4       	brne	.+18     	; 0x18e <lcd_putc+0x1e>
 17c:	80 34       	cpi	r24, 0x40	; 64
 17e:	10 f4       	brcc	.+4      	; 0x184 <lcd_putc+0x14>
 180:	80 e4       	ldi	r24, 0x40	; 64
 182:	01 c0       	rjmp	.+2      	; 0x186 <lcd_putc+0x16>
 184:	80 e0       	ldi	r24, 0x00	; 0
 186:	80 58       	subi	r24, 0x80	; 128
 188:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_command>
 18c:	04 c0       	rjmp	.+8      	; 0x196 <lcd_putc+0x26>
 18e:	61 e0       	ldi	r22, 0x01	; 1
 190:	8c 2f       	mov	r24, r28
 192:	0e 94 49 00 	call	0x92	; 0x92 <lcd_write>
 196:	cf 91       	pop	r28
 198:	08 95       	ret

0000019a <lcd_puts>:
 19a:	cf 93       	push	r28
 19c:	df 93       	push	r29
 19e:	fc 01       	movw	r30, r24
 1a0:	03 c0       	rjmp	.+6      	; 0x1a8 <lcd_puts+0xe>
 1a2:	0e 94 b8 00 	call	0x170	; 0x170 <lcd_putc>
 1a6:	fe 01       	movw	r30, r28
 1a8:	ef 01       	movw	r28, r30
 1aa:	21 96       	adiw	r28, 0x01	; 1
 1ac:	80 81       	ld	r24, Z
 1ae:	81 11       	cpse	r24, r1
 1b0:	f8 cf       	rjmp	.-16     	; 0x1a2 <lcd_puts+0x8>
 1b2:	df 91       	pop	r29
 1b4:	cf 91       	pop	r28
 1b6:	08 95       	ret

000001b8 <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 1b8:	1f 93       	push	r17
 1ba:	cf 93       	push	r28
 1bc:	df 93       	push	r29
 1be:	18 2f       	mov	r17, r24
      && ( &LCD_RS_PORT == &LCD_DATA0_PORT) && ( &LCD_RW_PORT == &LCD_DATA0_PORT) && (&LCD_E_PORT == &LCD_DATA0_PORT)
      && (LCD_DATA0_PIN == 0 ) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) 
      && (LCD_RS_PIN == 4 ) && (LCD_RW_PIN == 5) && (LCD_E_PIN == 6 ) )
    {
        /* configure all port bits as output (all LCD lines on same port) */
        DDR(LCD_DATA0_PORT) |= 0x7F;
 1c0:	81 b3       	in	r24, 0x11	; 17
 1c2:	8f 67       	ori	r24, 0x7F	; 127
 1c4:	81 bb       	out	0x11, r24	; 17
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 1c6:	80 e0       	ldi	r24, 0x00	; 0
 1c8:	9d e7       	ldi	r25, 0x7D	; 125
 1ca:	01 97       	sbiw	r24, 0x01	; 1
 1cc:	f1 f7       	brne	.-4      	; 0x1ca <lcd_init+0x12>
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
    }
    delay(16000);        /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);  // _BV(LCD_FUNCTION)>>4;
 1ce:	82 b3       	in	r24, 0x12	; 18
 1d0:	82 60       	ori	r24, 0x02	; 2
 1d2:	82 bb       	out	0x12, r24	; 18
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
 1d4:	82 b3       	in	r24, 0x12	; 18
 1d6:	81 60       	ori	r24, 0x01	; 1
 1d8:	82 bb       	out	0x12, r24	; 18
    lcd_e_toggle();
 1da:	0e 94 41 00 	call	0x82	; 0x82 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 1de:	80 e0       	ldi	r24, 0x00	; 0
 1e0:	97 e2       	ldi	r25, 0x27	; 39
 1e2:	01 97       	sbiw	r24, 0x01	; 1
 1e4:	f1 f7       	brne	.-4      	; 0x1e2 <lcd_init+0x2a>
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
    lcd_e_toggle();
    delay(4992);         /* delay, busy flag can't be checked here */
   
    /* repeat last command */ 
    lcd_e_toggle();      
 1e6:	0e 94 41 00 	call	0x82	; 0x82 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 1ea:	c0 e8       	ldi	r28, 0x80	; 128
 1ec:	d0 e0       	ldi	r29, 0x00	; 0
 1ee:	ce 01       	movw	r24, r28
 1f0:	01 97       	sbiw	r24, 0x01	; 1
 1f2:	f1 f7       	brne	.-4      	; 0x1f0 <lcd_init+0x38>
    /* repeat last command */ 
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */
    
    /* repeat last command a third time */
    lcd_e_toggle();      
 1f4:	0e 94 41 00 	call	0x82	; 0x82 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 1f8:	ce 01       	movw	r24, r28
 1fa:	01 97       	sbiw	r24, 0x01	; 1
 1fc:	f1 f7       	brne	.-4      	; 0x1fa <lcd_init+0x42>
    /* repeat last command a third time */
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
 1fe:	82 b3       	in	r24, 0x12	; 18
 200:	8e 7f       	andi	r24, 0xFE	; 254
 202:	82 bb       	out	0x12, r24	; 18
    lcd_e_toggle();
 204:	0e 94 41 00 	call	0x82	; 0x82 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 208:	21 97       	sbiw	r28, 0x01	; 1
 20a:	f1 f7       	brne	.-4      	; 0x208 <__EEPROM_REGION_LENGTH__+0x8>
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
 20c:	88 e2       	ldi	r24, 0x28	; 40
 20e:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
 212:	88 e0       	ldi	r24, 0x08	; 8
 214:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_command>
    lcd_clrscr();                           /* display clear                */ 
 218:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 21c:	86 e0       	ldi	r24, 0x06	; 6
 21e:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
 222:	81 2f       	mov	r24, r17
 224:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_command>

}/* lcd_init */
 228:	df 91       	pop	r29
 22a:	cf 91       	pop	r28
 22c:	1f 91       	pop	r17
 22e:	08 95       	ret

00000230 <SPI_Init>:
#define SS1_Disable PORTA |= (1<<SS1)			/* Define Slave disable */
#define SS2_Enable PORTA &= ~(1<<SS2)			/* Define Slave enable */
#define SS2_Disable PORTA |= (1<<SS2)			/* Define Slave disable */
void SPI_Init()								/* SPI Initialize function */
{
	DDRB |= (1<<MOSI)|(1<<SCK);		/* Make MOSI, SCK, 0th pin direction as output pins */
 230:	87 b3       	in	r24, 0x17	; 23
 232:	80 6a       	ori	r24, 0xA0	; 160
 234:	87 bb       	out	0x17, r24	; 23
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);	/* Enable SPI, Enable in master mode, with Fosc/16 SCK frequency */
 236:	81 e5       	ldi	r24, 0x51	; 81
 238:	8d b9       	out	0x0d, r24	; 13
	SPSR &= ~(1<<SPI2X);					/* Disable speed doubler */
 23a:	8e b1       	in	r24, 0x0e	; 14
 23c:	8e 7f       	andi	r24, 0xFE	; 254
 23e:	8e b9       	out	0x0e, r24	; 14
	DDRA |= (1<<SS1) | (1<<SS2);
 240:	8a b3       	in	r24, 0x1a	; 26
 242:	80 6c       	ori	r24, 0xC0	; 192
 244:	8a bb       	out	0x1a, r24	; 26
	PORTA |= (1<<SS1) | (1<<SS2);
 246:	8b b3       	in	r24, 0x1b	; 27
 248:	80 6c       	ori	r24, 0xC0	; 192
 24a:	8b bb       	out	0x1b, r24	; 27
 24c:	08 95       	ret

0000024e <SPI_Write>:
}

void SPI_Write(char data)					/* SPI write data function */
{
	SPDR = data;							/* Write data to SPI data register */
 24e:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));				/* Wait till transmission complete */
 250:	77 9b       	sbis	0x0e, 7	; 14
 252:	fe cf       	rjmp	.-4      	; 0x250 <SPI_Write+0x2>
}
 254:	08 95       	ret

00000256 <SPI_Read>:

char SPI_Read()								/* SPI read data function */
{
	SPDR = 0x00;
 256:	1f b8       	out	0x0f, r1	; 15
	while(!(SPSR & (1<<SPIF)));				/* Wait till reception complete */
 258:	77 9b       	sbis	0x0e, 7	; 14
 25a:	fe cf       	rjmp	.-4      	; 0x258 <SPI_Read+0x2>
	return(SPDR);							/* return received data */
 25c:	8f b1       	in	r24, 0x0f	; 15
}
 25e:	08 95       	ret

00000260 <main>:


int main(void)
{
	SPI_Init();
 260:	0e 94 18 01 	call	0x230	; 0x230 <SPI_Init>
	DDRC = 0x00;
 264:	14 ba       	out	0x14, r1	; 20
	PORTC = 0xFF;
 266:	8f ef       	ldi	r24, 0xFF	; 255
 268:	85 bb       	out	0x15, r24	; 21
	
	lcd_init(LCD_DISP_ON);
 26a:	8c e0       	ldi	r24, 0x0C	; 12
 26c:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_init>
	
	lcd_puts("hola");
 270:	80 e6       	ldi	r24, 0x60	; 96
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	0e 94 cd 00 	call	0x19a	; 0x19a <lcd_puts>
	float xd = 0.0;
	int value = 0;
    /* Replace with your application code */
	SS1_Disable;
 278:	8b b3       	in	r24, 0x1b	; 27
 27a:	80 64       	ori	r24, 0x40	; 64
 27c:	8b bb       	out	0x1b, r24	; 27
	SS2_Disable;
 27e:	8b b3       	in	r24, 0x1b	; 27
 280:	80 68       	ori	r24, 0x80	; 128
 282:	8b bb       	out	0x1b, r24	; 27
    while (1) 
    {
		if (!(PINC&1)) {
 284:	98 99       	sbic	0x13, 0	; 19
 286:	97 c0       	rjmp	.+302    	; 0x3b6 <main+0x156>
			SS1_Enable;
 288:	8b b3       	in	r24, 0x1b	; 27
 28a:	8f 7b       	andi	r24, 0xBF	; 191
 28c:	8b bb       	out	0x1b, r24	; 27
		
			SPI_Write(0x00);
 28e:	80 e0       	ldi	r24, 0x00	; 0
 290:	0e 94 27 01 	call	0x24e	; 0x24e <SPI_Write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 294:	2f ef       	ldi	r18, 0xFF	; 255
 296:	80 e7       	ldi	r24, 0x70	; 112
 298:	92 e0       	ldi	r25, 0x02	; 2
 29a:	21 50       	subi	r18, 0x01	; 1
 29c:	80 40       	sbci	r24, 0x00	; 0
 29e:	90 40       	sbci	r25, 0x00	; 0
 2a0:	e1 f7       	brne	.-8      	; 0x29a <main+0x3a>
 2a2:	00 c0       	rjmp	.+0      	; 0x2a4 <main+0x44>
 2a4:	00 00       	nop
			_delay_ms(100);
			value = SPI_Read();
 2a6:	0e 94 2b 01 	call	0x256	; 0x256 <SPI_Read>
 2aa:	e8 2e       	mov	r14, r24
 2ac:	f1 2c       	mov	r15, r1
 2ae:	2f ef       	ldi	r18, 0xFF	; 255
 2b0:	80 e7       	ldi	r24, 0x70	; 112
 2b2:	92 e0       	ldi	r25, 0x02	; 2
 2b4:	21 50       	subi	r18, 0x01	; 1
 2b6:	80 40       	sbci	r24, 0x00	; 0
 2b8:	90 40       	sbci	r25, 0x00	; 0
 2ba:	e1 f7       	brne	.-8      	; 0x2b4 <main+0x54>
 2bc:	00 c0       	rjmp	.+0      	; 0x2be <main+0x5e>
 2be:	00 00       	nop
			_delay_ms(100);
			SS1_Disable;
 2c0:	8b b3       	in	r24, 0x1b	; 27
 2c2:	80 64       	ori	r24, 0x40	; 64
 2c4:	8b bb       	out	0x1b, r24	; 27
			while (!(PINC&(1<<0)));
 2c6:	98 9b       	sbis	0x13, 0	; 19
 2c8:	fe cf       	rjmp	.-4      	; 0x2c6 <main+0x66>
			lcd_clrscr();
 2ca:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_clrscr>
			lcd_gotoxy(0,0);
 2ce:	60 e0       	ldi	r22, 0x00	; 0
 2d0:	80 e0       	ldi	r24, 0x00	; 0
 2d2:	0e 94 aa 00 	call	0x154	; 0x154 <lcd_gotoxy>
			lcd_puts("Pot:1 Esclavo 6\nVolts: ");
 2d6:	85 e6       	ldi	r24, 0x65	; 101
 2d8:	90 e0       	ldi	r25, 0x00	; 0
 2da:	0e 94 cd 00 	call	0x19a	; 0x19a <lcd_puts>
			xd = value;
 2de:	b7 01       	movw	r22, r14
 2e0:	ff 0c       	add	r15, r15
 2e2:	88 0b       	sbc	r24, r24
 2e4:	99 0b       	sbc	r25, r25
 2e6:	0e 94 c4 04 	call	0x988	; 0x988 <__floatsisf>
			xd*=5.0;
 2ea:	20 e0       	ldi	r18, 0x00	; 0
 2ec:	30 e0       	ldi	r19, 0x00	; 0
 2ee:	40 ea       	ldi	r20, 0xA0	; 160
 2f0:	50 e4       	ldi	r21, 0x40	; 64
 2f2:	0e 94 55 05 	call	0xaaa	; 0xaaa <__mulsf3>
			xd/=255;
 2f6:	20 e0       	ldi	r18, 0x00	; 0
 2f8:	30 e0       	ldi	r19, 0x00	; 0
 2fa:	4f e7       	ldi	r20, 0x7F	; 127
 2fc:	53 e4       	ldi	r21, 0x43	; 67
 2fe:	0e 94 1a 04 	call	0x834	; 0x834 <__divsf3>
 302:	6b 01       	movw	r12, r22
 304:	7c 01       	movw	r14, r24
			lcd_putc((int)xd+'0');
 306:	0e 94 8c 04 	call	0x918	; 0x918 <__fixsfsi>
 30a:	80 e3       	ldi	r24, 0x30	; 48
 30c:	86 0f       	add	r24, r22
 30e:	0e 94 b8 00 	call	0x170	; 0x170 <lcd_putc>
			lcd_putc('.');
 312:	8e e2       	ldi	r24, 0x2E	; 46
 314:	0e 94 b8 00 	call	0x170	; 0x170 <lcd_putc>
			xd*=10.0;
 318:	20 e0       	ldi	r18, 0x00	; 0
 31a:	30 e0       	ldi	r19, 0x00	; 0
 31c:	40 e2       	ldi	r20, 0x20	; 32
 31e:	51 e4       	ldi	r21, 0x41	; 65
 320:	c7 01       	movw	r24, r14
 322:	b6 01       	movw	r22, r12
 324:	0e 94 55 05 	call	0xaaa	; 0xaaa <__mulsf3>
 328:	6b 01       	movw	r12, r22
 32a:	7c 01       	movw	r14, r24
			while (xd>10.0) xd -= 10.0;
 32c:	0a c0       	rjmp	.+20     	; 0x342 <main+0xe2>
 32e:	20 e0       	ldi	r18, 0x00	; 0
 330:	30 e0       	ldi	r19, 0x00	; 0
 332:	40 e2       	ldi	r20, 0x20	; 32
 334:	51 e4       	ldi	r21, 0x41	; 65
 336:	c7 01       	movw	r24, r14
 338:	b6 01       	movw	r22, r12
 33a:	0e 94 ad 03 	call	0x75a	; 0x75a <__subsf3>
 33e:	6b 01       	movw	r12, r22
 340:	7c 01       	movw	r14, r24
 342:	20 e0       	ldi	r18, 0x00	; 0
 344:	30 e0       	ldi	r19, 0x00	; 0
 346:	40 e2       	ldi	r20, 0x20	; 32
 348:	51 e4       	ldi	r21, 0x41	; 65
 34a:	c7 01       	movw	r24, r14
 34c:	b6 01       	movw	r22, r12
 34e:	0e 94 50 05 	call	0xaa0	; 0xaa0 <__gesf2>
 352:	18 16       	cp	r1, r24
 354:	64 f3       	brlt	.-40     	; 0x32e <main+0xce>
			lcd_putc((int)xd+'0');
 356:	c7 01       	movw	r24, r14
 358:	b6 01       	movw	r22, r12
 35a:	0e 94 8c 04 	call	0x918	; 0x918 <__fixsfsi>
 35e:	80 e3       	ldi	r24, 0x30	; 48
 360:	86 0f       	add	r24, r22
 362:	0e 94 b8 00 	call	0x170	; 0x170 <lcd_putc>
			xd*=10.0;
 366:	20 e0       	ldi	r18, 0x00	; 0
 368:	30 e0       	ldi	r19, 0x00	; 0
 36a:	40 e2       	ldi	r20, 0x20	; 32
 36c:	51 e4       	ldi	r21, 0x41	; 65
 36e:	c7 01       	movw	r24, r14
 370:	b6 01       	movw	r22, r12
 372:	0e 94 55 05 	call	0xaaa	; 0xaaa <__mulsf3>
 376:	6b 01       	movw	r12, r22
 378:	7c 01       	movw	r14, r24
			while (xd>10.0) xd -= 10.0;
 37a:	0a c0       	rjmp	.+20     	; 0x390 <main+0x130>
 37c:	20 e0       	ldi	r18, 0x00	; 0
 37e:	30 e0       	ldi	r19, 0x00	; 0
 380:	40 e2       	ldi	r20, 0x20	; 32
 382:	51 e4       	ldi	r21, 0x41	; 65
 384:	c7 01       	movw	r24, r14
 386:	b6 01       	movw	r22, r12
 388:	0e 94 ad 03 	call	0x75a	; 0x75a <__subsf3>
 38c:	6b 01       	movw	r12, r22
 38e:	7c 01       	movw	r14, r24
 390:	20 e0       	ldi	r18, 0x00	; 0
 392:	30 e0       	ldi	r19, 0x00	; 0
 394:	40 e2       	ldi	r20, 0x20	; 32
 396:	51 e4       	ldi	r21, 0x41	; 65
 398:	c7 01       	movw	r24, r14
 39a:	b6 01       	movw	r22, r12
 39c:	0e 94 50 05 	call	0xaa0	; 0xaa0 <__gesf2>
 3a0:	18 16       	cp	r1, r24
 3a2:	64 f3       	brlt	.-40     	; 0x37c <main+0x11c>
			lcd_putc((int)xd+'0');
 3a4:	c7 01       	movw	r24, r14
 3a6:	b6 01       	movw	r22, r12
 3a8:	0e 94 8c 04 	call	0x918	; 0x918 <__fixsfsi>
 3ac:	80 e3       	ldi	r24, 0x30	; 48
 3ae:	86 0f       	add	r24, r22
 3b0:	0e 94 b8 00 	call	0x170	; 0x170 <lcd_putc>
 3b4:	67 cf       	rjmp	.-306    	; 0x284 <main+0x24>
	
			// pot 1, esclavo 6
		} else if (!(PINC&(1<<2))) {
 3b6:	9a 99       	sbic	0x13, 2	; 19
 3b8:	97 c0       	rjmp	.+302    	; 0x4e8 <__stack+0x89>
			// pot 2, esclavo 6
			SS1_Enable;
 3ba:	8b b3       	in	r24, 0x1b	; 27
 3bc:	8f 7b       	andi	r24, 0xBF	; 191
 3be:	8b bb       	out	0x1b, r24	; 27
			
			SPI_Write(0x01);
 3c0:	81 e0       	ldi	r24, 0x01	; 1
 3c2:	0e 94 27 01 	call	0x24e	; 0x24e <SPI_Write>
 3c6:	2f ef       	ldi	r18, 0xFF	; 255
 3c8:	80 e7       	ldi	r24, 0x70	; 112
 3ca:	92 e0       	ldi	r25, 0x02	; 2
 3cc:	21 50       	subi	r18, 0x01	; 1
 3ce:	80 40       	sbci	r24, 0x00	; 0
 3d0:	90 40       	sbci	r25, 0x00	; 0
 3d2:	e1 f7       	brne	.-8      	; 0x3cc <main+0x16c>
 3d4:	00 c0       	rjmp	.+0      	; 0x3d6 <main+0x176>
 3d6:	00 00       	nop
			_delay_ms(100);
			value = SPI_Read();
 3d8:	0e 94 2b 01 	call	0x256	; 0x256 <SPI_Read>
 3dc:	e8 2e       	mov	r14, r24
 3de:	f1 2c       	mov	r15, r1
 3e0:	2f ef       	ldi	r18, 0xFF	; 255
 3e2:	80 e7       	ldi	r24, 0x70	; 112
 3e4:	92 e0       	ldi	r25, 0x02	; 2
 3e6:	21 50       	subi	r18, 0x01	; 1
 3e8:	80 40       	sbci	r24, 0x00	; 0
 3ea:	90 40       	sbci	r25, 0x00	; 0
 3ec:	e1 f7       	brne	.-8      	; 0x3e6 <main+0x186>
 3ee:	00 c0       	rjmp	.+0      	; 0x3f0 <main+0x190>
 3f0:	00 00       	nop
			_delay_ms(100);
			SS1_Disable;
 3f2:	8b b3       	in	r24, 0x1b	; 27
 3f4:	80 64       	ori	r24, 0x40	; 64
 3f6:	8b bb       	out	0x1b, r24	; 27
			while (!(PINC&(1<<2)));
 3f8:	9a 9b       	sbis	0x13, 2	; 19
 3fa:	fe cf       	rjmp	.-4      	; 0x3f8 <main+0x198>
			lcd_clrscr();
 3fc:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_clrscr>
			lcd_gotoxy(0,0);
 400:	60 e0       	ldi	r22, 0x00	; 0
 402:	80 e0       	ldi	r24, 0x00	; 0
 404:	0e 94 aa 00 	call	0x154	; 0x154 <lcd_gotoxy>
			lcd_puts("Pot:2 Esclavo 6\nVolts: ");
 408:	8d e7       	ldi	r24, 0x7D	; 125
 40a:	90 e0       	ldi	r25, 0x00	; 0
 40c:	0e 94 cd 00 	call	0x19a	; 0x19a <lcd_puts>
			xd = value;
 410:	b7 01       	movw	r22, r14
 412:	ff 0c       	add	r15, r15
 414:	88 0b       	sbc	r24, r24
 416:	99 0b       	sbc	r25, r25
 418:	0e 94 c4 04 	call	0x988	; 0x988 <__floatsisf>
			xd*=5.0;
 41c:	20 e0       	ldi	r18, 0x00	; 0
 41e:	30 e0       	ldi	r19, 0x00	; 0
 420:	40 ea       	ldi	r20, 0xA0	; 160
 422:	50 e4       	ldi	r21, 0x40	; 64
 424:	0e 94 55 05 	call	0xaaa	; 0xaaa <__mulsf3>
			xd/=255;
 428:	20 e0       	ldi	r18, 0x00	; 0
 42a:	30 e0       	ldi	r19, 0x00	; 0
 42c:	4f e7       	ldi	r20, 0x7F	; 127
 42e:	53 e4       	ldi	r21, 0x43	; 67
 430:	0e 94 1a 04 	call	0x834	; 0x834 <__divsf3>
 434:	6b 01       	movw	r12, r22
 436:	7c 01       	movw	r14, r24
			lcd_putc((int)xd+'0');
 438:	0e 94 8c 04 	call	0x918	; 0x918 <__fixsfsi>
 43c:	80 e3       	ldi	r24, 0x30	; 48
 43e:	86 0f       	add	r24, r22
 440:	0e 94 b8 00 	call	0x170	; 0x170 <lcd_putc>
			lcd_putc('.');
 444:	8e e2       	ldi	r24, 0x2E	; 46
 446:	0e 94 b8 00 	call	0x170	; 0x170 <lcd_putc>
			xd*=10.0;
 44a:	20 e0       	ldi	r18, 0x00	; 0
 44c:	30 e0       	ldi	r19, 0x00	; 0
 44e:	40 e2       	ldi	r20, 0x20	; 32
 450:	51 e4       	ldi	r21, 0x41	; 65
 452:	c7 01       	movw	r24, r14
 454:	b6 01       	movw	r22, r12
 456:	0e 94 55 05 	call	0xaaa	; 0xaaa <__mulsf3>
 45a:	6b 01       	movw	r12, r22
 45c:	7c 01       	movw	r14, r24
			while (xd>10.0) xd -= 10.0;
 45e:	0a c0       	rjmp	.+20     	; 0x474 <__stack+0x15>
 460:	20 e0       	ldi	r18, 0x00	; 0
 462:	30 e0       	ldi	r19, 0x00	; 0
 464:	40 e2       	ldi	r20, 0x20	; 32
 466:	51 e4       	ldi	r21, 0x41	; 65
 468:	c7 01       	movw	r24, r14
 46a:	b6 01       	movw	r22, r12
 46c:	0e 94 ad 03 	call	0x75a	; 0x75a <__subsf3>
 470:	6b 01       	movw	r12, r22
 472:	7c 01       	movw	r14, r24
 474:	20 e0       	ldi	r18, 0x00	; 0
 476:	30 e0       	ldi	r19, 0x00	; 0
 478:	40 e2       	ldi	r20, 0x20	; 32
 47a:	51 e4       	ldi	r21, 0x41	; 65
 47c:	c7 01       	movw	r24, r14
 47e:	b6 01       	movw	r22, r12
 480:	0e 94 50 05 	call	0xaa0	; 0xaa0 <__gesf2>
 484:	18 16       	cp	r1, r24
 486:	64 f3       	brlt	.-40     	; 0x460 <__stack+0x1>
			lcd_putc((int)xd+'0');
 488:	c7 01       	movw	r24, r14
 48a:	b6 01       	movw	r22, r12
 48c:	0e 94 8c 04 	call	0x918	; 0x918 <__fixsfsi>
 490:	80 e3       	ldi	r24, 0x30	; 48
 492:	86 0f       	add	r24, r22
 494:	0e 94 b8 00 	call	0x170	; 0x170 <lcd_putc>
			xd*=10.0;
 498:	20 e0       	ldi	r18, 0x00	; 0
 49a:	30 e0       	ldi	r19, 0x00	; 0
 49c:	40 e2       	ldi	r20, 0x20	; 32
 49e:	51 e4       	ldi	r21, 0x41	; 65
 4a0:	c7 01       	movw	r24, r14
 4a2:	b6 01       	movw	r22, r12
 4a4:	0e 94 55 05 	call	0xaaa	; 0xaaa <__mulsf3>
 4a8:	6b 01       	movw	r12, r22
 4aa:	7c 01       	movw	r14, r24
			while (xd>10.0) xd -= 10.0;
 4ac:	0a c0       	rjmp	.+20     	; 0x4c2 <__stack+0x63>
 4ae:	20 e0       	ldi	r18, 0x00	; 0
 4b0:	30 e0       	ldi	r19, 0x00	; 0
 4b2:	40 e2       	ldi	r20, 0x20	; 32
 4b4:	51 e4       	ldi	r21, 0x41	; 65
 4b6:	c7 01       	movw	r24, r14
 4b8:	b6 01       	movw	r22, r12
 4ba:	0e 94 ad 03 	call	0x75a	; 0x75a <__subsf3>
 4be:	6b 01       	movw	r12, r22
 4c0:	7c 01       	movw	r14, r24
 4c2:	20 e0       	ldi	r18, 0x00	; 0
 4c4:	30 e0       	ldi	r19, 0x00	; 0
 4c6:	40 e2       	ldi	r20, 0x20	; 32
 4c8:	51 e4       	ldi	r21, 0x41	; 65
 4ca:	c7 01       	movw	r24, r14
 4cc:	b6 01       	movw	r22, r12
 4ce:	0e 94 50 05 	call	0xaa0	; 0xaa0 <__gesf2>
 4d2:	18 16       	cp	r1, r24
 4d4:	64 f3       	brlt	.-40     	; 0x4ae <__stack+0x4f>
			lcd_putc((int)xd+'0');
 4d6:	c7 01       	movw	r24, r14
 4d8:	b6 01       	movw	r22, r12
 4da:	0e 94 8c 04 	call	0x918	; 0x918 <__fixsfsi>
 4de:	80 e3       	ldi	r24, 0x30	; 48
 4e0:	86 0f       	add	r24, r22
 4e2:	0e 94 b8 00 	call	0x170	; 0x170 <lcd_putc>
 4e6:	ce ce       	rjmp	.-612    	; 0x284 <main+0x24>
		
		} else if (!(PINC&(1<<4))) {
 4e8:	9c 99       	sbic	0x13, 4	; 19
 4ea:	97 c0       	rjmp	.+302    	; 0x61a <__stack+0x1bb>
			// pot 1 , esclavo 7
			SS2_Enable;
 4ec:	8b b3       	in	r24, 0x1b	; 27
 4ee:	8f 77       	andi	r24, 0x7F	; 127
 4f0:	8b bb       	out	0x1b, r24	; 27
	
			SPI_Write(0x00);
 4f2:	80 e0       	ldi	r24, 0x00	; 0
 4f4:	0e 94 27 01 	call	0x24e	; 0x24e <SPI_Write>
 4f8:	2f ef       	ldi	r18, 0xFF	; 255
 4fa:	80 e7       	ldi	r24, 0x70	; 112
 4fc:	92 e0       	ldi	r25, 0x02	; 2
 4fe:	21 50       	subi	r18, 0x01	; 1
 500:	80 40       	sbci	r24, 0x00	; 0
 502:	90 40       	sbci	r25, 0x00	; 0
 504:	e1 f7       	brne	.-8      	; 0x4fe <__stack+0x9f>
 506:	00 c0       	rjmp	.+0      	; 0x508 <__stack+0xa9>
 508:	00 00       	nop
			_delay_ms(100);
			value = SPI_Read();
 50a:	0e 94 2b 01 	call	0x256	; 0x256 <SPI_Read>
 50e:	e8 2e       	mov	r14, r24
 510:	f1 2c       	mov	r15, r1
 512:	2f ef       	ldi	r18, 0xFF	; 255
 514:	80 e7       	ldi	r24, 0x70	; 112
 516:	92 e0       	ldi	r25, 0x02	; 2
 518:	21 50       	subi	r18, 0x01	; 1
 51a:	80 40       	sbci	r24, 0x00	; 0
 51c:	90 40       	sbci	r25, 0x00	; 0
 51e:	e1 f7       	brne	.-8      	; 0x518 <__stack+0xb9>
 520:	00 c0       	rjmp	.+0      	; 0x522 <__stack+0xc3>
 522:	00 00       	nop
			_delay_ms(100);
			SS2_Disable;
 524:	8b b3       	in	r24, 0x1b	; 27
 526:	80 68       	ori	r24, 0x80	; 128
 528:	8b bb       	out	0x1b, r24	; 27
			while (!(PINC&(1<<4)));
 52a:	9c 9b       	sbis	0x13, 4	; 19
 52c:	fe cf       	rjmp	.-4      	; 0x52a <__stack+0xcb>
			lcd_clrscr();
 52e:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_clrscr>
			lcd_gotoxy(0,0);
 532:	60 e0       	ldi	r22, 0x00	; 0
 534:	80 e0       	ldi	r24, 0x00	; 0
 536:	0e 94 aa 00 	call	0x154	; 0x154 <lcd_gotoxy>
			lcd_puts("Pot:1 Esclavo 7\nVolts: ");
 53a:	85 e9       	ldi	r24, 0x95	; 149
 53c:	90 e0       	ldi	r25, 0x00	; 0
 53e:	0e 94 cd 00 	call	0x19a	; 0x19a <lcd_puts>
			xd = value;
 542:	b7 01       	movw	r22, r14
 544:	ff 0c       	add	r15, r15
 546:	88 0b       	sbc	r24, r24
 548:	99 0b       	sbc	r25, r25
 54a:	0e 94 c4 04 	call	0x988	; 0x988 <__floatsisf>
			xd*=5.0;
 54e:	20 e0       	ldi	r18, 0x00	; 0
 550:	30 e0       	ldi	r19, 0x00	; 0
 552:	40 ea       	ldi	r20, 0xA0	; 160
 554:	50 e4       	ldi	r21, 0x40	; 64
 556:	0e 94 55 05 	call	0xaaa	; 0xaaa <__mulsf3>
			xd/=255;
 55a:	20 e0       	ldi	r18, 0x00	; 0
 55c:	30 e0       	ldi	r19, 0x00	; 0
 55e:	4f e7       	ldi	r20, 0x7F	; 127
 560:	53 e4       	ldi	r21, 0x43	; 67
 562:	0e 94 1a 04 	call	0x834	; 0x834 <__divsf3>
 566:	6b 01       	movw	r12, r22
 568:	7c 01       	movw	r14, r24
			lcd_putc((int)xd+'0');
 56a:	0e 94 8c 04 	call	0x918	; 0x918 <__fixsfsi>
 56e:	80 e3       	ldi	r24, 0x30	; 48
 570:	86 0f       	add	r24, r22
 572:	0e 94 b8 00 	call	0x170	; 0x170 <lcd_putc>
			lcd_putc('.');
 576:	8e e2       	ldi	r24, 0x2E	; 46
 578:	0e 94 b8 00 	call	0x170	; 0x170 <lcd_putc>
			xd*=10.0;
 57c:	20 e0       	ldi	r18, 0x00	; 0
 57e:	30 e0       	ldi	r19, 0x00	; 0
 580:	40 e2       	ldi	r20, 0x20	; 32
 582:	51 e4       	ldi	r21, 0x41	; 65
 584:	c7 01       	movw	r24, r14
 586:	b6 01       	movw	r22, r12
 588:	0e 94 55 05 	call	0xaaa	; 0xaaa <__mulsf3>
 58c:	6b 01       	movw	r12, r22
 58e:	7c 01       	movw	r14, r24
			while (xd>10.0) xd -= 10.0;
 590:	0a c0       	rjmp	.+20     	; 0x5a6 <__stack+0x147>
 592:	20 e0       	ldi	r18, 0x00	; 0
 594:	30 e0       	ldi	r19, 0x00	; 0
 596:	40 e2       	ldi	r20, 0x20	; 32
 598:	51 e4       	ldi	r21, 0x41	; 65
 59a:	c7 01       	movw	r24, r14
 59c:	b6 01       	movw	r22, r12
 59e:	0e 94 ad 03 	call	0x75a	; 0x75a <__subsf3>
 5a2:	6b 01       	movw	r12, r22
 5a4:	7c 01       	movw	r14, r24
 5a6:	20 e0       	ldi	r18, 0x00	; 0
 5a8:	30 e0       	ldi	r19, 0x00	; 0
 5aa:	40 e2       	ldi	r20, 0x20	; 32
 5ac:	51 e4       	ldi	r21, 0x41	; 65
 5ae:	c7 01       	movw	r24, r14
 5b0:	b6 01       	movw	r22, r12
 5b2:	0e 94 50 05 	call	0xaa0	; 0xaa0 <__gesf2>
 5b6:	18 16       	cp	r1, r24
 5b8:	64 f3       	brlt	.-40     	; 0x592 <__stack+0x133>
			lcd_putc((int)xd+'0');
 5ba:	c7 01       	movw	r24, r14
 5bc:	b6 01       	movw	r22, r12
 5be:	0e 94 8c 04 	call	0x918	; 0x918 <__fixsfsi>
 5c2:	80 e3       	ldi	r24, 0x30	; 48
 5c4:	86 0f       	add	r24, r22
 5c6:	0e 94 b8 00 	call	0x170	; 0x170 <lcd_putc>
			xd*=10.0;
 5ca:	20 e0       	ldi	r18, 0x00	; 0
 5cc:	30 e0       	ldi	r19, 0x00	; 0
 5ce:	40 e2       	ldi	r20, 0x20	; 32
 5d0:	51 e4       	ldi	r21, 0x41	; 65
 5d2:	c7 01       	movw	r24, r14
 5d4:	b6 01       	movw	r22, r12
 5d6:	0e 94 55 05 	call	0xaaa	; 0xaaa <__mulsf3>
 5da:	6b 01       	movw	r12, r22
 5dc:	7c 01       	movw	r14, r24
			while (xd>10.0) xd -= 10.0;
 5de:	0a c0       	rjmp	.+20     	; 0x5f4 <__stack+0x195>
 5e0:	20 e0       	ldi	r18, 0x00	; 0
 5e2:	30 e0       	ldi	r19, 0x00	; 0
 5e4:	40 e2       	ldi	r20, 0x20	; 32
 5e6:	51 e4       	ldi	r21, 0x41	; 65
 5e8:	c7 01       	movw	r24, r14
 5ea:	b6 01       	movw	r22, r12
 5ec:	0e 94 ad 03 	call	0x75a	; 0x75a <__subsf3>
 5f0:	6b 01       	movw	r12, r22
 5f2:	7c 01       	movw	r14, r24
 5f4:	20 e0       	ldi	r18, 0x00	; 0
 5f6:	30 e0       	ldi	r19, 0x00	; 0
 5f8:	40 e2       	ldi	r20, 0x20	; 32
 5fa:	51 e4       	ldi	r21, 0x41	; 65
 5fc:	c7 01       	movw	r24, r14
 5fe:	b6 01       	movw	r22, r12
 600:	0e 94 50 05 	call	0xaa0	; 0xaa0 <__gesf2>
 604:	18 16       	cp	r1, r24
 606:	64 f3       	brlt	.-40     	; 0x5e0 <__stack+0x181>
			lcd_putc((int)xd+'0');
 608:	c7 01       	movw	r24, r14
 60a:	b6 01       	movw	r22, r12
 60c:	0e 94 8c 04 	call	0x918	; 0x918 <__fixsfsi>
 610:	80 e3       	ldi	r24, 0x30	; 48
 612:	86 0f       	add	r24, r22
 614:	0e 94 b8 00 	call	0x170	; 0x170 <lcd_putc>
 618:	35 ce       	rjmp	.-918    	; 0x284 <main+0x24>

		} else if (!(PINC&(1<<6))) {
 61a:	9e 99       	sbic	0x13, 6	; 19
 61c:	97 c0       	rjmp	.+302    	; 0x74c <__stack+0x2ed>
			// pot 2, esclavo 7
			SS2_Enable;
 61e:	8b b3       	in	r24, 0x1b	; 27
 620:	8f 77       	andi	r24, 0x7F	; 127
 622:	8b bb       	out	0x1b, r24	; 27
		
			SPI_Write(0x01);
 624:	81 e0       	ldi	r24, 0x01	; 1
 626:	0e 94 27 01 	call	0x24e	; 0x24e <SPI_Write>
 62a:	2f ef       	ldi	r18, 0xFF	; 255
 62c:	80 e7       	ldi	r24, 0x70	; 112
 62e:	92 e0       	ldi	r25, 0x02	; 2
 630:	21 50       	subi	r18, 0x01	; 1
 632:	80 40       	sbci	r24, 0x00	; 0
 634:	90 40       	sbci	r25, 0x00	; 0
 636:	e1 f7       	brne	.-8      	; 0x630 <__stack+0x1d1>
 638:	00 c0       	rjmp	.+0      	; 0x63a <__stack+0x1db>
 63a:	00 00       	nop
			_delay_ms(100);
			value = SPI_Read();
 63c:	0e 94 2b 01 	call	0x256	; 0x256 <SPI_Read>
 640:	e8 2e       	mov	r14, r24
 642:	f1 2c       	mov	r15, r1
 644:	2f ef       	ldi	r18, 0xFF	; 255
 646:	80 e7       	ldi	r24, 0x70	; 112
 648:	92 e0       	ldi	r25, 0x02	; 2
 64a:	21 50       	subi	r18, 0x01	; 1
 64c:	80 40       	sbci	r24, 0x00	; 0
 64e:	90 40       	sbci	r25, 0x00	; 0
 650:	e1 f7       	brne	.-8      	; 0x64a <__stack+0x1eb>
 652:	00 c0       	rjmp	.+0      	; 0x654 <__stack+0x1f5>
 654:	00 00       	nop
			_delay_ms(100);
			SS2_Disable;
 656:	8b b3       	in	r24, 0x1b	; 27
 658:	80 68       	ori	r24, 0x80	; 128
 65a:	8b bb       	out	0x1b, r24	; 27
			while (!(PINC&(1<<6)));
 65c:	9e 9b       	sbis	0x13, 6	; 19
 65e:	fe cf       	rjmp	.-4      	; 0x65c <__stack+0x1fd>
			lcd_clrscr();
 660:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_clrscr>
			lcd_gotoxy(0,0);
 664:	60 e0       	ldi	r22, 0x00	; 0
 666:	80 e0       	ldi	r24, 0x00	; 0
 668:	0e 94 aa 00 	call	0x154	; 0x154 <lcd_gotoxy>
			lcd_puts("Pot:2 Esclavo 7\nVolts: ");
 66c:	8d ea       	ldi	r24, 0xAD	; 173
 66e:	90 e0       	ldi	r25, 0x00	; 0
 670:	0e 94 cd 00 	call	0x19a	; 0x19a <lcd_puts>
			xd = value;
 674:	b7 01       	movw	r22, r14
 676:	ff 0c       	add	r15, r15
 678:	88 0b       	sbc	r24, r24
 67a:	99 0b       	sbc	r25, r25
 67c:	0e 94 c4 04 	call	0x988	; 0x988 <__floatsisf>
			xd*=5.0;
 680:	20 e0       	ldi	r18, 0x00	; 0
 682:	30 e0       	ldi	r19, 0x00	; 0
 684:	40 ea       	ldi	r20, 0xA0	; 160
 686:	50 e4       	ldi	r21, 0x40	; 64
 688:	0e 94 55 05 	call	0xaaa	; 0xaaa <__mulsf3>
			xd/=255;
 68c:	20 e0       	ldi	r18, 0x00	; 0
 68e:	30 e0       	ldi	r19, 0x00	; 0
 690:	4f e7       	ldi	r20, 0x7F	; 127
 692:	53 e4       	ldi	r21, 0x43	; 67
 694:	0e 94 1a 04 	call	0x834	; 0x834 <__divsf3>
 698:	6b 01       	movw	r12, r22
 69a:	7c 01       	movw	r14, r24
			lcd_putc((int)xd+'0');
 69c:	0e 94 8c 04 	call	0x918	; 0x918 <__fixsfsi>
 6a0:	80 e3       	ldi	r24, 0x30	; 48
 6a2:	86 0f       	add	r24, r22
 6a4:	0e 94 b8 00 	call	0x170	; 0x170 <lcd_putc>
			lcd_putc('.');
 6a8:	8e e2       	ldi	r24, 0x2E	; 46
 6aa:	0e 94 b8 00 	call	0x170	; 0x170 <lcd_putc>
			xd*=10.0;
 6ae:	20 e0       	ldi	r18, 0x00	; 0
 6b0:	30 e0       	ldi	r19, 0x00	; 0
 6b2:	40 e2       	ldi	r20, 0x20	; 32
 6b4:	51 e4       	ldi	r21, 0x41	; 65
 6b6:	c7 01       	movw	r24, r14
 6b8:	b6 01       	movw	r22, r12
 6ba:	0e 94 55 05 	call	0xaaa	; 0xaaa <__mulsf3>
 6be:	6b 01       	movw	r12, r22
 6c0:	7c 01       	movw	r14, r24
			while (xd>10.0) xd -= 10.0;
 6c2:	0a c0       	rjmp	.+20     	; 0x6d8 <__stack+0x279>
 6c4:	20 e0       	ldi	r18, 0x00	; 0
 6c6:	30 e0       	ldi	r19, 0x00	; 0
 6c8:	40 e2       	ldi	r20, 0x20	; 32
 6ca:	51 e4       	ldi	r21, 0x41	; 65
 6cc:	c7 01       	movw	r24, r14
 6ce:	b6 01       	movw	r22, r12
 6d0:	0e 94 ad 03 	call	0x75a	; 0x75a <__subsf3>
 6d4:	6b 01       	movw	r12, r22
 6d6:	7c 01       	movw	r14, r24
 6d8:	20 e0       	ldi	r18, 0x00	; 0
 6da:	30 e0       	ldi	r19, 0x00	; 0
 6dc:	40 e2       	ldi	r20, 0x20	; 32
 6de:	51 e4       	ldi	r21, 0x41	; 65
 6e0:	c7 01       	movw	r24, r14
 6e2:	b6 01       	movw	r22, r12
 6e4:	0e 94 50 05 	call	0xaa0	; 0xaa0 <__gesf2>
 6e8:	18 16       	cp	r1, r24
 6ea:	64 f3       	brlt	.-40     	; 0x6c4 <__stack+0x265>
			lcd_putc((int)xd+'0');
 6ec:	c7 01       	movw	r24, r14
 6ee:	b6 01       	movw	r22, r12
 6f0:	0e 94 8c 04 	call	0x918	; 0x918 <__fixsfsi>
 6f4:	80 e3       	ldi	r24, 0x30	; 48
 6f6:	86 0f       	add	r24, r22
 6f8:	0e 94 b8 00 	call	0x170	; 0x170 <lcd_putc>
			xd*=10.0;
 6fc:	20 e0       	ldi	r18, 0x00	; 0
 6fe:	30 e0       	ldi	r19, 0x00	; 0
 700:	40 e2       	ldi	r20, 0x20	; 32
 702:	51 e4       	ldi	r21, 0x41	; 65
 704:	c7 01       	movw	r24, r14
 706:	b6 01       	movw	r22, r12
 708:	0e 94 55 05 	call	0xaaa	; 0xaaa <__mulsf3>
 70c:	6b 01       	movw	r12, r22
 70e:	7c 01       	movw	r14, r24
			while (xd>10.0) xd -= 10.0;
 710:	0a c0       	rjmp	.+20     	; 0x726 <__stack+0x2c7>
 712:	20 e0       	ldi	r18, 0x00	; 0
 714:	30 e0       	ldi	r19, 0x00	; 0
 716:	40 e2       	ldi	r20, 0x20	; 32
 718:	51 e4       	ldi	r21, 0x41	; 65
 71a:	c7 01       	movw	r24, r14
 71c:	b6 01       	movw	r22, r12
 71e:	0e 94 ad 03 	call	0x75a	; 0x75a <__subsf3>
 722:	6b 01       	movw	r12, r22
 724:	7c 01       	movw	r14, r24
 726:	20 e0       	ldi	r18, 0x00	; 0
 728:	30 e0       	ldi	r19, 0x00	; 0
 72a:	40 e2       	ldi	r20, 0x20	; 32
 72c:	51 e4       	ldi	r21, 0x41	; 65
 72e:	c7 01       	movw	r24, r14
 730:	b6 01       	movw	r22, r12
 732:	0e 94 50 05 	call	0xaa0	; 0xaa0 <__gesf2>
 736:	18 16       	cp	r1, r24
 738:	64 f3       	brlt	.-40     	; 0x712 <__stack+0x2b3>
			lcd_putc((int)xd+'0');
 73a:	c7 01       	movw	r24, r14
 73c:	b6 01       	movw	r22, r12
 73e:	0e 94 8c 04 	call	0x918	; 0x918 <__fixsfsi>
 742:	80 e3       	ldi	r24, 0x30	; 48
 744:	86 0f       	add	r24, r22
 746:	0e 94 b8 00 	call	0x170	; 0x170 <lcd_putc>
 74a:	9c cd       	rjmp	.-1224   	; 0x284 <main+0x24>
		
		} else {
				SS1_Disable;
 74c:	8b b3       	in	r24, 0x1b	; 27
 74e:	80 64       	ori	r24, 0x40	; 64
 750:	8b bb       	out	0x1b, r24	; 27
				SS2_Disable;
 752:	8b b3       	in	r24, 0x1b	; 27
 754:	80 68       	ori	r24, 0x80	; 128
 756:	8b bb       	out	0x1b, r24	; 27
 758:	95 cd       	rjmp	.-1238   	; 0x284 <main+0x24>

0000075a <__subsf3>:
 75a:	50 58       	subi	r21, 0x80	; 128

0000075c <__addsf3>:
 75c:	bb 27       	eor	r27, r27
 75e:	aa 27       	eor	r26, r26
 760:	0e 94 c5 03 	call	0x78a	; 0x78a <__addsf3x>
 764:	0c 94 16 05 	jmp	0xa2c	; 0xa2c <__fp_round>
 768:	0e 94 08 05 	call	0xa10	; 0xa10 <__fp_pscA>
 76c:	38 f0       	brcs	.+14     	; 0x77c <__addsf3+0x20>
 76e:	0e 94 0f 05 	call	0xa1e	; 0xa1e <__fp_pscB>
 772:	20 f0       	brcs	.+8      	; 0x77c <__addsf3+0x20>
 774:	39 f4       	brne	.+14     	; 0x784 <__addsf3+0x28>
 776:	9f 3f       	cpi	r25, 0xFF	; 255
 778:	19 f4       	brne	.+6      	; 0x780 <__addsf3+0x24>
 77a:	26 f4       	brtc	.+8      	; 0x784 <__addsf3+0x28>
 77c:	0c 94 05 05 	jmp	0xa0a	; 0xa0a <__fp_nan>
 780:	0e f4       	brtc	.+2      	; 0x784 <__addsf3+0x28>
 782:	e0 95       	com	r30
 784:	e7 fb       	bst	r30, 7
 786:	0c 94 ff 04 	jmp	0x9fe	; 0x9fe <__fp_inf>

0000078a <__addsf3x>:
 78a:	e9 2f       	mov	r30, r25
 78c:	0e 94 27 05 	call	0xa4e	; 0xa4e <__fp_split3>
 790:	58 f3       	brcs	.-42     	; 0x768 <__addsf3+0xc>
 792:	ba 17       	cp	r27, r26
 794:	62 07       	cpc	r22, r18
 796:	73 07       	cpc	r23, r19
 798:	84 07       	cpc	r24, r20
 79a:	95 07       	cpc	r25, r21
 79c:	20 f0       	brcs	.+8      	; 0x7a6 <__addsf3x+0x1c>
 79e:	79 f4       	brne	.+30     	; 0x7be <__addsf3x+0x34>
 7a0:	a6 f5       	brtc	.+104    	; 0x80a <__addsf3x+0x80>
 7a2:	0c 94 49 05 	jmp	0xa92	; 0xa92 <__fp_zero>
 7a6:	0e f4       	brtc	.+2      	; 0x7aa <__addsf3x+0x20>
 7a8:	e0 95       	com	r30
 7aa:	0b 2e       	mov	r0, r27
 7ac:	ba 2f       	mov	r27, r26
 7ae:	a0 2d       	mov	r26, r0
 7b0:	0b 01       	movw	r0, r22
 7b2:	b9 01       	movw	r22, r18
 7b4:	90 01       	movw	r18, r0
 7b6:	0c 01       	movw	r0, r24
 7b8:	ca 01       	movw	r24, r20
 7ba:	a0 01       	movw	r20, r0
 7bc:	11 24       	eor	r1, r1
 7be:	ff 27       	eor	r31, r31
 7c0:	59 1b       	sub	r21, r25
 7c2:	99 f0       	breq	.+38     	; 0x7ea <__addsf3x+0x60>
 7c4:	59 3f       	cpi	r21, 0xF9	; 249
 7c6:	50 f4       	brcc	.+20     	; 0x7dc <__addsf3x+0x52>
 7c8:	50 3e       	cpi	r21, 0xE0	; 224
 7ca:	68 f1       	brcs	.+90     	; 0x826 <__addsf3x+0x9c>
 7cc:	1a 16       	cp	r1, r26
 7ce:	f0 40       	sbci	r31, 0x00	; 0
 7d0:	a2 2f       	mov	r26, r18
 7d2:	23 2f       	mov	r18, r19
 7d4:	34 2f       	mov	r19, r20
 7d6:	44 27       	eor	r20, r20
 7d8:	58 5f       	subi	r21, 0xF8	; 248
 7da:	f3 cf       	rjmp	.-26     	; 0x7c2 <__addsf3x+0x38>
 7dc:	46 95       	lsr	r20
 7de:	37 95       	ror	r19
 7e0:	27 95       	ror	r18
 7e2:	a7 95       	ror	r26
 7e4:	f0 40       	sbci	r31, 0x00	; 0
 7e6:	53 95       	inc	r21
 7e8:	c9 f7       	brne	.-14     	; 0x7dc <__addsf3x+0x52>
 7ea:	7e f4       	brtc	.+30     	; 0x80a <__addsf3x+0x80>
 7ec:	1f 16       	cp	r1, r31
 7ee:	ba 0b       	sbc	r27, r26
 7f0:	62 0b       	sbc	r22, r18
 7f2:	73 0b       	sbc	r23, r19
 7f4:	84 0b       	sbc	r24, r20
 7f6:	ba f0       	brmi	.+46     	; 0x826 <__addsf3x+0x9c>
 7f8:	91 50       	subi	r25, 0x01	; 1
 7fa:	a1 f0       	breq	.+40     	; 0x824 <__addsf3x+0x9a>
 7fc:	ff 0f       	add	r31, r31
 7fe:	bb 1f       	adc	r27, r27
 800:	66 1f       	adc	r22, r22
 802:	77 1f       	adc	r23, r23
 804:	88 1f       	adc	r24, r24
 806:	c2 f7       	brpl	.-16     	; 0x7f8 <__addsf3x+0x6e>
 808:	0e c0       	rjmp	.+28     	; 0x826 <__addsf3x+0x9c>
 80a:	ba 0f       	add	r27, r26
 80c:	62 1f       	adc	r22, r18
 80e:	73 1f       	adc	r23, r19
 810:	84 1f       	adc	r24, r20
 812:	48 f4       	brcc	.+18     	; 0x826 <__addsf3x+0x9c>
 814:	87 95       	ror	r24
 816:	77 95       	ror	r23
 818:	67 95       	ror	r22
 81a:	b7 95       	ror	r27
 81c:	f7 95       	ror	r31
 81e:	9e 3f       	cpi	r25, 0xFE	; 254
 820:	08 f0       	brcs	.+2      	; 0x824 <__addsf3x+0x9a>
 822:	b0 cf       	rjmp	.-160    	; 0x784 <__addsf3+0x28>
 824:	93 95       	inc	r25
 826:	88 0f       	add	r24, r24
 828:	08 f0       	brcs	.+2      	; 0x82c <__addsf3x+0xa2>
 82a:	99 27       	eor	r25, r25
 82c:	ee 0f       	add	r30, r30
 82e:	97 95       	ror	r25
 830:	87 95       	ror	r24
 832:	08 95       	ret

00000834 <__divsf3>:
 834:	0e 94 2e 04 	call	0x85c	; 0x85c <__divsf3x>
 838:	0c 94 16 05 	jmp	0xa2c	; 0xa2c <__fp_round>
 83c:	0e 94 0f 05 	call	0xa1e	; 0xa1e <__fp_pscB>
 840:	58 f0       	brcs	.+22     	; 0x858 <__divsf3+0x24>
 842:	0e 94 08 05 	call	0xa10	; 0xa10 <__fp_pscA>
 846:	40 f0       	brcs	.+16     	; 0x858 <__divsf3+0x24>
 848:	29 f4       	brne	.+10     	; 0x854 <__divsf3+0x20>
 84a:	5f 3f       	cpi	r21, 0xFF	; 255
 84c:	29 f0       	breq	.+10     	; 0x858 <__divsf3+0x24>
 84e:	0c 94 ff 04 	jmp	0x9fe	; 0x9fe <__fp_inf>
 852:	51 11       	cpse	r21, r1
 854:	0c 94 4a 05 	jmp	0xa94	; 0xa94 <__fp_szero>
 858:	0c 94 05 05 	jmp	0xa0a	; 0xa0a <__fp_nan>

0000085c <__divsf3x>:
 85c:	0e 94 27 05 	call	0xa4e	; 0xa4e <__fp_split3>
 860:	68 f3       	brcs	.-38     	; 0x83c <__divsf3+0x8>

00000862 <__divsf3_pse>:
 862:	99 23       	and	r25, r25
 864:	b1 f3       	breq	.-20     	; 0x852 <__divsf3+0x1e>
 866:	55 23       	and	r21, r21
 868:	91 f3       	breq	.-28     	; 0x84e <__divsf3+0x1a>
 86a:	95 1b       	sub	r25, r21
 86c:	55 0b       	sbc	r21, r21
 86e:	bb 27       	eor	r27, r27
 870:	aa 27       	eor	r26, r26
 872:	62 17       	cp	r22, r18
 874:	73 07       	cpc	r23, r19
 876:	84 07       	cpc	r24, r20
 878:	38 f0       	brcs	.+14     	; 0x888 <__divsf3_pse+0x26>
 87a:	9f 5f       	subi	r25, 0xFF	; 255
 87c:	5f 4f       	sbci	r21, 0xFF	; 255
 87e:	22 0f       	add	r18, r18
 880:	33 1f       	adc	r19, r19
 882:	44 1f       	adc	r20, r20
 884:	aa 1f       	adc	r26, r26
 886:	a9 f3       	breq	.-22     	; 0x872 <__divsf3_pse+0x10>
 888:	35 d0       	rcall	.+106    	; 0x8f4 <__divsf3_pse+0x92>
 88a:	0e 2e       	mov	r0, r30
 88c:	3a f0       	brmi	.+14     	; 0x89c <__divsf3_pse+0x3a>
 88e:	e0 e8       	ldi	r30, 0x80	; 128
 890:	32 d0       	rcall	.+100    	; 0x8f6 <__divsf3_pse+0x94>
 892:	91 50       	subi	r25, 0x01	; 1
 894:	50 40       	sbci	r21, 0x00	; 0
 896:	e6 95       	lsr	r30
 898:	00 1c       	adc	r0, r0
 89a:	ca f7       	brpl	.-14     	; 0x88e <__divsf3_pse+0x2c>
 89c:	2b d0       	rcall	.+86     	; 0x8f4 <__divsf3_pse+0x92>
 89e:	fe 2f       	mov	r31, r30
 8a0:	29 d0       	rcall	.+82     	; 0x8f4 <__divsf3_pse+0x92>
 8a2:	66 0f       	add	r22, r22
 8a4:	77 1f       	adc	r23, r23
 8a6:	88 1f       	adc	r24, r24
 8a8:	bb 1f       	adc	r27, r27
 8aa:	26 17       	cp	r18, r22
 8ac:	37 07       	cpc	r19, r23
 8ae:	48 07       	cpc	r20, r24
 8b0:	ab 07       	cpc	r26, r27
 8b2:	b0 e8       	ldi	r27, 0x80	; 128
 8b4:	09 f0       	breq	.+2      	; 0x8b8 <__divsf3_pse+0x56>
 8b6:	bb 0b       	sbc	r27, r27
 8b8:	80 2d       	mov	r24, r0
 8ba:	bf 01       	movw	r22, r30
 8bc:	ff 27       	eor	r31, r31
 8be:	93 58       	subi	r25, 0x83	; 131
 8c0:	5f 4f       	sbci	r21, 0xFF	; 255
 8c2:	3a f0       	brmi	.+14     	; 0x8d2 <__divsf3_pse+0x70>
 8c4:	9e 3f       	cpi	r25, 0xFE	; 254
 8c6:	51 05       	cpc	r21, r1
 8c8:	78 f0       	brcs	.+30     	; 0x8e8 <__divsf3_pse+0x86>
 8ca:	0c 94 ff 04 	jmp	0x9fe	; 0x9fe <__fp_inf>
 8ce:	0c 94 4a 05 	jmp	0xa94	; 0xa94 <__fp_szero>
 8d2:	5f 3f       	cpi	r21, 0xFF	; 255
 8d4:	e4 f3       	brlt	.-8      	; 0x8ce <__divsf3_pse+0x6c>
 8d6:	98 3e       	cpi	r25, 0xE8	; 232
 8d8:	d4 f3       	brlt	.-12     	; 0x8ce <__divsf3_pse+0x6c>
 8da:	86 95       	lsr	r24
 8dc:	77 95       	ror	r23
 8de:	67 95       	ror	r22
 8e0:	b7 95       	ror	r27
 8e2:	f7 95       	ror	r31
 8e4:	9f 5f       	subi	r25, 0xFF	; 255
 8e6:	c9 f7       	brne	.-14     	; 0x8da <__divsf3_pse+0x78>
 8e8:	88 0f       	add	r24, r24
 8ea:	91 1d       	adc	r25, r1
 8ec:	96 95       	lsr	r25
 8ee:	87 95       	ror	r24
 8f0:	97 f9       	bld	r25, 7
 8f2:	08 95       	ret
 8f4:	e1 e0       	ldi	r30, 0x01	; 1
 8f6:	66 0f       	add	r22, r22
 8f8:	77 1f       	adc	r23, r23
 8fa:	88 1f       	adc	r24, r24
 8fc:	bb 1f       	adc	r27, r27
 8fe:	62 17       	cp	r22, r18
 900:	73 07       	cpc	r23, r19
 902:	84 07       	cpc	r24, r20
 904:	ba 07       	cpc	r27, r26
 906:	20 f0       	brcs	.+8      	; 0x910 <__divsf3_pse+0xae>
 908:	62 1b       	sub	r22, r18
 90a:	73 0b       	sbc	r23, r19
 90c:	84 0b       	sbc	r24, r20
 90e:	ba 0b       	sbc	r27, r26
 910:	ee 1f       	adc	r30, r30
 912:	88 f7       	brcc	.-30     	; 0x8f6 <__divsf3_pse+0x94>
 914:	e0 95       	com	r30
 916:	08 95       	ret

00000918 <__fixsfsi>:
 918:	0e 94 93 04 	call	0x926	; 0x926 <__fixunssfsi>
 91c:	68 94       	set
 91e:	b1 11       	cpse	r27, r1
 920:	0c 94 4a 05 	jmp	0xa94	; 0xa94 <__fp_szero>
 924:	08 95       	ret

00000926 <__fixunssfsi>:
 926:	0e 94 2f 05 	call	0xa5e	; 0xa5e <__fp_splitA>
 92a:	88 f0       	brcs	.+34     	; 0x94e <__fixunssfsi+0x28>
 92c:	9f 57       	subi	r25, 0x7F	; 127
 92e:	98 f0       	brcs	.+38     	; 0x956 <__fixunssfsi+0x30>
 930:	b9 2f       	mov	r27, r25
 932:	99 27       	eor	r25, r25
 934:	b7 51       	subi	r27, 0x17	; 23
 936:	b0 f0       	brcs	.+44     	; 0x964 <__fixunssfsi+0x3e>
 938:	e1 f0       	breq	.+56     	; 0x972 <__fixunssfsi+0x4c>
 93a:	66 0f       	add	r22, r22
 93c:	77 1f       	adc	r23, r23
 93e:	88 1f       	adc	r24, r24
 940:	99 1f       	adc	r25, r25
 942:	1a f0       	brmi	.+6      	; 0x94a <__fixunssfsi+0x24>
 944:	ba 95       	dec	r27
 946:	c9 f7       	brne	.-14     	; 0x93a <__fixunssfsi+0x14>
 948:	14 c0       	rjmp	.+40     	; 0x972 <__fixunssfsi+0x4c>
 94a:	b1 30       	cpi	r27, 0x01	; 1
 94c:	91 f0       	breq	.+36     	; 0x972 <__fixunssfsi+0x4c>
 94e:	0e 94 49 05 	call	0xa92	; 0xa92 <__fp_zero>
 952:	b1 e0       	ldi	r27, 0x01	; 1
 954:	08 95       	ret
 956:	0c 94 49 05 	jmp	0xa92	; 0xa92 <__fp_zero>
 95a:	67 2f       	mov	r22, r23
 95c:	78 2f       	mov	r23, r24
 95e:	88 27       	eor	r24, r24
 960:	b8 5f       	subi	r27, 0xF8	; 248
 962:	39 f0       	breq	.+14     	; 0x972 <__fixunssfsi+0x4c>
 964:	b9 3f       	cpi	r27, 0xF9	; 249
 966:	cc f3       	brlt	.-14     	; 0x95a <__fixunssfsi+0x34>
 968:	86 95       	lsr	r24
 96a:	77 95       	ror	r23
 96c:	67 95       	ror	r22
 96e:	b3 95       	inc	r27
 970:	d9 f7       	brne	.-10     	; 0x968 <__fixunssfsi+0x42>
 972:	3e f4       	brtc	.+14     	; 0x982 <__fixunssfsi+0x5c>
 974:	90 95       	com	r25
 976:	80 95       	com	r24
 978:	70 95       	com	r23
 97a:	61 95       	neg	r22
 97c:	7f 4f       	sbci	r23, 0xFF	; 255
 97e:	8f 4f       	sbci	r24, 0xFF	; 255
 980:	9f 4f       	sbci	r25, 0xFF	; 255
 982:	08 95       	ret

00000984 <__floatunsisf>:
 984:	e8 94       	clt
 986:	09 c0       	rjmp	.+18     	; 0x99a <__floatsisf+0x12>

00000988 <__floatsisf>:
 988:	97 fb       	bst	r25, 7
 98a:	3e f4       	brtc	.+14     	; 0x99a <__floatsisf+0x12>
 98c:	90 95       	com	r25
 98e:	80 95       	com	r24
 990:	70 95       	com	r23
 992:	61 95       	neg	r22
 994:	7f 4f       	sbci	r23, 0xFF	; 255
 996:	8f 4f       	sbci	r24, 0xFF	; 255
 998:	9f 4f       	sbci	r25, 0xFF	; 255
 99a:	99 23       	and	r25, r25
 99c:	a9 f0       	breq	.+42     	; 0x9c8 <__floatsisf+0x40>
 99e:	f9 2f       	mov	r31, r25
 9a0:	96 e9       	ldi	r25, 0x96	; 150
 9a2:	bb 27       	eor	r27, r27
 9a4:	93 95       	inc	r25
 9a6:	f6 95       	lsr	r31
 9a8:	87 95       	ror	r24
 9aa:	77 95       	ror	r23
 9ac:	67 95       	ror	r22
 9ae:	b7 95       	ror	r27
 9b0:	f1 11       	cpse	r31, r1
 9b2:	f8 cf       	rjmp	.-16     	; 0x9a4 <__floatsisf+0x1c>
 9b4:	fa f4       	brpl	.+62     	; 0x9f4 <__floatsisf+0x6c>
 9b6:	bb 0f       	add	r27, r27
 9b8:	11 f4       	brne	.+4      	; 0x9be <__floatsisf+0x36>
 9ba:	60 ff       	sbrs	r22, 0
 9bc:	1b c0       	rjmp	.+54     	; 0x9f4 <__floatsisf+0x6c>
 9be:	6f 5f       	subi	r22, 0xFF	; 255
 9c0:	7f 4f       	sbci	r23, 0xFF	; 255
 9c2:	8f 4f       	sbci	r24, 0xFF	; 255
 9c4:	9f 4f       	sbci	r25, 0xFF	; 255
 9c6:	16 c0       	rjmp	.+44     	; 0x9f4 <__floatsisf+0x6c>
 9c8:	88 23       	and	r24, r24
 9ca:	11 f0       	breq	.+4      	; 0x9d0 <__floatsisf+0x48>
 9cc:	96 e9       	ldi	r25, 0x96	; 150
 9ce:	11 c0       	rjmp	.+34     	; 0x9f2 <__floatsisf+0x6a>
 9d0:	77 23       	and	r23, r23
 9d2:	21 f0       	breq	.+8      	; 0x9dc <__floatsisf+0x54>
 9d4:	9e e8       	ldi	r25, 0x8E	; 142
 9d6:	87 2f       	mov	r24, r23
 9d8:	76 2f       	mov	r23, r22
 9da:	05 c0       	rjmp	.+10     	; 0x9e6 <__floatsisf+0x5e>
 9dc:	66 23       	and	r22, r22
 9de:	71 f0       	breq	.+28     	; 0x9fc <__floatsisf+0x74>
 9e0:	96 e8       	ldi	r25, 0x86	; 134
 9e2:	86 2f       	mov	r24, r22
 9e4:	70 e0       	ldi	r23, 0x00	; 0
 9e6:	60 e0       	ldi	r22, 0x00	; 0
 9e8:	2a f0       	brmi	.+10     	; 0x9f4 <__floatsisf+0x6c>
 9ea:	9a 95       	dec	r25
 9ec:	66 0f       	add	r22, r22
 9ee:	77 1f       	adc	r23, r23
 9f0:	88 1f       	adc	r24, r24
 9f2:	da f7       	brpl	.-10     	; 0x9ea <__floatsisf+0x62>
 9f4:	88 0f       	add	r24, r24
 9f6:	96 95       	lsr	r25
 9f8:	87 95       	ror	r24
 9fa:	97 f9       	bld	r25, 7
 9fc:	08 95       	ret

000009fe <__fp_inf>:
 9fe:	97 f9       	bld	r25, 7
 a00:	9f 67       	ori	r25, 0x7F	; 127
 a02:	80 e8       	ldi	r24, 0x80	; 128
 a04:	70 e0       	ldi	r23, 0x00	; 0
 a06:	60 e0       	ldi	r22, 0x00	; 0
 a08:	08 95       	ret

00000a0a <__fp_nan>:
 a0a:	9f ef       	ldi	r25, 0xFF	; 255
 a0c:	80 ec       	ldi	r24, 0xC0	; 192
 a0e:	08 95       	ret

00000a10 <__fp_pscA>:
 a10:	00 24       	eor	r0, r0
 a12:	0a 94       	dec	r0
 a14:	16 16       	cp	r1, r22
 a16:	17 06       	cpc	r1, r23
 a18:	18 06       	cpc	r1, r24
 a1a:	09 06       	cpc	r0, r25
 a1c:	08 95       	ret

00000a1e <__fp_pscB>:
 a1e:	00 24       	eor	r0, r0
 a20:	0a 94       	dec	r0
 a22:	12 16       	cp	r1, r18
 a24:	13 06       	cpc	r1, r19
 a26:	14 06       	cpc	r1, r20
 a28:	05 06       	cpc	r0, r21
 a2a:	08 95       	ret

00000a2c <__fp_round>:
 a2c:	09 2e       	mov	r0, r25
 a2e:	03 94       	inc	r0
 a30:	00 0c       	add	r0, r0
 a32:	11 f4       	brne	.+4      	; 0xa38 <__fp_round+0xc>
 a34:	88 23       	and	r24, r24
 a36:	52 f0       	brmi	.+20     	; 0xa4c <__fp_round+0x20>
 a38:	bb 0f       	add	r27, r27
 a3a:	40 f4       	brcc	.+16     	; 0xa4c <__fp_round+0x20>
 a3c:	bf 2b       	or	r27, r31
 a3e:	11 f4       	brne	.+4      	; 0xa44 <__fp_round+0x18>
 a40:	60 ff       	sbrs	r22, 0
 a42:	04 c0       	rjmp	.+8      	; 0xa4c <__fp_round+0x20>
 a44:	6f 5f       	subi	r22, 0xFF	; 255
 a46:	7f 4f       	sbci	r23, 0xFF	; 255
 a48:	8f 4f       	sbci	r24, 0xFF	; 255
 a4a:	9f 4f       	sbci	r25, 0xFF	; 255
 a4c:	08 95       	ret

00000a4e <__fp_split3>:
 a4e:	57 fd       	sbrc	r21, 7
 a50:	90 58       	subi	r25, 0x80	; 128
 a52:	44 0f       	add	r20, r20
 a54:	55 1f       	adc	r21, r21
 a56:	59 f0       	breq	.+22     	; 0xa6e <__fp_splitA+0x10>
 a58:	5f 3f       	cpi	r21, 0xFF	; 255
 a5a:	71 f0       	breq	.+28     	; 0xa78 <__fp_splitA+0x1a>
 a5c:	47 95       	ror	r20

00000a5e <__fp_splitA>:
 a5e:	88 0f       	add	r24, r24
 a60:	97 fb       	bst	r25, 7
 a62:	99 1f       	adc	r25, r25
 a64:	61 f0       	breq	.+24     	; 0xa7e <__fp_splitA+0x20>
 a66:	9f 3f       	cpi	r25, 0xFF	; 255
 a68:	79 f0       	breq	.+30     	; 0xa88 <__fp_splitA+0x2a>
 a6a:	87 95       	ror	r24
 a6c:	08 95       	ret
 a6e:	12 16       	cp	r1, r18
 a70:	13 06       	cpc	r1, r19
 a72:	14 06       	cpc	r1, r20
 a74:	55 1f       	adc	r21, r21
 a76:	f2 cf       	rjmp	.-28     	; 0xa5c <__fp_split3+0xe>
 a78:	46 95       	lsr	r20
 a7a:	f1 df       	rcall	.-30     	; 0xa5e <__fp_splitA>
 a7c:	08 c0       	rjmp	.+16     	; 0xa8e <__fp_splitA+0x30>
 a7e:	16 16       	cp	r1, r22
 a80:	17 06       	cpc	r1, r23
 a82:	18 06       	cpc	r1, r24
 a84:	99 1f       	adc	r25, r25
 a86:	f1 cf       	rjmp	.-30     	; 0xa6a <__fp_splitA+0xc>
 a88:	86 95       	lsr	r24
 a8a:	71 05       	cpc	r23, r1
 a8c:	61 05       	cpc	r22, r1
 a8e:	08 94       	sec
 a90:	08 95       	ret

00000a92 <__fp_zero>:
 a92:	e8 94       	clt

00000a94 <__fp_szero>:
 a94:	bb 27       	eor	r27, r27
 a96:	66 27       	eor	r22, r22
 a98:	77 27       	eor	r23, r23
 a9a:	cb 01       	movw	r24, r22
 a9c:	97 f9       	bld	r25, 7
 a9e:	08 95       	ret

00000aa0 <__gesf2>:
 aa0:	0e 94 c2 05 	call	0xb84	; 0xb84 <__fp_cmp>
 aa4:	08 f4       	brcc	.+2      	; 0xaa8 <__gesf2+0x8>
 aa6:	8f ef       	ldi	r24, 0xFF	; 255
 aa8:	08 95       	ret

00000aaa <__mulsf3>:
 aaa:	0e 94 68 05 	call	0xad0	; 0xad0 <__mulsf3x>
 aae:	0c 94 16 05 	jmp	0xa2c	; 0xa2c <__fp_round>
 ab2:	0e 94 08 05 	call	0xa10	; 0xa10 <__fp_pscA>
 ab6:	38 f0       	brcs	.+14     	; 0xac6 <__mulsf3+0x1c>
 ab8:	0e 94 0f 05 	call	0xa1e	; 0xa1e <__fp_pscB>
 abc:	20 f0       	brcs	.+8      	; 0xac6 <__mulsf3+0x1c>
 abe:	95 23       	and	r25, r21
 ac0:	11 f0       	breq	.+4      	; 0xac6 <__mulsf3+0x1c>
 ac2:	0c 94 ff 04 	jmp	0x9fe	; 0x9fe <__fp_inf>
 ac6:	0c 94 05 05 	jmp	0xa0a	; 0xa0a <__fp_nan>
 aca:	11 24       	eor	r1, r1
 acc:	0c 94 4a 05 	jmp	0xa94	; 0xa94 <__fp_szero>

00000ad0 <__mulsf3x>:
 ad0:	0e 94 27 05 	call	0xa4e	; 0xa4e <__fp_split3>
 ad4:	70 f3       	brcs	.-36     	; 0xab2 <__mulsf3+0x8>

00000ad6 <__mulsf3_pse>:
 ad6:	95 9f       	mul	r25, r21
 ad8:	c1 f3       	breq	.-16     	; 0xaca <__mulsf3+0x20>
 ada:	95 0f       	add	r25, r21
 adc:	50 e0       	ldi	r21, 0x00	; 0
 ade:	55 1f       	adc	r21, r21
 ae0:	62 9f       	mul	r22, r18
 ae2:	f0 01       	movw	r30, r0
 ae4:	72 9f       	mul	r23, r18
 ae6:	bb 27       	eor	r27, r27
 ae8:	f0 0d       	add	r31, r0
 aea:	b1 1d       	adc	r27, r1
 aec:	63 9f       	mul	r22, r19
 aee:	aa 27       	eor	r26, r26
 af0:	f0 0d       	add	r31, r0
 af2:	b1 1d       	adc	r27, r1
 af4:	aa 1f       	adc	r26, r26
 af6:	64 9f       	mul	r22, r20
 af8:	66 27       	eor	r22, r22
 afa:	b0 0d       	add	r27, r0
 afc:	a1 1d       	adc	r26, r1
 afe:	66 1f       	adc	r22, r22
 b00:	82 9f       	mul	r24, r18
 b02:	22 27       	eor	r18, r18
 b04:	b0 0d       	add	r27, r0
 b06:	a1 1d       	adc	r26, r1
 b08:	62 1f       	adc	r22, r18
 b0a:	73 9f       	mul	r23, r19
 b0c:	b0 0d       	add	r27, r0
 b0e:	a1 1d       	adc	r26, r1
 b10:	62 1f       	adc	r22, r18
 b12:	83 9f       	mul	r24, r19
 b14:	a0 0d       	add	r26, r0
 b16:	61 1d       	adc	r22, r1
 b18:	22 1f       	adc	r18, r18
 b1a:	74 9f       	mul	r23, r20
 b1c:	33 27       	eor	r19, r19
 b1e:	a0 0d       	add	r26, r0
 b20:	61 1d       	adc	r22, r1
 b22:	23 1f       	adc	r18, r19
 b24:	84 9f       	mul	r24, r20
 b26:	60 0d       	add	r22, r0
 b28:	21 1d       	adc	r18, r1
 b2a:	82 2f       	mov	r24, r18
 b2c:	76 2f       	mov	r23, r22
 b2e:	6a 2f       	mov	r22, r26
 b30:	11 24       	eor	r1, r1
 b32:	9f 57       	subi	r25, 0x7F	; 127
 b34:	50 40       	sbci	r21, 0x00	; 0
 b36:	9a f0       	brmi	.+38     	; 0xb5e <__mulsf3_pse+0x88>
 b38:	f1 f0       	breq	.+60     	; 0xb76 <__mulsf3_pse+0xa0>
 b3a:	88 23       	and	r24, r24
 b3c:	4a f0       	brmi	.+18     	; 0xb50 <__mulsf3_pse+0x7a>
 b3e:	ee 0f       	add	r30, r30
 b40:	ff 1f       	adc	r31, r31
 b42:	bb 1f       	adc	r27, r27
 b44:	66 1f       	adc	r22, r22
 b46:	77 1f       	adc	r23, r23
 b48:	88 1f       	adc	r24, r24
 b4a:	91 50       	subi	r25, 0x01	; 1
 b4c:	50 40       	sbci	r21, 0x00	; 0
 b4e:	a9 f7       	brne	.-22     	; 0xb3a <__mulsf3_pse+0x64>
 b50:	9e 3f       	cpi	r25, 0xFE	; 254
 b52:	51 05       	cpc	r21, r1
 b54:	80 f0       	brcs	.+32     	; 0xb76 <__mulsf3_pse+0xa0>
 b56:	0c 94 ff 04 	jmp	0x9fe	; 0x9fe <__fp_inf>
 b5a:	0c 94 4a 05 	jmp	0xa94	; 0xa94 <__fp_szero>
 b5e:	5f 3f       	cpi	r21, 0xFF	; 255
 b60:	e4 f3       	brlt	.-8      	; 0xb5a <__mulsf3_pse+0x84>
 b62:	98 3e       	cpi	r25, 0xE8	; 232
 b64:	d4 f3       	brlt	.-12     	; 0xb5a <__mulsf3_pse+0x84>
 b66:	86 95       	lsr	r24
 b68:	77 95       	ror	r23
 b6a:	67 95       	ror	r22
 b6c:	b7 95       	ror	r27
 b6e:	f7 95       	ror	r31
 b70:	e7 95       	ror	r30
 b72:	9f 5f       	subi	r25, 0xFF	; 255
 b74:	c1 f7       	brne	.-16     	; 0xb66 <__mulsf3_pse+0x90>
 b76:	fe 2b       	or	r31, r30
 b78:	88 0f       	add	r24, r24
 b7a:	91 1d       	adc	r25, r1
 b7c:	96 95       	lsr	r25
 b7e:	87 95       	ror	r24
 b80:	97 f9       	bld	r25, 7
 b82:	08 95       	ret

00000b84 <__fp_cmp>:
 b84:	99 0f       	add	r25, r25
 b86:	00 08       	sbc	r0, r0
 b88:	55 0f       	add	r21, r21
 b8a:	aa 0b       	sbc	r26, r26
 b8c:	e0 e8       	ldi	r30, 0x80	; 128
 b8e:	fe ef       	ldi	r31, 0xFE	; 254
 b90:	16 16       	cp	r1, r22
 b92:	17 06       	cpc	r1, r23
 b94:	e8 07       	cpc	r30, r24
 b96:	f9 07       	cpc	r31, r25
 b98:	c0 f0       	brcs	.+48     	; 0xbca <__fp_cmp+0x46>
 b9a:	12 16       	cp	r1, r18
 b9c:	13 06       	cpc	r1, r19
 b9e:	e4 07       	cpc	r30, r20
 ba0:	f5 07       	cpc	r31, r21
 ba2:	98 f0       	brcs	.+38     	; 0xbca <__fp_cmp+0x46>
 ba4:	62 1b       	sub	r22, r18
 ba6:	73 0b       	sbc	r23, r19
 ba8:	84 0b       	sbc	r24, r20
 baa:	95 0b       	sbc	r25, r21
 bac:	39 f4       	brne	.+14     	; 0xbbc <__fp_cmp+0x38>
 bae:	0a 26       	eor	r0, r26
 bb0:	61 f0       	breq	.+24     	; 0xbca <__fp_cmp+0x46>
 bb2:	23 2b       	or	r18, r19
 bb4:	24 2b       	or	r18, r20
 bb6:	25 2b       	or	r18, r21
 bb8:	21 f4       	brne	.+8      	; 0xbc2 <__fp_cmp+0x3e>
 bba:	08 95       	ret
 bbc:	0a 26       	eor	r0, r26
 bbe:	09 f4       	brne	.+2      	; 0xbc2 <__fp_cmp+0x3e>
 bc0:	a1 40       	sbci	r26, 0x01	; 1
 bc2:	a6 95       	lsr	r26
 bc4:	8f ef       	ldi	r24, 0xFF	; 255
 bc6:	81 1d       	adc	r24, r1
 bc8:	81 1d       	adc	r24, r1
 bca:	08 95       	ret

00000bcc <_exit>:
 bcc:	f8 94       	cli

00000bce <__stop_program>:
 bce:	ff cf       	rjmp	.-2      	; 0xbce <__stop_program>
