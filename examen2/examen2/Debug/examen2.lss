
examen2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000474  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000004c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000004c8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000004f8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000100  00000000  00000000  00000538  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000fd2  00000000  00000000  00000638  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008dc  00000000  00000000  0000160a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000009c0  00000000  00000000  00001ee6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000190  00000000  00000000  000028a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000048c  00000000  00000000  00002a38  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000624  00000000  00000000  00002ec4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a0  00000000  00000000  000034e8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 a0 01 	call	0x340	; 0x340 <main>
  64:	0c 94 38 02 	jmp	0x470	; 0x470 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) ) {
        lcd_putc(c);
    }

}/* lcd_puts_p */
  6c:	82 b3       	in	r24, 0x12	; 18
  6e:	80 68       	ori	r24, 0x80	; 128
  70:	82 bb       	out	0x12, r24	; 18
  72:	00 c0       	rjmp	.+0      	; 0x74 <toggle_e+0x8>
  74:	82 b3       	in	r24, 0x12	; 18
  76:	8f 77       	andi	r24, 0x7F	; 127
  78:	82 bb       	out	0x12, r24	; 18
  7a:	08 95       	ret

0000007c <lcd_write>:
  7c:	cf 93       	push	r28
  7e:	c8 2f       	mov	r28, r24
  80:	66 23       	and	r22, r22
  82:	21 f0       	breq	.+8      	; 0x8c <lcd_write+0x10>
  84:	82 b3       	in	r24, 0x12	; 18
  86:	80 62       	ori	r24, 0x20	; 32
  88:	82 bb       	out	0x12, r24	; 18
  8a:	03 c0       	rjmp	.+6      	; 0x92 <lcd_write+0x16>
  8c:	82 b3       	in	r24, 0x12	; 18
  8e:	8f 7d       	andi	r24, 0xDF	; 223
  90:	82 bb       	out	0x12, r24	; 18
  92:	82 b3       	in	r24, 0x12	; 18
  94:	8f 7b       	andi	r24, 0xBF	; 191
  96:	82 bb       	out	0x12, r24	; 18
  98:	84 b3       	in	r24, 0x14	; 20
  9a:	80 61       	ori	r24, 0x10	; 16
  9c:	84 bb       	out	0x14, r24	; 20
  9e:	84 b3       	in	r24, 0x14	; 20
  a0:	80 62       	ori	r24, 0x20	; 32
  a2:	84 bb       	out	0x14, r24	; 20
  a4:	84 b3       	in	r24, 0x14	; 20
  a6:	80 64       	ori	r24, 0x40	; 64
  a8:	84 bb       	out	0x14, r24	; 20
  aa:	84 b3       	in	r24, 0x14	; 20
  ac:	80 68       	ori	r24, 0x80	; 128
  ae:	84 bb       	out	0x14, r24	; 20
  b0:	85 b3       	in	r24, 0x15	; 21
  b2:	8f 77       	andi	r24, 0x7F	; 127
  b4:	85 bb       	out	0x15, r24	; 21
  b6:	85 b3       	in	r24, 0x15	; 21
  b8:	8f 7b       	andi	r24, 0xBF	; 191
  ba:	85 bb       	out	0x15, r24	; 21
  bc:	85 b3       	in	r24, 0x15	; 21
  be:	8f 7d       	andi	r24, 0xDF	; 223
  c0:	85 bb       	out	0x15, r24	; 21
  c2:	85 b3       	in	r24, 0x15	; 21
  c4:	8f 7e       	andi	r24, 0xEF	; 239
  c6:	85 bb       	out	0x15, r24	; 21
  c8:	cc 23       	and	r28, r28
  ca:	1c f4       	brge	.+6      	; 0xd2 <lcd_write+0x56>
  cc:	85 b3       	in	r24, 0x15	; 21
  ce:	80 68       	ori	r24, 0x80	; 128
  d0:	85 bb       	out	0x15, r24	; 21
  d2:	c6 ff       	sbrs	r28, 6
  d4:	03 c0       	rjmp	.+6      	; 0xdc <lcd_write+0x60>
  d6:	85 b3       	in	r24, 0x15	; 21
  d8:	80 64       	ori	r24, 0x40	; 64
  da:	85 bb       	out	0x15, r24	; 21
  dc:	c5 ff       	sbrs	r28, 5
  de:	03 c0       	rjmp	.+6      	; 0xe6 <lcd_write+0x6a>
  e0:	85 b3       	in	r24, 0x15	; 21
  e2:	80 62       	ori	r24, 0x20	; 32
  e4:	85 bb       	out	0x15, r24	; 21
  e6:	c4 ff       	sbrs	r28, 4
  e8:	03 c0       	rjmp	.+6      	; 0xf0 <lcd_write+0x74>
  ea:	85 b3       	in	r24, 0x15	; 21
  ec:	80 61       	ori	r24, 0x10	; 16
  ee:	85 bb       	out	0x15, r24	; 21
  f0:	0e 94 36 00 	call	0x6c	; 0x6c <toggle_e>
  f4:	85 b3       	in	r24, 0x15	; 21
  f6:	8f 77       	andi	r24, 0x7F	; 127
  f8:	85 bb       	out	0x15, r24	; 21
  fa:	85 b3       	in	r24, 0x15	; 21
  fc:	8f 7b       	andi	r24, 0xBF	; 191
  fe:	85 bb       	out	0x15, r24	; 21
 100:	85 b3       	in	r24, 0x15	; 21
 102:	8f 7d       	andi	r24, 0xDF	; 223
 104:	85 bb       	out	0x15, r24	; 21
 106:	85 b3       	in	r24, 0x15	; 21
 108:	8f 7e       	andi	r24, 0xEF	; 239
 10a:	85 bb       	out	0x15, r24	; 21
 10c:	c3 ff       	sbrs	r28, 3
 10e:	03 c0       	rjmp	.+6      	; 0x116 <lcd_write+0x9a>
 110:	85 b3       	in	r24, 0x15	; 21
 112:	80 68       	ori	r24, 0x80	; 128
 114:	85 bb       	out	0x15, r24	; 21
 116:	c2 ff       	sbrs	r28, 2
 118:	03 c0       	rjmp	.+6      	; 0x120 <lcd_write+0xa4>
 11a:	85 b3       	in	r24, 0x15	; 21
 11c:	80 64       	ori	r24, 0x40	; 64
 11e:	85 bb       	out	0x15, r24	; 21
 120:	c1 ff       	sbrs	r28, 1
 122:	03 c0       	rjmp	.+6      	; 0x12a <lcd_write+0xae>
 124:	85 b3       	in	r24, 0x15	; 21
 126:	80 62       	ori	r24, 0x20	; 32
 128:	85 bb       	out	0x15, r24	; 21
 12a:	c0 ff       	sbrs	r28, 0
 12c:	03 c0       	rjmp	.+6      	; 0x134 <lcd_write+0xb8>
 12e:	85 b3       	in	r24, 0x15	; 21
 130:	80 61       	ori	r24, 0x10	; 16
 132:	85 bb       	out	0x15, r24	; 21
 134:	0e 94 36 00 	call	0x6c	; 0x6c <toggle_e>
 138:	85 b3       	in	r24, 0x15	; 21
 13a:	80 61       	ori	r24, 0x10	; 16
 13c:	85 bb       	out	0x15, r24	; 21
 13e:	85 b3       	in	r24, 0x15	; 21
 140:	80 62       	ori	r24, 0x20	; 32
 142:	85 bb       	out	0x15, r24	; 21
 144:	85 b3       	in	r24, 0x15	; 21
 146:	80 64       	ori	r24, 0x40	; 64
 148:	85 bb       	out	0x15, r24	; 21
 14a:	85 b3       	in	r24, 0x15	; 21
 14c:	80 68       	ori	r24, 0x80	; 128
 14e:	85 bb       	out	0x15, r24	; 21
 150:	cf 91       	pop	r28
 152:	08 95       	ret

00000154 <lcd_read>:
 154:	88 23       	and	r24, r24
 156:	21 f0       	breq	.+8      	; 0x160 <lcd_read+0xc>
 158:	82 b3       	in	r24, 0x12	; 18
 15a:	80 62       	ori	r24, 0x20	; 32
 15c:	82 bb       	out	0x12, r24	; 18
 15e:	03 c0       	rjmp	.+6      	; 0x166 <lcd_read+0x12>
 160:	82 b3       	in	r24, 0x12	; 18
 162:	8f 7d       	andi	r24, 0xDF	; 223
 164:	82 bb       	out	0x12, r24	; 18
 166:	82 b3       	in	r24, 0x12	; 18
 168:	80 64       	ori	r24, 0x40	; 64
 16a:	82 bb       	out	0x12, r24	; 18
 16c:	84 b3       	in	r24, 0x14	; 20
 16e:	8f 7e       	andi	r24, 0xEF	; 239
 170:	84 bb       	out	0x14, r24	; 20
 172:	84 b3       	in	r24, 0x14	; 20
 174:	8f 7d       	andi	r24, 0xDF	; 223
 176:	84 bb       	out	0x14, r24	; 20
 178:	84 b3       	in	r24, 0x14	; 20
 17a:	8f 7b       	andi	r24, 0xBF	; 191
 17c:	84 bb       	out	0x14, r24	; 20
 17e:	84 b3       	in	r24, 0x14	; 20
 180:	8f 77       	andi	r24, 0x7F	; 127
 182:	84 bb       	out	0x14, r24	; 20
 184:	82 b3       	in	r24, 0x12	; 18
 186:	80 68       	ori	r24, 0x80	; 128
 188:	82 bb       	out	0x12, r24	; 18
 18a:	00 c0       	rjmp	.+0      	; 0x18c <lcd_read+0x38>
 18c:	9c 99       	sbic	0x13, 4	; 19
 18e:	02 c0       	rjmp	.+4      	; 0x194 <lcd_read+0x40>
 190:	80 e0       	ldi	r24, 0x00	; 0
 192:	01 c0       	rjmp	.+2      	; 0x196 <lcd_read+0x42>
 194:	80 e1       	ldi	r24, 0x10	; 16
 196:	9d 99       	sbic	0x13, 5	; 19
 198:	80 62       	ori	r24, 0x20	; 32
 19a:	9e 99       	sbic	0x13, 6	; 19
 19c:	80 64       	ori	r24, 0x40	; 64
 19e:	9f 99       	sbic	0x13, 7	; 19
 1a0:	80 68       	ori	r24, 0x80	; 128
 1a2:	92 b3       	in	r25, 0x12	; 18
 1a4:	9f 77       	andi	r25, 0x7F	; 127
 1a6:	92 bb       	out	0x12, r25	; 18
 1a8:	00 c0       	rjmp	.+0      	; 0x1aa <lcd_read+0x56>
 1aa:	92 b3       	in	r25, 0x12	; 18
 1ac:	90 68       	ori	r25, 0x80	; 128
 1ae:	92 bb       	out	0x12, r25	; 18
 1b0:	00 c0       	rjmp	.+0      	; 0x1b2 <lcd_read+0x5e>
 1b2:	9c 99       	sbic	0x13, 4	; 19
 1b4:	81 60       	ori	r24, 0x01	; 1
 1b6:	9d 99       	sbic	0x13, 5	; 19
 1b8:	82 60       	ori	r24, 0x02	; 2
 1ba:	9e 99       	sbic	0x13, 6	; 19
 1bc:	84 60       	ori	r24, 0x04	; 4
 1be:	9f 99       	sbic	0x13, 7	; 19
 1c0:	88 60       	ori	r24, 0x08	; 8
 1c2:	92 b3       	in	r25, 0x12	; 18
 1c4:	9f 77       	andi	r25, 0x7F	; 127
 1c6:	92 bb       	out	0x12, r25	; 18
 1c8:	08 95       	ret

000001ca <lcd_waitbusy>:
 1ca:	80 e0       	ldi	r24, 0x00	; 0
 1cc:	0e 94 aa 00 	call	0x154	; 0x154 <lcd_read>
 1d0:	88 23       	and	r24, r24
 1d2:	dc f3       	brlt	.-10     	; 0x1ca <lcd_waitbusy>
 1d4:	00 c0       	rjmp	.+0      	; 0x1d6 <lcd_waitbusy+0xc>
 1d6:	80 e0       	ldi	r24, 0x00	; 0
 1d8:	0e 94 aa 00 	call	0x154	; 0x154 <lcd_read>
 1dc:	08 95       	ret

000001de <lcd_command>:
 1de:	cf 93       	push	r28
 1e0:	c8 2f       	mov	r28, r24
 1e2:	0e 94 e5 00 	call	0x1ca	; 0x1ca <lcd_waitbusy>
 1e6:	60 e0       	ldi	r22, 0x00	; 0
 1e8:	8c 2f       	mov	r24, r28
 1ea:	0e 94 3e 00 	call	0x7c	; 0x7c <lcd_write>
 1ee:	cf 91       	pop	r28
 1f0:	08 95       	ret

000001f2 <lcd_gotoxy>:
 1f2:	61 11       	cpse	r22, r1
 1f4:	04 c0       	rjmp	.+8      	; 0x1fe <lcd_gotoxy+0xc>
 1f6:	80 58       	subi	r24, 0x80	; 128
 1f8:	0e 94 ef 00 	call	0x1de	; 0x1de <lcd_command>
 1fc:	08 95       	ret
 1fe:	80 54       	subi	r24, 0x40	; 64
 200:	0e 94 ef 00 	call	0x1de	; 0x1de <lcd_command>
 204:	08 95       	ret

00000206 <lcd_clrscr>:
 206:	81 e0       	ldi	r24, 0x01	; 1
 208:	0e 94 ef 00 	call	0x1de	; 0x1de <lcd_command>
 20c:	08 95       	ret

0000020e <lcd_putc>:
 20e:	cf 93       	push	r28
 210:	c8 2f       	mov	r28, r24
 212:	0e 94 e5 00 	call	0x1ca	; 0x1ca <lcd_waitbusy>
 216:	ca 30       	cpi	r28, 0x0A	; 10
 218:	49 f4       	brne	.+18     	; 0x22c <lcd_putc+0x1e>
 21a:	80 34       	cpi	r24, 0x40	; 64
 21c:	10 f4       	brcc	.+4      	; 0x222 <lcd_putc+0x14>
 21e:	80 e4       	ldi	r24, 0x40	; 64
 220:	01 c0       	rjmp	.+2      	; 0x224 <lcd_putc+0x16>
 222:	80 e0       	ldi	r24, 0x00	; 0
 224:	80 58       	subi	r24, 0x80	; 128
 226:	0e 94 ef 00 	call	0x1de	; 0x1de <lcd_command>
 22a:	04 c0       	rjmp	.+8      	; 0x234 <lcd_putc+0x26>
 22c:	61 e0       	ldi	r22, 0x01	; 1
 22e:	8c 2f       	mov	r24, r28
 230:	0e 94 3e 00 	call	0x7c	; 0x7c <lcd_write>
 234:	cf 91       	pop	r28
 236:	08 95       	ret

00000238 <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 238:	1f 93       	push	r17
 23a:	cf 93       	push	r28
 23c:	df 93       	push	r29
 23e:	18 2f       	mov	r17, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 240:	81 b3       	in	r24, 0x11	; 17
 242:	80 62       	ori	r24, 0x20	; 32
 244:	81 bb       	out	0x11, r24	; 17
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 246:	81 b3       	in	r24, 0x11	; 17
 248:	80 64       	ori	r24, 0x40	; 64
 24a:	81 bb       	out	0x11, r24	; 17
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 24c:	81 b3       	in	r24, 0x11	; 17
 24e:	80 68       	ori	r24, 0x80	; 128
 250:	81 bb       	out	0x11, r24	; 17
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 252:	84 b3       	in	r24, 0x14	; 20
 254:	80 61       	ori	r24, 0x10	; 16
 256:	84 bb       	out	0x14, r24	; 20
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 258:	84 b3       	in	r24, 0x14	; 20
 25a:	80 62       	ori	r24, 0x20	; 32
 25c:	84 bb       	out	0x14, r24	; 20
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 25e:	84 b3       	in	r24, 0x14	; 20
 260:	80 64       	ori	r24, 0x40	; 64
 262:	84 bb       	out	0x14, r24	; 20
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 264:	84 b3       	in	r24, 0x14	; 20
 266:	80 68       	ori	r24, 0x80	; 128
 268:	84 bb       	out	0x14, r24	; 20
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 26a:	80 ea       	ldi	r24, 0xA0	; 160
 26c:	9f e0       	ldi	r25, 0x0F	; 15
 26e:	01 97       	sbiw	r24, 0x01	; 1
 270:	f1 f7       	brne	.-4      	; 0x26e <lcd_init+0x36>
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
    }
    delay(16000);        /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);  // _BV(LCD_FUNCTION)>>4;
 272:	85 b3       	in	r24, 0x15	; 21
 274:	80 62       	ori	r24, 0x20	; 32
 276:	85 bb       	out	0x15, r24	; 21
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
 278:	85 b3       	in	r24, 0x15	; 21
 27a:	80 61       	ori	r24, 0x10	; 16
 27c:	85 bb       	out	0x15, r24	; 21
    lcd_e_toggle();
 27e:	0e 94 36 00 	call	0x6c	; 0x6c <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 282:	80 ee       	ldi	r24, 0xE0	; 224
 284:	94 e0       	ldi	r25, 0x04	; 4
 286:	01 97       	sbiw	r24, 0x01	; 1
 288:	f1 f7       	brne	.-4      	; 0x286 <lcd_init+0x4e>
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
    lcd_e_toggle();
    delay(4992);         /* delay, busy flag can't be checked here */
   
    /* repeat last command */ 
    lcd_e_toggle();      
 28a:	0e 94 36 00 	call	0x6c	; 0x6c <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 28e:	c0 e1       	ldi	r28, 0x10	; 16
 290:	d0 e0       	ldi	r29, 0x00	; 0
 292:	ce 01       	movw	r24, r28
 294:	01 97       	sbiw	r24, 0x01	; 1
 296:	f1 f7       	brne	.-4      	; 0x294 <lcd_init+0x5c>
    /* repeat last command */ 
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */
    
    /* repeat last command a third time */
    lcd_e_toggle();      
 298:	0e 94 36 00 	call	0x6c	; 0x6c <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 29c:	ce 01       	movw	r24, r28
 29e:	01 97       	sbiw	r24, 0x01	; 1
 2a0:	f1 f7       	brne	.-4      	; 0x29e <lcd_init+0x66>
    /* repeat last command a third time */
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
 2a2:	85 b3       	in	r24, 0x15	; 21
 2a4:	8f 7e       	andi	r24, 0xEF	; 239
 2a6:	85 bb       	out	0x15, r24	; 21
    lcd_e_toggle();
 2a8:	0e 94 36 00 	call	0x6c	; 0x6c <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 2ac:	21 97       	sbiw	r28, 0x01	; 1
 2ae:	f1 f7       	brne	.-4      	; 0x2ac <lcd_init+0x74>
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
 2b0:	88 e2       	ldi	r24, 0x28	; 40
 2b2:	0e 94 ef 00 	call	0x1de	; 0x1de <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
 2b6:	88 e0       	ldi	r24, 0x08	; 8
 2b8:	0e 94 ef 00 	call	0x1de	; 0x1de <lcd_command>
    lcd_clrscr();                           /* display clear                */ 
 2bc:	0e 94 03 01 	call	0x206	; 0x206 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 2c0:	86 e0       	ldi	r24, 0x06	; 6
 2c2:	0e 94 ef 00 	call	0x1de	; 0x1de <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
 2c6:	81 2f       	mov	r24, r17
 2c8:	0e 94 ef 00 	call	0x1de	; 0x1de <lcd_command>

}/* lcd_init */
 2cc:	df 91       	pop	r29
 2ce:	cf 91       	pop	r28
 2d0:	1f 91       	pop	r17
 2d2:	08 95       	ret

000002d4 <serial_init>:
#include <avr/eeprom.h>
#include "lcd.h"

#define BAUD_PRESCALE (((F_CPU / (USART_BAUDRATE * 16UL))) - 1)
void serial_init(long USART_BAUDRATE){
	UCSRB |= (1 << RXEN) | (1 << TXEN);
 2d4:	2a b1       	in	r18, 0x0a	; 10
 2d6:	28 61       	ori	r18, 0x18	; 24
 2d8:	2a b9       	out	0x0a, r18	; 10
	UCSRC |= (1 << URSEL) | (1 << UCSZ0) | (1 << UCSZ1);
 2da:	20 b5       	in	r18, 0x20	; 32
 2dc:	26 68       	ori	r18, 0x86	; 134
 2de:	20 bd       	out	0x20, r18	; 32
	UBRRL = BAUD_PRESCALE;
 2e0:	dc 01       	movw	r26, r24
 2e2:	cb 01       	movw	r24, r22
 2e4:	88 0f       	add	r24, r24
 2e6:	99 1f       	adc	r25, r25
 2e8:	aa 1f       	adc	r26, r26
 2ea:	bb 1f       	adc	r27, r27
 2ec:	88 0f       	add	r24, r24
 2ee:	99 1f       	adc	r25, r25
 2f0:	aa 1f       	adc	r26, r26
 2f2:	bb 1f       	adc	r27, r27
 2f4:	9c 01       	movw	r18, r24
 2f6:	ad 01       	movw	r20, r26
 2f8:	22 0f       	add	r18, r18
 2fa:	33 1f       	adc	r19, r19
 2fc:	44 1f       	adc	r20, r20
 2fe:	55 1f       	adc	r21, r21
 300:	22 0f       	add	r18, r18
 302:	33 1f       	adc	r19, r19
 304:	44 1f       	adc	r20, r20
 306:	55 1f       	adc	r21, r21
 308:	60 e4       	ldi	r22, 0x40	; 64
 30a:	72 e4       	ldi	r23, 0x42	; 66
 30c:	8f e0       	ldi	r24, 0x0F	; 15
 30e:	90 e0       	ldi	r25, 0x00	; 0
 310:	0e 94 01 02 	call	0x402	; 0x402 <__udivmodsi4>
 314:	8f ef       	ldi	r24, 0xFF	; 255
 316:	82 0f       	add	r24, r18
 318:	89 b9       	out	0x09, r24	; 9
	UBRRH = (BAUD_PRESCALE >> 8);
 31a:	da 01       	movw	r26, r20
 31c:	c9 01       	movw	r24, r18
 31e:	01 97       	sbiw	r24, 0x01	; 1
 320:	a1 09       	sbc	r26, r1
 322:	b1 09       	sbc	r27, r1
 324:	89 2f       	mov	r24, r25
 326:	9a 2f       	mov	r25, r26
 328:	ab 2f       	mov	r26, r27
 32a:	bb 27       	eor	r27, r27
 32c:	80 bd       	out	0x20, r24	; 32
 32e:	08 95       	ret

00000330 <serial_rxbyte>:
}

uint8_t serial_rxbyte(){
	while ((UCSRA & (1 << RXC)) == 0);
 330:	5f 9b       	sbis	0x0b, 7	; 11
 332:	fe cf       	rjmp	.-4      	; 0x330 <serial_rxbyte>
	return(UDR);
 334:	8c b1       	in	r24, 0x0c	; 12
}
 336:	08 95       	ret

00000338 <serial_txbyte>:

void serial_txbyte(uint8_t ch){
	while (! (UCSRA & (1<<UDRE)));    /* Wait for empty transmit buffer*/
 338:	5d 9b       	sbis	0x0b, 5	; 11
 33a:	fe cf       	rjmp	.-4      	; 0x338 <serial_txbyte>
	UDR = ch ;
 33c:	8c b9       	out	0x0c, r24	; 12
 33e:	08 95       	ret

00000340 <main>:
}
int main(void)
{
	lcd_init(LCD_DISP_ON);
 340:	8c e0       	ldi	r24, 0x0C	; 12
 342:	0e 94 1c 01 	call	0x238	; 0x238 <lcd_init>
	DDRA = DDRB  = 0x00;
 346:	17 ba       	out	0x17, r1	; 23
 348:	1a ba       	out	0x1a, r1	; 26
	PORTA = PORTB = 0xFF;
 34a:	8f ef       	ldi	r24, 0xFF	; 255
 34c:	88 bb       	out	0x18, r24	; 24
 34e:	8b bb       	out	0x1b, r24	; 27
	DDRD = 0xF0;
 350:	80 ef       	ldi	r24, 0xF0	; 240
 352:	81 bb       	out	0x11, r24	; 17
	PORTD = 0x0F;
 354:	8f e0       	ldi	r24, 0x0F	; 15
 356:	82 bb       	out	0x12, r24	; 18
	char xd = eeprom_read_byte(0);
 358:	80 e0       	ldi	r24, 0x00	; 0
 35a:	90 e0       	ldi	r25, 0x00	; 0
 35c:	0e 94 23 02 	call	0x446	; 0x446 <eeprom_read_byte>
 360:	c8 2f       	mov	r28, r24
	lcd_gotoxy(0,1);
 362:	61 e0       	ldi	r22, 0x01	; 1
 364:	80 e0       	ldi	r24, 0x00	; 0
 366:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <lcd_gotoxy>
	lcd_putc(xd);
 36a:	8c 2f       	mov	r24, r28
 36c:	0e 94 07 01 	call	0x20e	; 0x20e <lcd_putc>
    /* Replace with your application code */
	serial_init(4800);
 370:	60 ec       	ldi	r22, 0xC0	; 192
 372:	72 e1       	ldi	r23, 0x12	; 18
 374:	80 e0       	ldi	r24, 0x00	; 0
 376:	90 e0       	ldi	r25, 0x00	; 0
 378:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <serial_init>
    while (1) 
    {
		if ((UCSRA & (1 << RXC))) {
 37c:	5f 9b       	sbis	0x0b, 7	; 11
 37e:	12 c0       	rjmp	.+36     	; 0x3a4 <main+0x64>
			char c = serial_rxbyte();
 380:	0e 94 98 01 	call	0x330	; 0x330 <serial_rxbyte>
 384:	c8 2f       	mov	r28, r24
			lcd_gotoxy(0,1);
 386:	61 e0       	ldi	r22, 0x01	; 1
 388:	80 e0       	ldi	r24, 0x00	; 0
 38a:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <lcd_gotoxy>
			lcd_putc(c);
 38e:	8c 2f       	mov	r24, r28
 390:	0e 94 07 01 	call	0x20e	; 0x20e <lcd_putc>
			serial_txbyte(c);
 394:	8c 2f       	mov	r24, r28
 396:	0e 94 9c 01 	call	0x338	; 0x338 <serial_txbyte>
			eeprom_write_byte(0,c);
 39a:	6c 2f       	mov	r22, r28
 39c:	80 e0       	ldi	r24, 0x00	; 0
 39e:	90 e0       	ldi	r25, 0x00	; 0
 3a0:	0e 94 2b 02 	call	0x456	; 0x456 <eeprom_write_byte>
		}
		if (!(PINA&(1))) {
 3a4:	c8 99       	sbic	0x19, 0	; 25
 3a6:	ea cf       	rjmp	.-44     	; 0x37c <main+0x3c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3a8:	83 ed       	ldi	r24, 0xD3	; 211
 3aa:	90 e3       	ldi	r25, 0x30	; 48
 3ac:	01 97       	sbiw	r24, 0x01	; 1
 3ae:	f1 f7       	brne	.-4      	; 0x3ac <main+0x6c>
 3b0:	00 c0       	rjmp	.+0      	; 0x3b2 <main+0x72>
 3b2:	00 00       	nop
			_delay_ms(50);
			char c = 255 - PINB;
 3b4:	c6 b3       	in	r28, 0x16	; 22
 3b6:	c0 95       	com	r28
			if (c<33 || c>126) {
 3b8:	8f ed       	ldi	r24, 0xDF	; 223
 3ba:	8c 0f       	add	r24, r28
 3bc:	8e 35       	cpi	r24, 0x5E	; 94
 3be:	48 f0       	brcs	.+18     	; 0x3d2 <main+0x92>
				while (!(PINA&(1)));
 3c0:	c8 9b       	sbis	0x19, 0	; 25
 3c2:	fe cf       	rjmp	.-4      	; 0x3c0 <main+0x80>
 3c4:	83 ed       	ldi	r24, 0xD3	; 211
 3c6:	90 e3       	ldi	r25, 0x30	; 48
 3c8:	01 97       	sbiw	r24, 0x01	; 1
 3ca:	f1 f7       	brne	.-4      	; 0x3c8 <main+0x88>
 3cc:	00 c0       	rjmp	.+0      	; 0x3ce <main+0x8e>
 3ce:	00 00       	nop
 3d0:	d5 cf       	rjmp	.-86     	; 0x37c <main+0x3c>
				_delay_ms(50);
			} else {
				lcd_gotoxy(0,1);
 3d2:	61 e0       	ldi	r22, 0x01	; 1
 3d4:	80 e0       	ldi	r24, 0x00	; 0
 3d6:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <lcd_gotoxy>
				lcd_putc(c);
 3da:	8c 2f       	mov	r24, r28
 3dc:	0e 94 07 01 	call	0x20e	; 0x20e <lcd_putc>
				serial_txbyte(c);
 3e0:	8c 2f       	mov	r24, r28
 3e2:	0e 94 9c 01 	call	0x338	; 0x338 <serial_txbyte>
				eeprom_write_byte(0,c);
 3e6:	6c 2f       	mov	r22, r28
 3e8:	80 e0       	ldi	r24, 0x00	; 0
 3ea:	90 e0       	ldi	r25, 0x00	; 0
 3ec:	0e 94 2b 02 	call	0x456	; 0x456 <eeprom_write_byte>
				while (!(PINA&(1)));
 3f0:	c8 9b       	sbis	0x19, 0	; 25
 3f2:	fe cf       	rjmp	.-4      	; 0x3f0 <main+0xb0>
 3f4:	83 ed       	ldi	r24, 0xD3	; 211
 3f6:	90 e3       	ldi	r25, 0x30	; 48
 3f8:	01 97       	sbiw	r24, 0x01	; 1
 3fa:	f1 f7       	brne	.-4      	; 0x3f8 <main+0xb8>
 3fc:	00 c0       	rjmp	.+0      	; 0x3fe <main+0xbe>
 3fe:	00 00       	nop
 400:	bd cf       	rjmp	.-134    	; 0x37c <main+0x3c>

00000402 <__udivmodsi4>:
 402:	a1 e2       	ldi	r26, 0x21	; 33
 404:	1a 2e       	mov	r1, r26
 406:	aa 1b       	sub	r26, r26
 408:	bb 1b       	sub	r27, r27
 40a:	fd 01       	movw	r30, r26
 40c:	0d c0       	rjmp	.+26     	; 0x428 <__udivmodsi4_ep>

0000040e <__udivmodsi4_loop>:
 40e:	aa 1f       	adc	r26, r26
 410:	bb 1f       	adc	r27, r27
 412:	ee 1f       	adc	r30, r30
 414:	ff 1f       	adc	r31, r31
 416:	a2 17       	cp	r26, r18
 418:	b3 07       	cpc	r27, r19
 41a:	e4 07       	cpc	r30, r20
 41c:	f5 07       	cpc	r31, r21
 41e:	20 f0       	brcs	.+8      	; 0x428 <__udivmodsi4_ep>
 420:	a2 1b       	sub	r26, r18
 422:	b3 0b       	sbc	r27, r19
 424:	e4 0b       	sbc	r30, r20
 426:	f5 0b       	sbc	r31, r21

00000428 <__udivmodsi4_ep>:
 428:	66 1f       	adc	r22, r22
 42a:	77 1f       	adc	r23, r23
 42c:	88 1f       	adc	r24, r24
 42e:	99 1f       	adc	r25, r25
 430:	1a 94       	dec	r1
 432:	69 f7       	brne	.-38     	; 0x40e <__udivmodsi4_loop>
 434:	60 95       	com	r22
 436:	70 95       	com	r23
 438:	80 95       	com	r24
 43a:	90 95       	com	r25
 43c:	9b 01       	movw	r18, r22
 43e:	ac 01       	movw	r20, r24
 440:	bd 01       	movw	r22, r26
 442:	cf 01       	movw	r24, r30
 444:	08 95       	ret

00000446 <eeprom_read_byte>:
 446:	e1 99       	sbic	0x1c, 1	; 28
 448:	fe cf       	rjmp	.-4      	; 0x446 <eeprom_read_byte>
 44a:	9f bb       	out	0x1f, r25	; 31
 44c:	8e bb       	out	0x1e, r24	; 30
 44e:	e0 9a       	sbi	0x1c, 0	; 28
 450:	99 27       	eor	r25, r25
 452:	8d b3       	in	r24, 0x1d	; 29
 454:	08 95       	ret

00000456 <eeprom_write_byte>:
 456:	26 2f       	mov	r18, r22

00000458 <eeprom_write_r18>:
 458:	e1 99       	sbic	0x1c, 1	; 28
 45a:	fe cf       	rjmp	.-4      	; 0x458 <eeprom_write_r18>
 45c:	9f bb       	out	0x1f, r25	; 31
 45e:	8e bb       	out	0x1e, r24	; 30
 460:	2d bb       	out	0x1d, r18	; 29
 462:	0f b6       	in	r0, 0x3f	; 63
 464:	f8 94       	cli
 466:	e2 9a       	sbi	0x1c, 2	; 28
 468:	e1 9a       	sbi	0x1c, 1	; 28
 46a:	0f be       	out	0x3f, r0	; 63
 46c:	01 96       	adiw	r24, 0x01	; 1
 46e:	08 95       	ret

00000470 <_exit>:
 470:	f8 94       	cli

00000472 <__stop_program>:
 472:	ff cf       	rjmp	.-2      	; 0x472 <__stop_program>
