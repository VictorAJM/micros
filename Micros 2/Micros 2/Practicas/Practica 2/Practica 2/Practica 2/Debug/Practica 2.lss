
Practica 2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000015e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001d2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  000001d2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001d2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000204  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00000240  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000831  00000000  00000000  00000280  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000695  00000000  00000000  00000ab1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003b2  00000000  00000000  00001146  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000078  00000000  00000000  000014f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000381  00000000  00000000  00001570  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000033c  00000000  00000000  000018f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00001c2d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 6d 00 	call	0xda	; 0xda <main>
  74:	0c 94 ad 00 	jmp	0x15a	; 0x15a <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <cero_en_bit>:
}


uint8_t cero_en_bit(volatile uint8_t *LUGAR, uint8_t BIT)
{
	return (!(*LUGAR&(1<<BIT)));
  7c:	fc 01       	movw	r30, r24
  7e:	80 81       	ld	r24, Z
  80:	90 e0       	ldi	r25, 0x00	; 0
  82:	02 c0       	rjmp	.+4      	; 0x88 <cero_en_bit+0xc>
  84:	95 95       	asr	r25
  86:	87 95       	ror	r24
  88:	6a 95       	dec	r22
  8a:	e2 f7       	brpl	.-8      	; 0x84 <cero_en_bit+0x8>
  8c:	f1 e0       	ldi	r31, 0x01	; 1
  8e:	8f 27       	eor	r24, r31
}
  90:	81 70       	andi	r24, 0x01	; 1
  92:	08 95       	ret

00000094 <boton>:
uint8_t BCD(uint8_t in);
//*************************************************************************/

uint8_t cont=0;

void boton(volatile uint8_t *LUGAR, uint8_t BIT,uint8_t x){
  94:	0f 93       	push	r16
  96:	1f 93       	push	r17
  98:	cf 93       	push	r28
  9a:	df 93       	push	r29
  9c:	8c 01       	movw	r16, r24
  9e:	c6 2f       	mov	r28, r22
  a0:	d4 2f       	mov	r29, r20
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a2:	83 ed       	ldi	r24, 0xD3	; 211
  a4:	90 e3       	ldi	r25, 0x30	; 48
  a6:	01 97       	sbiw	r24, 0x01	; 1
  a8:	f1 f7       	brne	.-4      	; 0xa6 <boton+0x12>
  aa:	00 c0       	rjmp	.+0      	; 0xac <boton+0x18>
  ac:	00 00       	nop
	_delay_ms(50);
	while(cero_en_bit(LUGAR,BIT)){}
  ae:	6c 2f       	mov	r22, r28
  b0:	c8 01       	movw	r24, r16
  b2:	0e 94 3e 00 	call	0x7c	; 0x7c <cero_en_bit>
  b6:	81 11       	cpse	r24, r1
  b8:	fa cf       	rjmp	.-12     	; 0xae <boton+0x1a>
	cont+=x;
  ba:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  be:	d8 0f       	add	r29, r24
  c0:	d0 93 60 00 	sts	0x0060, r29	; 0x800060 <__DATA_REGION_ORIGIN__>
  c4:	83 ed       	ldi	r24, 0xD3	; 211
  c6:	90 e3       	ldi	r25, 0x30	; 48
  c8:	01 97       	sbiw	r24, 0x01	; 1
  ca:	f1 f7       	brne	.-4      	; 0xc8 <boton+0x34>
  cc:	00 c0       	rjmp	.+0      	; 0xce <boton+0x3a>
  ce:	00 00       	nop
	_delay_ms(50);	
}
  d0:	df 91       	pop	r29
  d2:	cf 91       	pop	r28
  d4:	1f 91       	pop	r17
  d6:	0f 91       	pop	r16
  d8:	08 95       	ret

000000da <main>:

int main(void)
{
	DDRA=0;
  da:	1a ba       	out	0x1a, r1	; 26
	PORTA=0b10000001;
  dc:	81 e8       	ldi	r24, 0x81	; 129
  de:	8b bb       	out	0x1b, r24	; 27
	DDRC=255;
  e0:	8f ef       	ldi	r24, 0xFF	; 255
  e2:	84 bb       	out	0x14, r24	; 20
    while (1) 
    {
		if(cero_en_bit(&PINA,0) && cont<19)boton(&PINA,0,1);
  e4:	60 e0       	ldi	r22, 0x00	; 0
  e6:	89 e3       	ldi	r24, 0x39	; 57
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	0e 94 3e 00 	call	0x7c	; 0x7c <cero_en_bit>
  ee:	88 23       	and	r24, r24
  f0:	51 f0       	breq	.+20     	; 0x106 <main+0x2c>
  f2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  f6:	83 31       	cpi	r24, 0x13	; 19
  f8:	30 f4       	brcc	.+12     	; 0x106 <main+0x2c>
  fa:	41 e0       	ldi	r20, 0x01	; 1
  fc:	60 e0       	ldi	r22, 0x00	; 0
  fe:	89 e3       	ldi	r24, 0x39	; 57
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	0e 94 4a 00 	call	0x94	; 0x94 <boton>
		if(cero_en_bit(&PINA,7) && cont>0)boton(&PINA,7,-1);
 106:	67 e0       	ldi	r22, 0x07	; 7
 108:	89 e3       	ldi	r24, 0x39	; 57
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	0e 94 3e 00 	call	0x7c	; 0x7c <cero_en_bit>
 110:	88 23       	and	r24, r24
 112:	51 f0       	breq	.+20     	; 0x128 <main+0x4e>
 114:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 118:	88 23       	and	r24, r24
 11a:	31 f0       	breq	.+12     	; 0x128 <main+0x4e>
 11c:	4f ef       	ldi	r20, 0xFF	; 255
 11e:	67 e0       	ldi	r22, 0x07	; 7
 120:	89 e3       	ldi	r24, 0x39	; 57
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	0e 94 4a 00 	call	0x94	; 0x94 <boton>
		uint8_t out=cont%10;
 128:	30 91 60 00 	lds	r19, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 12c:	9d ec       	ldi	r25, 0xCD	; 205
 12e:	39 9f       	mul	r19, r25
 130:	91 2d       	mov	r25, r1
 132:	11 24       	eor	r1, r1
 134:	89 2f       	mov	r24, r25
 136:	86 95       	lsr	r24
 138:	86 95       	lsr	r24
 13a:	86 95       	lsr	r24
 13c:	88 0f       	add	r24, r24
 13e:	28 2f       	mov	r18, r24
 140:	22 0f       	add	r18, r18
 142:	22 0f       	add	r18, r18
 144:	82 0f       	add	r24, r18
 146:	38 1b       	sub	r19, r24
 148:	83 2f       	mov	r24, r19
		out=out<<4;
 14a:	82 95       	swap	r24
 14c:	80 7f       	andi	r24, 0xF0	; 240
		out|=cont/10;
 14e:	96 95       	lsr	r25
 150:	96 95       	lsr	r25
 152:	96 95       	lsr	r25
 154:	89 2b       	or	r24, r25
		PORTC=out;
 156:	85 bb       	out	0x15, r24	; 21
    }
 158:	c5 cf       	rjmp	.-118    	; 0xe4 <main+0xa>

0000015a <_exit>:
 15a:	f8 94       	cli

0000015c <__stop_program>:
 15c:	ff cf       	rjmp	.-2      	; 0x15c <__stop_program>
