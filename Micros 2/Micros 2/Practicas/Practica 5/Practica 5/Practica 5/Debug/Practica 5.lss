
Practica 5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000036a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  0000036a  000003fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800064  00800064  00000402  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000402  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000434  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  00000470  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d9a  00000000  00000000  00000528  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007f4  00000000  00000000  000012c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000755  00000000  00000000  00001ab6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c4  00000000  00000000  0000220c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000480  00000000  00000000  000023d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000088d  00000000  00000000  00002850  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  000030dd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 90 01 	jmp	0x320	; 0x320 <__vector_19>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e6       	ldi	r30, 0x6A	; 106
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 36       	cpi	r26, 0x64	; 100
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a4 e6       	ldi	r26, 0x64	; 100
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 36       	cpi	r26, 0x66	; 102
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 40 01 	call	0x280	; 0x280 <main>
  8a:	0c 94 b3 01 	jmp	0x366	; 0x366 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <toggle_e>:
		case 13:return 0b01011110;break;
		case 14:return 0b01111001;break;
		case 15:return 0b01110001;break;
	}
	return 0;
}
  92:	82 b3       	in	r24, 0x12	; 18
  94:	80 64       	ori	r24, 0x40	; 64
  96:	82 bb       	out	0x12, r24	; 18
  98:	00 c0       	rjmp	.+0      	; 0x9a <toggle_e+0x8>
  9a:	82 b3       	in	r24, 0x12	; 18
  9c:	8f 7b       	andi	r24, 0xBF	; 191
  9e:	82 bb       	out	0x12, r24	; 18
  a0:	08 95       	ret

000000a2 <lcd_write>:
  a2:	cf 93       	push	r28
  a4:	df 93       	push	r29
  a6:	d8 2f       	mov	r29, r24
  a8:	66 23       	and	r22, r22
  aa:	21 f0       	breq	.+8      	; 0xb4 <lcd_write+0x12>
  ac:	82 b3       	in	r24, 0x12	; 18
  ae:	80 61       	ori	r24, 0x10	; 16
  b0:	82 bb       	out	0x12, r24	; 18
  b2:	03 c0       	rjmp	.+6      	; 0xba <lcd_write+0x18>
  b4:	82 b3       	in	r24, 0x12	; 18
  b6:	8f 7e       	andi	r24, 0xEF	; 239
  b8:	82 bb       	out	0x12, r24	; 18
  ba:	82 b3       	in	r24, 0x12	; 18
  bc:	8f 7d       	andi	r24, 0xDF	; 223
  be:	82 bb       	out	0x12, r24	; 18
  c0:	81 b3       	in	r24, 0x11	; 17
  c2:	8f 60       	ori	r24, 0x0F	; 15
  c4:	81 bb       	out	0x11, r24	; 17
  c6:	c2 b3       	in	r28, 0x12	; 18
  c8:	c0 7f       	andi	r28, 0xF0	; 240
  ca:	8d 2f       	mov	r24, r29
  cc:	82 95       	swap	r24
  ce:	8f 70       	andi	r24, 0x0F	; 15
  d0:	8c 2b       	or	r24, r28
  d2:	82 bb       	out	0x12, r24	; 18
  d4:	0e 94 49 00 	call	0x92	; 0x92 <toggle_e>
  d8:	df 70       	andi	r29, 0x0F	; 15
  da:	dc 2b       	or	r29, r28
  dc:	d2 bb       	out	0x12, r29	; 18
  de:	0e 94 49 00 	call	0x92	; 0x92 <toggle_e>
  e2:	cf 60       	ori	r28, 0x0F	; 15
  e4:	c2 bb       	out	0x12, r28	; 18
  e6:	df 91       	pop	r29
  e8:	cf 91       	pop	r28
  ea:	08 95       	ret

000000ec <lcd_read>:
  ec:	88 23       	and	r24, r24
  ee:	21 f0       	breq	.+8      	; 0xf8 <lcd_read+0xc>
  f0:	82 b3       	in	r24, 0x12	; 18
  f2:	80 61       	ori	r24, 0x10	; 16
  f4:	82 bb       	out	0x12, r24	; 18
  f6:	03 c0       	rjmp	.+6      	; 0xfe <lcd_read+0x12>
  f8:	82 b3       	in	r24, 0x12	; 18
  fa:	8f 7e       	andi	r24, 0xEF	; 239
  fc:	82 bb       	out	0x12, r24	; 18
  fe:	82 b3       	in	r24, 0x12	; 18
 100:	80 62       	ori	r24, 0x20	; 32
 102:	82 bb       	out	0x12, r24	; 18
 104:	81 b3       	in	r24, 0x11	; 17
 106:	80 7f       	andi	r24, 0xF0	; 240
 108:	81 bb       	out	0x11, r24	; 17
 10a:	82 b3       	in	r24, 0x12	; 18
 10c:	80 64       	ori	r24, 0x40	; 64
 10e:	82 bb       	out	0x12, r24	; 18
 110:	00 c0       	rjmp	.+0      	; 0x112 <lcd_read+0x26>
 112:	90 b3       	in	r25, 0x10	; 16
 114:	92 95       	swap	r25
 116:	90 7f       	andi	r25, 0xF0	; 240
 118:	82 b3       	in	r24, 0x12	; 18
 11a:	8f 7b       	andi	r24, 0xBF	; 191
 11c:	82 bb       	out	0x12, r24	; 18
 11e:	00 c0       	rjmp	.+0      	; 0x120 <lcd_read+0x34>
 120:	82 b3       	in	r24, 0x12	; 18
 122:	80 64       	ori	r24, 0x40	; 64
 124:	82 bb       	out	0x12, r24	; 18
 126:	00 c0       	rjmp	.+0      	; 0x128 <lcd_read+0x3c>
 128:	80 b3       	in	r24, 0x10	; 16
 12a:	8f 70       	andi	r24, 0x0F	; 15
 12c:	22 b3       	in	r18, 0x12	; 18
 12e:	2f 7b       	andi	r18, 0xBF	; 191
 130:	22 bb       	out	0x12, r18	; 18
 132:	89 2b       	or	r24, r25
 134:	08 95       	ret

00000136 <lcd_waitbusy>:
 136:	80 e0       	ldi	r24, 0x00	; 0
 138:	0e 94 76 00 	call	0xec	; 0xec <lcd_read>
 13c:	88 23       	and	r24, r24
 13e:	dc f3       	brlt	.-10     	; 0x136 <lcd_waitbusy>
 140:	00 c0       	rjmp	.+0      	; 0x142 <lcd_waitbusy+0xc>
 142:	80 e0       	ldi	r24, 0x00	; 0
 144:	0e 94 76 00 	call	0xec	; 0xec <lcd_read>
 148:	08 95       	ret

0000014a <lcd_command>:
 14a:	cf 93       	push	r28
 14c:	c8 2f       	mov	r28, r24
 14e:	0e 94 9b 00 	call	0x136	; 0x136 <lcd_waitbusy>
 152:	60 e0       	ldi	r22, 0x00	; 0
 154:	8c 2f       	mov	r24, r28
 156:	0e 94 51 00 	call	0xa2	; 0xa2 <lcd_write>
 15a:	cf 91       	pop	r28
 15c:	08 95       	ret

0000015e <lcd_gotoxy>:
 15e:	61 11       	cpse	r22, r1
 160:	04 c0       	rjmp	.+8      	; 0x16a <lcd_gotoxy+0xc>
 162:	80 58       	subi	r24, 0x80	; 128
 164:	0e 94 a5 00 	call	0x14a	; 0x14a <lcd_command>
 168:	08 95       	ret
 16a:	80 54       	subi	r24, 0x40	; 64
 16c:	0e 94 a5 00 	call	0x14a	; 0x14a <lcd_command>
 170:	08 95       	ret

00000172 <lcd_clrscr>:
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	0e 94 a5 00 	call	0x14a	; 0x14a <lcd_command>
 178:	08 95       	ret

0000017a <lcd_putc>:
 17a:	cf 93       	push	r28
 17c:	c8 2f       	mov	r28, r24
 17e:	0e 94 9b 00 	call	0x136	; 0x136 <lcd_waitbusy>
 182:	ca 30       	cpi	r28, 0x0A	; 10
 184:	49 f4       	brne	.+18     	; 0x198 <lcd_putc+0x1e>
 186:	80 34       	cpi	r24, 0x40	; 64
 188:	10 f4       	brcc	.+4      	; 0x18e <lcd_putc+0x14>
 18a:	80 e4       	ldi	r24, 0x40	; 64
 18c:	01 c0       	rjmp	.+2      	; 0x190 <lcd_putc+0x16>
 18e:	80 e0       	ldi	r24, 0x00	; 0
 190:	80 58       	subi	r24, 0x80	; 128
 192:	0e 94 a5 00 	call	0x14a	; 0x14a <lcd_command>
 196:	04 c0       	rjmp	.+8      	; 0x1a0 <lcd_putc+0x26>
 198:	61 e0       	ldi	r22, 0x01	; 1
 19a:	8c 2f       	mov	r24, r28
 19c:	0e 94 51 00 	call	0xa2	; 0xa2 <lcd_write>
 1a0:	cf 91       	pop	r28
 1a2:	08 95       	ret

000001a4 <lcd_init>:
 1a4:	1f 93       	push	r17
 1a6:	cf 93       	push	r28
 1a8:	df 93       	push	r29
 1aa:	18 2f       	mov	r17, r24
 1ac:	81 b3       	in	r24, 0x11	; 17
 1ae:	8f 67       	ori	r24, 0x7F	; 127
 1b0:	81 bb       	out	0x11, r24	; 17
 1b2:	80 ea       	ldi	r24, 0xA0	; 160
 1b4:	9f e0       	ldi	r25, 0x0F	; 15
 1b6:	01 97       	sbiw	r24, 0x01	; 1
 1b8:	f1 f7       	brne	.-4      	; 0x1b6 <lcd_init+0x12>
 1ba:	82 b3       	in	r24, 0x12	; 18
 1bc:	82 60       	ori	r24, 0x02	; 2
 1be:	82 bb       	out	0x12, r24	; 18
 1c0:	82 b3       	in	r24, 0x12	; 18
 1c2:	81 60       	ori	r24, 0x01	; 1
 1c4:	82 bb       	out	0x12, r24	; 18
 1c6:	0e 94 49 00 	call	0x92	; 0x92 <toggle_e>
 1ca:	80 ee       	ldi	r24, 0xE0	; 224
 1cc:	94 e0       	ldi	r25, 0x04	; 4
 1ce:	01 97       	sbiw	r24, 0x01	; 1
 1d0:	f1 f7       	brne	.-4      	; 0x1ce <lcd_init+0x2a>
 1d2:	0e 94 49 00 	call	0x92	; 0x92 <toggle_e>
 1d6:	c0 e1       	ldi	r28, 0x10	; 16
 1d8:	d0 e0       	ldi	r29, 0x00	; 0
 1da:	ce 01       	movw	r24, r28
 1dc:	01 97       	sbiw	r24, 0x01	; 1
 1de:	f1 f7       	brne	.-4      	; 0x1dc <lcd_init+0x38>
 1e0:	0e 94 49 00 	call	0x92	; 0x92 <toggle_e>
 1e4:	ce 01       	movw	r24, r28
 1e6:	01 97       	sbiw	r24, 0x01	; 1
 1e8:	f1 f7       	brne	.-4      	; 0x1e6 <lcd_init+0x42>
 1ea:	82 b3       	in	r24, 0x12	; 18
 1ec:	8e 7f       	andi	r24, 0xFE	; 254
 1ee:	82 bb       	out	0x12, r24	; 18
 1f0:	0e 94 49 00 	call	0x92	; 0x92 <toggle_e>
 1f4:	21 97       	sbiw	r28, 0x01	; 1
 1f6:	f1 f7       	brne	.-4      	; 0x1f4 <lcd_init+0x50>
 1f8:	88 e2       	ldi	r24, 0x28	; 40
 1fa:	0e 94 a5 00 	call	0x14a	; 0x14a <lcd_command>
 1fe:	88 e0       	ldi	r24, 0x08	; 8
 200:	0e 94 a5 00 	call	0x14a	; 0x14a <lcd_command>
 204:	0e 94 b9 00 	call	0x172	; 0x172 <lcd_clrscr>
 208:	86 e0       	ldi	r24, 0x06	; 6
 20a:	0e 94 a5 00 	call	0x14a	; 0x14a <lcd_command>
 20e:	81 2f       	mov	r24, r17
 210:	0e 94 a5 00 	call	0x14a	; 0x14a <lcd_command>
 214:	df 91       	pop	r29
 216:	cf 91       	pop	r28
 218:	1f 91       	pop	r17
 21a:	08 95       	ret

0000021c <cero_en_bit>:


uint8_t cero_en_bit(volatile uint8_t *LUGAR, uint8_t BIT)
{
	return (!(*LUGAR&(1<<BIT)));
 21c:	fc 01       	movw	r30, r24
 21e:	80 81       	ld	r24, Z
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	02 c0       	rjmp	.+4      	; 0x228 <cero_en_bit+0xc>
 224:	95 95       	asr	r25
 226:	87 95       	ror	r24
 228:	6a 95       	dec	r22
 22a:	e2 f7       	brpl	.-8      	; 0x224 <cero_en_bit+0x8>
 22c:	f1 e0       	ldi	r31, 0x01	; 1
 22e:	8f 27       	eor	r24, r31
}
 230:	81 70       	andi	r24, 0x01	; 1
 232:	08 95       	ret

00000234 <boton>:
uint8_t uno_en_bit(volatile uint8_t *LUGAR, uint8_t BIT);
uint8_t BCD(uint8_t in);
//*************************************************************************/
//clc();

void boton(volatile uint8_t *LUGAR, uint8_t BIT){
 234:	0f 93       	push	r16
 236:	1f 93       	push	r17
 238:	cf 93       	push	r28
 23a:	8c 01       	movw	r16, r24
 23c:	c6 2f       	mov	r28, r22
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 23e:	83 ed       	ldi	r24, 0xD3	; 211
 240:	90 e3       	ldi	r25, 0x30	; 48
 242:	01 97       	sbiw	r24, 0x01	; 1
 244:	f1 f7       	brne	.-4      	; 0x242 <boton+0xe>
 246:	00 c0       	rjmp	.+0      	; 0x248 <boton+0x14>
 248:	00 00       	nop
	_delay_ms(50);
	while(cero_en_bit(LUGAR,BIT)){}
 24a:	6c 2f       	mov	r22, r28
 24c:	c8 01       	movw	r24, r16
 24e:	0e 94 0e 01 	call	0x21c	; 0x21c <cero_en_bit>
 252:	81 11       	cpse	r24, r1
 254:	fa cf       	rjmp	.-12     	; 0x24a <boton+0x16>
 256:	83 ed       	ldi	r24, 0xD3	; 211
 258:	90 e3       	ldi	r25, 0x30	; 48
 25a:	01 97       	sbiw	r24, 0x01	; 1
 25c:	f1 f7       	brne	.-4      	; 0x25a <boton+0x26>
 25e:	00 c0       	rjmp	.+0      	; 0x260 <boton+0x2c>
 260:	00 00       	nop
	_delay_ms(50);	
}
 262:	cf 91       	pop	r28
 264:	1f 91       	pop	r17
 266:	0f 91       	pop	r16
 268:	08 95       	ret

0000026a <uno_en_bit>:
	return (!(*LUGAR&(1<<BIT)));
}

uint8_t uno_en_bit(volatile uint8_t *LUGAR, uint8_t BIT)
{
	return (*LUGAR&(1<<BIT));
 26a:	fc 01       	movw	r30, r24
 26c:	20 81       	ld	r18, Z
 26e:	81 e0       	ldi	r24, 0x01	; 1
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	02 c0       	rjmp	.+4      	; 0x278 <uno_en_bit+0xe>
 274:	88 0f       	add	r24, r24
 276:	99 1f       	adc	r25, r25
 278:	6a 95       	dec	r22
 27a:	e2 f7       	brpl	.-8      	; 0x274 <uno_en_bit+0xa>
}
 27c:	82 23       	and	r24, r18
 27e:	08 95       	ret

00000280 <main>:
int p=-1;
int c=0;

int main(void)
{
	sei();
 280:	78 94       	sei
	DDRA= 0;
 282:	1a ba       	out	0x1a, r1	; 26
	PORTA=1;
 284:	81 e0       	ldi	r24, 0x01	; 1
 286:	8b bb       	out	0x1b, r24	; 27
	lcd_init(LCD_DISP_ON);
 288:	8c e0       	ldi	r24, 0x0C	; 12
 28a:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <lcd_init>
	TCNT0= 0;
 28e:	12 be       	out	0x32, r1	; 50
	TIMSK= 2;
 290:	82 e0       	ldi	r24, 0x02	; 2
 292:	89 bf       	out	0x39, r24	; 57
	OCR0= 38;
 294:	86 e2       	ldi	r24, 0x26	; 38
 296:	8c bf       	out	0x3c, r24	; 60
	
	
    while (1) 
    {
		if(p==16)p=-1,lcd_clrscr();
 298:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 29c:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 2a0:	40 97       	sbiw	r24, 0x10	; 16
 2a2:	41 f4       	brne	.+16     	; 0x2b4 <main+0x34>
 2a4:	8f ef       	ldi	r24, 0xFF	; 255
 2a6:	9f ef       	ldi	r25, 0xFF	; 255
 2a8:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 2ac:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 2b0:	0e 94 b9 00 	call	0x172	; 0x172 <lcd_clrscr>
		while(uno_en_bit(&PINA,0)){}
 2b4:	60 e0       	ldi	r22, 0x00	; 0
 2b6:	89 e3       	ldi	r24, 0x39	; 57
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	0e 94 35 01 	call	0x26a	; 0x26a <uno_en_bit>
 2be:	81 11       	cpse	r24, r1
 2c0:	f9 cf       	rjmp	.-14     	; 0x2b4 <main+0x34>
		boton(&PINA,0);	
 2c2:	60 e0       	ldi	r22, 0x00	; 0
 2c4:	89 e3       	ldi	r24, 0x39	; 57
 2c6:	90 e0       	ldi	r25, 0x00	; 0
 2c8:	0e 94 1a 01 	call	0x234	; 0x234 <boton>
		if(c==0)p+=1;
 2cc:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__data_end>
 2d0:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <__data_end+0x1>
 2d4:	89 2b       	or	r24, r25
 2d6:	49 f4       	brne	.+18     	; 0x2ea <main+0x6a>
 2d8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 2dc:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 2e0:	01 96       	adiw	r24, 0x01	; 1
 2e2:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 2e6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		lcd_gotoxy(p,0);	
 2ea:	60 e0       	ldi	r22, 0x00	; 0
 2ec:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 2f0:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_gotoxy>
		TCCR0= 0b00001100;	
 2f4:	8c e0       	ldi	r24, 0x0C	; 12
 2f6:	83 bf       	out	0x33, r24	; 51
		lcd_putc(x);
 2f8:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <x>
 2fc:	0e 94 bd 00 	call	0x17a	; 0x17a <lcd_putc>
		x++;
 300:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <x>
 304:	8f 5f       	subi	r24, 0xFF	; 255
 306:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <x>
		if(x=='Z'+1)x='A';
 30a:	8b 35       	cpi	r24, 0x5B	; 91
 30c:	19 f4       	brne	.+6      	; 0x314 <main+0x94>
 30e:	81 e4       	ldi	r24, 0x41	; 65
 310:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <x>
		TCNT0= 0;
 314:	12 be       	out	0x32, r1	; 50
		c=0;
 316:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <__data_end+0x1>
 31a:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <__data_end>
	}
 31e:	bc cf       	rjmp	.-136    	; 0x298 <main+0x18>

00000320 <__vector_19>:
uint8_t uno_en_bit(volatile uint8_t *LUGAR, uint8_t BIT)
{
	return (*LUGAR&(1<<BIT));
}

ISR(TIMER0_COMP_vect){
 320:	1f 92       	push	r1
 322:	0f 92       	push	r0
 324:	0f b6       	in	r0, 0x3f	; 63
 326:	0f 92       	push	r0
 328:	11 24       	eor	r1, r1
 32a:	8f 93       	push	r24
 32c:	9f 93       	push	r25
	c++;
 32e:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__data_end>
 332:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <__data_end+0x1>
 336:	01 96       	adiw	r24, 0x01	; 1
 338:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <__data_end+0x1>
 33c:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__data_end>
	if(c==100){
 340:	84 36       	cpi	r24, 0x64	; 100
 342:	91 05       	cpc	r25, r1
 344:	49 f4       	brne	.+18     	; 0x358 <__vector_19+0x38>
		x='A';
 346:	81 e4       	ldi	r24, 0x41	; 65
 348:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <x>
		TCCR0=0;
 34c:	13 be       	out	0x33, r1	; 51
		TCNT0=0;
 34e:	12 be       	out	0x32, r1	; 50
		c=0;	
 350:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <__data_end+0x1>
 354:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <__data_end>
	}
 358:	9f 91       	pop	r25
 35a:	8f 91       	pop	r24
 35c:	0f 90       	pop	r0
 35e:	0f be       	out	0x3f, r0	; 63
 360:	0f 90       	pop	r0
 362:	1f 90       	pop	r1
 364:	18 95       	reti

00000366 <_exit>:
 366:	f8 94       	cli

00000368 <__stop_program>:
 368:	ff cf       	rjmp	.-2      	; 0x368 <__stop_program>
