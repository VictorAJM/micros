
Practica 3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000404  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000458  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000458  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000488  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000b8  00000000  00000000  000004c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000107b  00000000  00000000  0000057c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000080e  00000000  00000000  000015f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000081e  00000000  00000000  00001e05  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001b8  00000000  00000000  00002624  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000481  00000000  00000000  000027dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000a2b  00000000  00000000  00002c5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a8  00000000  00000000  00003688  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <main>
  64:	0c 94 00 02 	jmp	0x400	; 0x400 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <toggle_e>:
		case 13:return 0b01011110;break;
		case 14:return 0b01111001;break;
		case 15:return 0b01110001;break;
	}
	return 0;
}
  6c:	82 b3       	in	r24, 0x12	; 18
  6e:	80 64       	ori	r24, 0x40	; 64
  70:	82 bb       	out	0x12, r24	; 18
  72:	00 c0       	rjmp	.+0      	; 0x74 <toggle_e+0x8>
  74:	82 b3       	in	r24, 0x12	; 18
  76:	8f 7b       	andi	r24, 0xBF	; 191
  78:	82 bb       	out	0x12, r24	; 18
  7a:	08 95       	ret

0000007c <lcd_write>:
  7c:	cf 93       	push	r28
  7e:	df 93       	push	r29
  80:	d8 2f       	mov	r29, r24
  82:	66 23       	and	r22, r22
  84:	21 f0       	breq	.+8      	; 0x8e <lcd_write+0x12>
  86:	82 b3       	in	r24, 0x12	; 18
  88:	80 61       	ori	r24, 0x10	; 16
  8a:	82 bb       	out	0x12, r24	; 18
  8c:	03 c0       	rjmp	.+6      	; 0x94 <lcd_write+0x18>
  8e:	82 b3       	in	r24, 0x12	; 18
  90:	8f 7e       	andi	r24, 0xEF	; 239
  92:	82 bb       	out	0x12, r24	; 18
  94:	82 b3       	in	r24, 0x12	; 18
  96:	8f 7d       	andi	r24, 0xDF	; 223
  98:	82 bb       	out	0x12, r24	; 18
  9a:	81 b3       	in	r24, 0x11	; 17
  9c:	8f 60       	ori	r24, 0x0F	; 15
  9e:	81 bb       	out	0x11, r24	; 17
  a0:	c2 b3       	in	r28, 0x12	; 18
  a2:	c0 7f       	andi	r28, 0xF0	; 240
  a4:	8d 2f       	mov	r24, r29
  a6:	82 95       	swap	r24
  a8:	8f 70       	andi	r24, 0x0F	; 15
  aa:	8c 2b       	or	r24, r28
  ac:	82 bb       	out	0x12, r24	; 18
  ae:	0e 94 36 00 	call	0x6c	; 0x6c <toggle_e>
  b2:	df 70       	andi	r29, 0x0F	; 15
  b4:	dc 2b       	or	r29, r28
  b6:	d2 bb       	out	0x12, r29	; 18
  b8:	0e 94 36 00 	call	0x6c	; 0x6c <toggle_e>
  bc:	cf 60       	ori	r28, 0x0F	; 15
  be:	c2 bb       	out	0x12, r28	; 18
  c0:	df 91       	pop	r29
  c2:	cf 91       	pop	r28
  c4:	08 95       	ret

000000c6 <lcd_read>:
  c6:	88 23       	and	r24, r24
  c8:	21 f0       	breq	.+8      	; 0xd2 <lcd_read+0xc>
  ca:	82 b3       	in	r24, 0x12	; 18
  cc:	80 61       	ori	r24, 0x10	; 16
  ce:	82 bb       	out	0x12, r24	; 18
  d0:	03 c0       	rjmp	.+6      	; 0xd8 <lcd_read+0x12>
  d2:	82 b3       	in	r24, 0x12	; 18
  d4:	8f 7e       	andi	r24, 0xEF	; 239
  d6:	82 bb       	out	0x12, r24	; 18
  d8:	82 b3       	in	r24, 0x12	; 18
  da:	80 62       	ori	r24, 0x20	; 32
  dc:	82 bb       	out	0x12, r24	; 18
  de:	81 b3       	in	r24, 0x11	; 17
  e0:	80 7f       	andi	r24, 0xF0	; 240
  e2:	81 bb       	out	0x11, r24	; 17
  e4:	82 b3       	in	r24, 0x12	; 18
  e6:	80 64       	ori	r24, 0x40	; 64
  e8:	82 bb       	out	0x12, r24	; 18
  ea:	00 c0       	rjmp	.+0      	; 0xec <lcd_read+0x26>
  ec:	90 b3       	in	r25, 0x10	; 16
  ee:	92 95       	swap	r25
  f0:	90 7f       	andi	r25, 0xF0	; 240
  f2:	82 b3       	in	r24, 0x12	; 18
  f4:	8f 7b       	andi	r24, 0xBF	; 191
  f6:	82 bb       	out	0x12, r24	; 18
  f8:	00 c0       	rjmp	.+0      	; 0xfa <lcd_read+0x34>
  fa:	82 b3       	in	r24, 0x12	; 18
  fc:	80 64       	ori	r24, 0x40	; 64
  fe:	82 bb       	out	0x12, r24	; 18
 100:	00 c0       	rjmp	.+0      	; 0x102 <lcd_read+0x3c>
 102:	80 b3       	in	r24, 0x10	; 16
 104:	8f 70       	andi	r24, 0x0F	; 15
 106:	22 b3       	in	r18, 0x12	; 18
 108:	2f 7b       	andi	r18, 0xBF	; 191
 10a:	22 bb       	out	0x12, r18	; 18
 10c:	89 2b       	or	r24, r25
 10e:	08 95       	ret

00000110 <lcd_waitbusy>:
 110:	80 e0       	ldi	r24, 0x00	; 0
 112:	0e 94 63 00 	call	0xc6	; 0xc6 <lcd_read>
 116:	88 23       	and	r24, r24
 118:	dc f3       	brlt	.-10     	; 0x110 <lcd_waitbusy>
 11a:	82 e0       	ldi	r24, 0x02	; 2
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	01 97       	sbiw	r24, 0x01	; 1
 120:	f1 f7       	brne	.-4      	; 0x11e <lcd_waitbusy+0xe>
 122:	80 e0       	ldi	r24, 0x00	; 0
 124:	0e 94 63 00 	call	0xc6	; 0xc6 <lcd_read>
 128:	08 95       	ret

0000012a <lcd_command>:
 12a:	cf 93       	push	r28
 12c:	c8 2f       	mov	r28, r24
 12e:	0e 94 88 00 	call	0x110	; 0x110 <lcd_waitbusy>
 132:	60 e0       	ldi	r22, 0x00	; 0
 134:	8c 2f       	mov	r24, r28
 136:	0e 94 3e 00 	call	0x7c	; 0x7c <lcd_write>
 13a:	cf 91       	pop	r28
 13c:	08 95       	ret

0000013e <lcd_gotoxy>:
 13e:	61 11       	cpse	r22, r1
 140:	04 c0       	rjmp	.+8      	; 0x14a <lcd_gotoxy+0xc>
 142:	80 58       	subi	r24, 0x80	; 128
 144:	0e 94 95 00 	call	0x12a	; 0x12a <lcd_command>
 148:	08 95       	ret
 14a:	80 54       	subi	r24, 0x40	; 64
 14c:	0e 94 95 00 	call	0x12a	; 0x12a <lcd_command>
 150:	08 95       	ret

00000152 <lcd_clrscr>:
 152:	81 e0       	ldi	r24, 0x01	; 1
 154:	0e 94 95 00 	call	0x12a	; 0x12a <lcd_command>
 158:	08 95       	ret

0000015a <lcd_putc>:
 15a:	cf 93       	push	r28
 15c:	c8 2f       	mov	r28, r24
 15e:	0e 94 88 00 	call	0x110	; 0x110 <lcd_waitbusy>
 162:	ca 30       	cpi	r28, 0x0A	; 10
 164:	49 f4       	brne	.+18     	; 0x178 <lcd_putc+0x1e>
 166:	80 34       	cpi	r24, 0x40	; 64
 168:	10 f4       	brcc	.+4      	; 0x16e <lcd_putc+0x14>
 16a:	80 e4       	ldi	r24, 0x40	; 64
 16c:	01 c0       	rjmp	.+2      	; 0x170 <lcd_putc+0x16>
 16e:	80 e0       	ldi	r24, 0x00	; 0
 170:	80 58       	subi	r24, 0x80	; 128
 172:	0e 94 95 00 	call	0x12a	; 0x12a <lcd_command>
 176:	04 c0       	rjmp	.+8      	; 0x180 <lcd_putc+0x26>
 178:	61 e0       	ldi	r22, 0x01	; 1
 17a:	8c 2f       	mov	r24, r28
 17c:	0e 94 3e 00 	call	0x7c	; 0x7c <lcd_write>
 180:	cf 91       	pop	r28
 182:	08 95       	ret

00000184 <lcd_init>:
 184:	1f 93       	push	r17
 186:	cf 93       	push	r28
 188:	df 93       	push	r29
 18a:	18 2f       	mov	r17, r24
 18c:	81 b3       	in	r24, 0x11	; 17
 18e:	8f 67       	ori	r24, 0x7F	; 127
 190:	81 bb       	out	0x11, r24	; 17
 192:	80 e8       	ldi	r24, 0x80	; 128
 194:	9e e3       	ldi	r25, 0x3E	; 62
 196:	01 97       	sbiw	r24, 0x01	; 1
 198:	f1 f7       	brne	.-4      	; 0x196 <lcd_init+0x12>
 19a:	82 b3       	in	r24, 0x12	; 18
 19c:	82 60       	ori	r24, 0x02	; 2
 19e:	82 bb       	out	0x12, r24	; 18
 1a0:	82 b3       	in	r24, 0x12	; 18
 1a2:	81 60       	ori	r24, 0x01	; 1
 1a4:	82 bb       	out	0x12, r24	; 18
 1a6:	0e 94 36 00 	call	0x6c	; 0x6c <toggle_e>
 1aa:	80 e8       	ldi	r24, 0x80	; 128
 1ac:	93 e1       	ldi	r25, 0x13	; 19
 1ae:	01 97       	sbiw	r24, 0x01	; 1
 1b0:	f1 f7       	brne	.-4      	; 0x1ae <lcd_init+0x2a>
 1b2:	0e 94 36 00 	call	0x6c	; 0x6c <toggle_e>
 1b6:	c0 e4       	ldi	r28, 0x40	; 64
 1b8:	d0 e0       	ldi	r29, 0x00	; 0
 1ba:	ce 01       	movw	r24, r28
 1bc:	01 97       	sbiw	r24, 0x01	; 1
 1be:	f1 f7       	brne	.-4      	; 0x1bc <lcd_init+0x38>
 1c0:	0e 94 36 00 	call	0x6c	; 0x6c <toggle_e>
 1c4:	ce 01       	movw	r24, r28
 1c6:	01 97       	sbiw	r24, 0x01	; 1
 1c8:	f1 f7       	brne	.-4      	; 0x1c6 <lcd_init+0x42>
 1ca:	82 b3       	in	r24, 0x12	; 18
 1cc:	8e 7f       	andi	r24, 0xFE	; 254
 1ce:	82 bb       	out	0x12, r24	; 18
 1d0:	0e 94 36 00 	call	0x6c	; 0x6c <toggle_e>
 1d4:	21 97       	sbiw	r28, 0x01	; 1
 1d6:	f1 f7       	brne	.-4      	; 0x1d4 <lcd_init+0x50>
 1d8:	88 e2       	ldi	r24, 0x28	; 40
 1da:	0e 94 95 00 	call	0x12a	; 0x12a <lcd_command>
 1de:	88 e0       	ldi	r24, 0x08	; 8
 1e0:	0e 94 95 00 	call	0x12a	; 0x12a <lcd_command>
 1e4:	0e 94 a9 00 	call	0x152	; 0x152 <lcd_clrscr>
 1e8:	86 e0       	ldi	r24, 0x06	; 6
 1ea:	0e 94 95 00 	call	0x12a	; 0x12a <lcd_command>
 1ee:	81 2f       	mov	r24, r17
 1f0:	0e 94 95 00 	call	0x12a	; 0x12a <lcd_command>
 1f4:	df 91       	pop	r29
 1f6:	cf 91       	pop	r28
 1f8:	1f 91       	pop	r17
 1fa:	08 95       	ret

000001fc <cero_en_bit>:


uint8_t cero_en_bit(volatile uint8_t *LUGAR, uint8_t BIT)
{
	return (!(*LUGAR&(1<<BIT)));
 1fc:	fc 01       	movw	r30, r24
 1fe:	80 81       	ld	r24, Z
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	02 c0       	rjmp	.+4      	; 0x208 <__EEPROM_REGION_LENGTH__+0x8>
 204:	95 95       	asr	r25
 206:	87 95       	ror	r24
 208:	6a 95       	dec	r22
 20a:	e2 f7       	brpl	.-8      	; 0x204 <__EEPROM_REGION_LENGTH__+0x4>
 20c:	f1 e0       	ldi	r31, 0x01	; 1
 20e:	8f 27       	eor	r24, r31
}
 210:	81 70       	andi	r24, 0x01	; 1
 212:	08 95       	ret

00000214 <boton>:

#define tec_ddr DDRA
#define tec_port PORTA
#define tec_pin PINA

void boton(volatile uint8_t *LUGAR, uint8_t BIT){
 214:	0f 93       	push	r16
 216:	1f 93       	push	r17
 218:	cf 93       	push	r28
 21a:	8c 01       	movw	r16, r24
 21c:	c6 2f       	mov	r28, r22
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 21e:	83 ed       	ldi	r24, 0xD3	; 211
 220:	90 e3       	ldi	r25, 0x30	; 48
 222:	01 97       	sbiw	r24, 0x01	; 1
 224:	f1 f7       	brne	.-4      	; 0x222 <boton+0xe>
 226:	00 c0       	rjmp	.+0      	; 0x228 <boton+0x14>
 228:	00 00       	nop
	_delay_ms(50);
	while(cero_en_bit(LUGAR,BIT)){}
 22a:	6c 2f       	mov	r22, r28
 22c:	c8 01       	movw	r24, r16
 22e:	0e 94 fe 00 	call	0x1fc	; 0x1fc <cero_en_bit>
 232:	81 11       	cpse	r24, r1
 234:	fa cf       	rjmp	.-12     	; 0x22a <boton+0x16>
 236:	83 ed       	ldi	r24, 0xD3	; 211
 238:	90 e3       	ldi	r25, 0x30	; 48
 23a:	01 97       	sbiw	r24, 0x01	; 1
 23c:	f1 f7       	brne	.-4      	; 0x23a <boton+0x26>
 23e:	00 c0       	rjmp	.+0      	; 0x240 <boton+0x2c>
 240:	00 00       	nop
	_delay_ms(50);	
}
 242:	cf 91       	pop	r28
 244:	1f 91       	pop	r17
 246:	0f 91       	pop	r16
 248:	08 95       	ret

0000024a <Teclado>:

char Teclado(){
 24a:	cf 93       	push	r28
	tec_ddr=0b00001111;
 24c:	8f e0       	ldi	r24, 0x0F	; 15
 24e:	8a bb       	out	0x1a, r24	; 26
	char x=47;
 250:	cf e2       	ldi	r28, 0x2F	; 47
	while(x==47){
 252:	a9 c0       	rjmp	.+338    	; 0x3a6 <Teclado+0x15c>
		//tec_port= 0b11111110;
		//if(cero_en_bit(&tec_pin,0))boton(&tec_pin,0,1);
		//if(cero_en_bit(&tec_pin,0))boton(&tec_pin,0,1);
		//if(cero_en_bit(&tec_pin,0))boton(&tec_pin,0,1);
		//if(cero_en_bit(&tec_pin,0))boton(&tec_pin,0,1);
		tec_port= 0b11111101;
 254:	8d ef       	ldi	r24, 0xFD	; 253
 256:	8b bb       	out	0x1b, r24	; 27
		if(cero_en_bit(&tec_pin,4))boton(&tec_pin,4),x=58;
 258:	64 e0       	ldi	r22, 0x04	; 4
 25a:	89 e3       	ldi	r24, 0x39	; 57
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	0e 94 fe 00 	call	0x1fc	; 0x1fc <cero_en_bit>
 262:	88 23       	and	r24, r24
 264:	31 f0       	breq	.+12     	; 0x272 <Teclado+0x28>
 266:	64 e0       	ldi	r22, 0x04	; 4
 268:	89 e3       	ldi	r24, 0x39	; 57
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	0e 94 0a 01 	call	0x214	; 0x214 <boton>
 270:	ca e3       	ldi	r28, 0x3A	; 58
		if(cero_en_bit(&tec_pin,5))boton(&tec_pin,5),x=57;
 272:	65 e0       	ldi	r22, 0x05	; 5
 274:	89 e3       	ldi	r24, 0x39	; 57
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	0e 94 fe 00 	call	0x1fc	; 0x1fc <cero_en_bit>
 27c:	88 23       	and	r24, r24
 27e:	31 f0       	breq	.+12     	; 0x28c <Teclado+0x42>
 280:	65 e0       	ldi	r22, 0x05	; 5
 282:	89 e3       	ldi	r24, 0x39	; 57
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	0e 94 0a 01 	call	0x214	; 0x214 <boton>
 28a:	c9 e3       	ldi	r28, 0x39	; 57
		if(cero_en_bit(&tec_pin,6))boton(&tec_pin,6),x=54;
 28c:	66 e0       	ldi	r22, 0x06	; 6
 28e:	89 e3       	ldi	r24, 0x39	; 57
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	0e 94 fe 00 	call	0x1fc	; 0x1fc <cero_en_bit>
 296:	88 23       	and	r24, r24
 298:	31 f0       	breq	.+12     	; 0x2a6 <Teclado+0x5c>
 29a:	66 e0       	ldi	r22, 0x06	; 6
 29c:	89 e3       	ldi	r24, 0x39	; 57
 29e:	90 e0       	ldi	r25, 0x00	; 0
 2a0:	0e 94 0a 01 	call	0x214	; 0x214 <boton>
 2a4:	c6 e3       	ldi	r28, 0x36	; 54
		if(cero_en_bit(&tec_pin,7))boton(&tec_pin,7),x=51;
 2a6:	67 e0       	ldi	r22, 0x07	; 7
 2a8:	89 e3       	ldi	r24, 0x39	; 57
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	0e 94 fe 00 	call	0x1fc	; 0x1fc <cero_en_bit>
 2b0:	88 23       	and	r24, r24
 2b2:	31 f0       	breq	.+12     	; 0x2c0 <Teclado+0x76>
 2b4:	67 e0       	ldi	r22, 0x07	; 7
 2b6:	89 e3       	ldi	r24, 0x39	; 57
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	0e 94 0a 01 	call	0x214	; 0x214 <boton>
 2be:	c3 e3       	ldi	r28, 0x33	; 51
		if(x!=47)break;
 2c0:	cf 32       	cpi	r28, 0x2F	; 47
 2c2:	09 f0       	breq	.+2      	; 0x2c6 <Teclado+0x7c>
 2c4:	73 c0       	rjmp	.+230    	; 0x3ac <Teclado+0x162>
		tec_port= 0b11111011;
 2c6:	8b ef       	ldi	r24, 0xFB	; 251
 2c8:	8b bb       	out	0x1b, r24	; 27
		if(cero_en_bit(&tec_pin,4))boton(&tec_pin,4),x=48;
 2ca:	64 e0       	ldi	r22, 0x04	; 4
 2cc:	89 e3       	ldi	r24, 0x39	; 57
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	0e 94 fe 00 	call	0x1fc	; 0x1fc <cero_en_bit>
 2d4:	88 23       	and	r24, r24
 2d6:	31 f0       	breq	.+12     	; 0x2e4 <Teclado+0x9a>
 2d8:	64 e0       	ldi	r22, 0x04	; 4
 2da:	89 e3       	ldi	r24, 0x39	; 57
 2dc:	90 e0       	ldi	r25, 0x00	; 0
 2de:	0e 94 0a 01 	call	0x214	; 0x214 <boton>
 2e2:	c0 e3       	ldi	r28, 0x30	; 48
		if(cero_en_bit(&tec_pin,5))boton(&tec_pin,5),x=56;
 2e4:	65 e0       	ldi	r22, 0x05	; 5
 2e6:	89 e3       	ldi	r24, 0x39	; 57
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	0e 94 fe 00 	call	0x1fc	; 0x1fc <cero_en_bit>
 2ee:	88 23       	and	r24, r24
 2f0:	31 f0       	breq	.+12     	; 0x2fe <Teclado+0xb4>
 2f2:	65 e0       	ldi	r22, 0x05	; 5
 2f4:	89 e3       	ldi	r24, 0x39	; 57
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	0e 94 0a 01 	call	0x214	; 0x214 <boton>
 2fc:	c8 e3       	ldi	r28, 0x38	; 56
		if(cero_en_bit(&tec_pin,6))boton(&tec_pin,6),x=53;
 2fe:	66 e0       	ldi	r22, 0x06	; 6
 300:	89 e3       	ldi	r24, 0x39	; 57
 302:	90 e0       	ldi	r25, 0x00	; 0
 304:	0e 94 fe 00 	call	0x1fc	; 0x1fc <cero_en_bit>
 308:	88 23       	and	r24, r24
 30a:	31 f0       	breq	.+12     	; 0x318 <Teclado+0xce>
 30c:	66 e0       	ldi	r22, 0x06	; 6
 30e:	89 e3       	ldi	r24, 0x39	; 57
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	0e 94 0a 01 	call	0x214	; 0x214 <boton>
 316:	c5 e3       	ldi	r28, 0x35	; 53
		if(cero_en_bit(&tec_pin,7))boton(&tec_pin,7),x=50;
 318:	67 e0       	ldi	r22, 0x07	; 7
 31a:	89 e3       	ldi	r24, 0x39	; 57
 31c:	90 e0       	ldi	r25, 0x00	; 0
 31e:	0e 94 fe 00 	call	0x1fc	; 0x1fc <cero_en_bit>
 322:	88 23       	and	r24, r24
 324:	31 f0       	breq	.+12     	; 0x332 <Teclado+0xe8>
 326:	67 e0       	ldi	r22, 0x07	; 7
 328:	89 e3       	ldi	r24, 0x39	; 57
 32a:	90 e0       	ldi	r25, 0x00	; 0
 32c:	0e 94 0a 01 	call	0x214	; 0x214 <boton>
 330:	c2 e3       	ldi	r28, 0x32	; 50
		if(x!=47)break;
 332:	cf 32       	cpi	r28, 0x2F	; 47
 334:	d9 f5       	brne	.+118    	; 0x3ac <Teclado+0x162>
		tec_port= 0b11110111;
 336:	87 ef       	ldi	r24, 0xF7	; 247
 338:	8b bb       	out	0x1b, r24	; 27
		if(cero_en_bit(&tec_pin,4))boton(&tec_pin,4),x=59;
 33a:	64 e0       	ldi	r22, 0x04	; 4
 33c:	89 e3       	ldi	r24, 0x39	; 57
 33e:	90 e0       	ldi	r25, 0x00	; 0
 340:	0e 94 fe 00 	call	0x1fc	; 0x1fc <cero_en_bit>
 344:	88 23       	and	r24, r24
 346:	31 f0       	breq	.+12     	; 0x354 <Teclado+0x10a>
 348:	64 e0       	ldi	r22, 0x04	; 4
 34a:	89 e3       	ldi	r24, 0x39	; 57
 34c:	90 e0       	ldi	r25, 0x00	; 0
 34e:	0e 94 0a 01 	call	0x214	; 0x214 <boton>
 352:	cb e3       	ldi	r28, 0x3B	; 59
		if(cero_en_bit(&tec_pin,5))boton(&tec_pin,5),x=55;
 354:	65 e0       	ldi	r22, 0x05	; 5
 356:	89 e3       	ldi	r24, 0x39	; 57
 358:	90 e0       	ldi	r25, 0x00	; 0
 35a:	0e 94 fe 00 	call	0x1fc	; 0x1fc <cero_en_bit>
 35e:	88 23       	and	r24, r24
 360:	31 f0       	breq	.+12     	; 0x36e <Teclado+0x124>
 362:	65 e0       	ldi	r22, 0x05	; 5
 364:	89 e3       	ldi	r24, 0x39	; 57
 366:	90 e0       	ldi	r25, 0x00	; 0
 368:	0e 94 0a 01 	call	0x214	; 0x214 <boton>
 36c:	c7 e3       	ldi	r28, 0x37	; 55
		if(cero_en_bit(&tec_pin,6))boton(&tec_pin,6),x=52;
 36e:	66 e0       	ldi	r22, 0x06	; 6
 370:	89 e3       	ldi	r24, 0x39	; 57
 372:	90 e0       	ldi	r25, 0x00	; 0
 374:	0e 94 fe 00 	call	0x1fc	; 0x1fc <cero_en_bit>
 378:	88 23       	and	r24, r24
 37a:	31 f0       	breq	.+12     	; 0x388 <Teclado+0x13e>
 37c:	66 e0       	ldi	r22, 0x06	; 6
 37e:	89 e3       	ldi	r24, 0x39	; 57
 380:	90 e0       	ldi	r25, 0x00	; 0
 382:	0e 94 0a 01 	call	0x214	; 0x214 <boton>
 386:	c4 e3       	ldi	r28, 0x34	; 52
		if(cero_en_bit(&tec_pin,7))boton(&tec_pin,7),x=49;
 388:	67 e0       	ldi	r22, 0x07	; 7
 38a:	89 e3       	ldi	r24, 0x39	; 57
 38c:	90 e0       	ldi	r25, 0x00	; 0
 38e:	0e 94 fe 00 	call	0x1fc	; 0x1fc <cero_en_bit>
 392:	88 23       	and	r24, r24
 394:	31 f0       	breq	.+12     	; 0x3a2 <Teclado+0x158>
 396:	67 e0       	ldi	r22, 0x07	; 7
 398:	89 e3       	ldi	r24, 0x39	; 57
 39a:	90 e0       	ldi	r25, 0x00	; 0
 39c:	0e 94 0a 01 	call	0x214	; 0x214 <boton>
 3a0:	c1 e3       	ldi	r28, 0x31	; 49
		if(x!=47)break;	
 3a2:	cf 32       	cpi	r28, 0x2F	; 47
 3a4:	19 f4       	brne	.+6      	; 0x3ac <Teclado+0x162>
}

char Teclado(){
	tec_ddr=0b00001111;
	char x=47;
	while(x==47){
 3a6:	cf 32       	cpi	r28, 0x2F	; 47
 3a8:	09 f4       	brne	.+2      	; 0x3ac <Teclado+0x162>
 3aa:	54 cf       	rjmp	.-344    	; 0x254 <Teclado+0xa>
		if(cero_en_bit(&tec_pin,6))boton(&tec_pin,6),x=52;
		if(cero_en_bit(&tec_pin,7))boton(&tec_pin,7),x=49;
		if(x!=47)break;	
	}
	return x;
}
 3ac:	8c 2f       	mov	r24, r28
 3ae:	cf 91       	pop	r28
 3b0:	08 95       	ret

000003b2 <main>:


int main(void)
{
	lcd_init(LCD_DISP_ON);
 3b2:	8c e0       	ldi	r24, 0x0C	; 12
 3b4:	0e 94 c2 00 	call	0x184	; 0x184 <lcd_init>
	lcd_clrscr();
 3b8:	0e 94 a9 00 	call	0x152	; 0x152 <lcd_clrscr>
	uint8_t cont=0;
 3bc:	c0 e0       	ldi	r28, 0x00	; 0
    while (1) 
    {
		char in=Teclado();
 3be:	0e 94 25 01 	call	0x24a	; 0x24a <Teclado>
		if(in==59){
 3c2:	8b 33       	cpi	r24, 0x3B	; 59
 3c4:	21 f4       	brne	.+8      	; 0x3ce <main+0x1c>
			lcd_clrscr();
 3c6:	0e 94 a9 00 	call	0x152	; 0x152 <lcd_clrscr>
			cont=0;
 3ca:	c0 e0       	ldi	r28, 0x00	; 0
 3cc:	f8 cf       	rjmp	.-16     	; 0x3be <main+0xc>
		}
		else if(in==58 && cont){
 3ce:	8a 33       	cpi	r24, 0x3A	; 58
 3d0:	79 f4       	brne	.+30     	; 0x3f0 <main+0x3e>
 3d2:	cc 23       	and	r28, r28
 3d4:	69 f0       	breq	.+26     	; 0x3f0 <main+0x3e>
			lcd_gotoxy(cont-1,(uint8_t)0);
 3d6:	c1 50       	subi	r28, 0x01	; 1
 3d8:	60 e0       	ldi	r22, 0x00	; 0
 3da:	8c 2f       	mov	r24, r28
 3dc:	0e 94 9f 00 	call	0x13e	; 0x13e <lcd_gotoxy>
			lcd_putc(' ');
 3e0:	80 e2       	ldi	r24, 0x20	; 32
 3e2:	0e 94 ad 00 	call	0x15a	; 0x15a <lcd_putc>
			lcd_gotoxy(cont-1,(uint8_t)0);
 3e6:	60 e0       	ldi	r22, 0x00	; 0
 3e8:	8c 2f       	mov	r24, r28
 3ea:	0e 94 9f 00 	call	0x13e	; 0x13e <lcd_gotoxy>
			cont--;
 3ee:	e7 cf       	rjmp	.-50     	; 0x3be <main+0xc>
		}
		else if(in<58 && cont<10){
 3f0:	8a 33       	cpi	r24, 0x3A	; 58
 3f2:	28 f7       	brcc	.-54     	; 0x3be <main+0xc>
 3f4:	ca 30       	cpi	r28, 0x0A	; 10
 3f6:	18 f7       	brcc	.-58     	; 0x3be <main+0xc>
			lcd_putc(in);
 3f8:	0e 94 ad 00 	call	0x15a	; 0x15a <lcd_putc>
			cont++;	
 3fc:	cf 5f       	subi	r28, 0xFF	; 255
 3fe:	df cf       	rjmp	.-66     	; 0x3be <main+0xc>

00000400 <_exit>:
 400:	f8 94       	cli

00000402 <__stop_program>:
 402:	ff cf       	rjmp	.-2      	; 0x402 <__stop_program>
