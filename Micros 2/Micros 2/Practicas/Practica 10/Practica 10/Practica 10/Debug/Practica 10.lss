
Practica 10.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000038e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001a  00800060  0000038e  00000402  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000041c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000044c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a0  00000000  00000000  00000488  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000cd3  00000000  00000000  00000528  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000767  00000000  00000000  000011fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005f6  00000000  00000000  00001962  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000017c  00000000  00000000  00001f58  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000415  00000000  00000000  000020d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000006b5  00000000  00000000  000024e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000090  00000000  00000000  00002b9e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__vector_14>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e8       	ldi	r30, 0x8E	; 142
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 37       	cpi	r26, 0x7A	; 122
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 46 01 	call	0x28c	; 0x28c <main>
  7a:	0c 94 c5 01 	jmp	0x38a	; 0x38a <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) ) {
        lcd_putc(c);
    }

}/* lcd_puts_p */
  82:	85 b3       	in	r24, 0x15	; 21
  84:	80 64       	ori	r24, 0x40	; 64
  86:	85 bb       	out	0x15, r24	; 21
  88:	00 c0       	rjmp	.+0      	; 0x8a <toggle_e+0x8>
  8a:	85 b3       	in	r24, 0x15	; 21
  8c:	8f 7b       	andi	r24, 0xBF	; 191
  8e:	85 bb       	out	0x15, r24	; 21
  90:	08 95       	ret

00000092 <lcd_write>:
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	d8 2f       	mov	r29, r24
  98:	66 23       	and	r22, r22
  9a:	21 f0       	breq	.+8      	; 0xa4 <lcd_write+0x12>
  9c:	85 b3       	in	r24, 0x15	; 21
  9e:	80 61       	ori	r24, 0x10	; 16
  a0:	85 bb       	out	0x15, r24	; 21
  a2:	03 c0       	rjmp	.+6      	; 0xaa <lcd_write+0x18>
  a4:	85 b3       	in	r24, 0x15	; 21
  a6:	8f 7e       	andi	r24, 0xEF	; 239
  a8:	85 bb       	out	0x15, r24	; 21
  aa:	85 b3       	in	r24, 0x15	; 21
  ac:	8f 7d       	andi	r24, 0xDF	; 223
  ae:	85 bb       	out	0x15, r24	; 21
  b0:	84 b3       	in	r24, 0x14	; 20
  b2:	8f 60       	ori	r24, 0x0F	; 15
  b4:	84 bb       	out	0x14, r24	; 20
  b6:	c5 b3       	in	r28, 0x15	; 21
  b8:	c0 7f       	andi	r28, 0xF0	; 240
  ba:	8d 2f       	mov	r24, r29
  bc:	82 95       	swap	r24
  be:	8f 70       	andi	r24, 0x0F	; 15
  c0:	8c 2b       	or	r24, r28
  c2:	85 bb       	out	0x15, r24	; 21
  c4:	0e 94 41 00 	call	0x82	; 0x82 <toggle_e>
  c8:	df 70       	andi	r29, 0x0F	; 15
  ca:	dc 2b       	or	r29, r28
  cc:	d5 bb       	out	0x15, r29	; 21
  ce:	0e 94 41 00 	call	0x82	; 0x82 <toggle_e>
  d2:	cf 60       	ori	r28, 0x0F	; 15
  d4:	c5 bb       	out	0x15, r28	; 21
  d6:	df 91       	pop	r29
  d8:	cf 91       	pop	r28
  da:	08 95       	ret

000000dc <lcd_read>:
  dc:	88 23       	and	r24, r24
  de:	21 f0       	breq	.+8      	; 0xe8 <lcd_read+0xc>
  e0:	85 b3       	in	r24, 0x15	; 21
  e2:	80 61       	ori	r24, 0x10	; 16
  e4:	85 bb       	out	0x15, r24	; 21
  e6:	03 c0       	rjmp	.+6      	; 0xee <lcd_read+0x12>
  e8:	85 b3       	in	r24, 0x15	; 21
  ea:	8f 7e       	andi	r24, 0xEF	; 239
  ec:	85 bb       	out	0x15, r24	; 21
  ee:	85 b3       	in	r24, 0x15	; 21
  f0:	80 62       	ori	r24, 0x20	; 32
  f2:	85 bb       	out	0x15, r24	; 21
  f4:	84 b3       	in	r24, 0x14	; 20
  f6:	80 7f       	andi	r24, 0xF0	; 240
  f8:	84 bb       	out	0x14, r24	; 20
  fa:	85 b3       	in	r24, 0x15	; 21
  fc:	80 64       	ori	r24, 0x40	; 64
  fe:	85 bb       	out	0x15, r24	; 21
 100:	00 c0       	rjmp	.+0      	; 0x102 <lcd_read+0x26>
 102:	93 b3       	in	r25, 0x13	; 19
 104:	92 95       	swap	r25
 106:	90 7f       	andi	r25, 0xF0	; 240
 108:	85 b3       	in	r24, 0x15	; 21
 10a:	8f 7b       	andi	r24, 0xBF	; 191
 10c:	85 bb       	out	0x15, r24	; 21
 10e:	00 c0       	rjmp	.+0      	; 0x110 <lcd_read+0x34>
 110:	85 b3       	in	r24, 0x15	; 21
 112:	80 64       	ori	r24, 0x40	; 64
 114:	85 bb       	out	0x15, r24	; 21
 116:	00 c0       	rjmp	.+0      	; 0x118 <lcd_read+0x3c>
 118:	83 b3       	in	r24, 0x13	; 19
 11a:	8f 70       	andi	r24, 0x0F	; 15
 11c:	25 b3       	in	r18, 0x15	; 21
 11e:	2f 7b       	andi	r18, 0xBF	; 191
 120:	25 bb       	out	0x15, r18	; 21
 122:	89 2b       	or	r24, r25
 124:	08 95       	ret

00000126 <lcd_waitbusy>:
 126:	80 e0       	ldi	r24, 0x00	; 0
 128:	0e 94 6e 00 	call	0xdc	; 0xdc <lcd_read>
 12c:	88 23       	and	r24, r24
 12e:	dc f3       	brlt	.-10     	; 0x126 <lcd_waitbusy>
 130:	82 e0       	ldi	r24, 0x02	; 2
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	01 97       	sbiw	r24, 0x01	; 1
 136:	f1 f7       	brne	.-4      	; 0x134 <lcd_waitbusy+0xe>
 138:	80 e0       	ldi	r24, 0x00	; 0
 13a:	0e 94 6e 00 	call	0xdc	; 0xdc <lcd_read>
 13e:	08 95       	ret

00000140 <lcd_command>:
 140:	cf 93       	push	r28
 142:	c8 2f       	mov	r28, r24
 144:	0e 94 93 00 	call	0x126	; 0x126 <lcd_waitbusy>
 148:	60 e0       	ldi	r22, 0x00	; 0
 14a:	8c 2f       	mov	r24, r28
 14c:	0e 94 49 00 	call	0x92	; 0x92 <lcd_write>
 150:	cf 91       	pop	r28
 152:	08 95       	ret

00000154 <lcd_gotoxy>:
 154:	61 11       	cpse	r22, r1
 156:	04 c0       	rjmp	.+8      	; 0x160 <lcd_gotoxy+0xc>
 158:	80 58       	subi	r24, 0x80	; 128
 15a:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_command>
 15e:	08 95       	ret
 160:	80 54       	subi	r24, 0x40	; 64
 162:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_command>
 166:	08 95       	ret

00000168 <lcd_clrscr>:
 168:	81 e0       	ldi	r24, 0x01	; 1
 16a:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_command>
 16e:	08 95       	ret

00000170 <lcd_putc>:
 170:	cf 93       	push	r28
 172:	c8 2f       	mov	r28, r24
 174:	0e 94 93 00 	call	0x126	; 0x126 <lcd_waitbusy>
 178:	ca 30       	cpi	r28, 0x0A	; 10
 17a:	49 f4       	brne	.+18     	; 0x18e <lcd_putc+0x1e>
 17c:	80 34       	cpi	r24, 0x40	; 64
 17e:	10 f4       	brcc	.+4      	; 0x184 <lcd_putc+0x14>
 180:	80 e4       	ldi	r24, 0x40	; 64
 182:	01 c0       	rjmp	.+2      	; 0x186 <lcd_putc+0x16>
 184:	80 e0       	ldi	r24, 0x00	; 0
 186:	80 58       	subi	r24, 0x80	; 128
 188:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_command>
 18c:	04 c0       	rjmp	.+8      	; 0x196 <lcd_putc+0x26>
 18e:	61 e0       	ldi	r22, 0x01	; 1
 190:	8c 2f       	mov	r24, r28
 192:	0e 94 49 00 	call	0x92	; 0x92 <lcd_write>
 196:	cf 91       	pop	r28
 198:	08 95       	ret

0000019a <lcd_puts>:
 19a:	cf 93       	push	r28
 19c:	df 93       	push	r29
 19e:	fc 01       	movw	r30, r24
 1a0:	03 c0       	rjmp	.+6      	; 0x1a8 <lcd_puts+0xe>
 1a2:	0e 94 b8 00 	call	0x170	; 0x170 <lcd_putc>
 1a6:	fe 01       	movw	r30, r28
 1a8:	ef 01       	movw	r28, r30
 1aa:	21 96       	adiw	r28, 0x01	; 1
 1ac:	80 81       	ld	r24, Z
 1ae:	81 11       	cpse	r24, r1
 1b0:	f8 cf       	rjmp	.-16     	; 0x1a2 <lcd_puts+0x8>
 1b2:	df 91       	pop	r29
 1b4:	cf 91       	pop	r28
 1b6:	08 95       	ret

000001b8 <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 1b8:	1f 93       	push	r17
 1ba:	cf 93       	push	r28
 1bc:	df 93       	push	r29
 1be:	18 2f       	mov	r17, r24
      && ( &LCD_RS_PORT == &LCD_DATA0_PORT) && ( &LCD_RW_PORT == &LCD_DATA0_PORT) && (&LCD_E_PORT == &LCD_DATA0_PORT)
      && (LCD_DATA0_PIN == 0 ) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) 
      && (LCD_RS_PIN == 4 ) && (LCD_RW_PIN == 5) && (LCD_E_PIN == 6 ) )
    {
        /* configure all port bits as output (all LCD lines on same port) */
        DDR(LCD_DATA0_PORT) |= 0x7F;
 1c0:	84 b3       	in	r24, 0x14	; 20
 1c2:	8f 67       	ori	r24, 0x7F	; 127
 1c4:	84 bb       	out	0x14, r24	; 20
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 1c6:	80 e8       	ldi	r24, 0x80	; 128
 1c8:	9e e3       	ldi	r25, 0x3E	; 62
 1ca:	01 97       	sbiw	r24, 0x01	; 1
 1cc:	f1 f7       	brne	.-4      	; 0x1ca <lcd_init+0x12>
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
    }
    delay(16000);        /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);  // _BV(LCD_FUNCTION)>>4;
 1ce:	85 b3       	in	r24, 0x15	; 21
 1d0:	82 60       	ori	r24, 0x02	; 2
 1d2:	85 bb       	out	0x15, r24	; 21
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
 1d4:	85 b3       	in	r24, 0x15	; 21
 1d6:	81 60       	ori	r24, 0x01	; 1
 1d8:	85 bb       	out	0x15, r24	; 21
    lcd_e_toggle();
 1da:	0e 94 41 00 	call	0x82	; 0x82 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 1de:	80 e8       	ldi	r24, 0x80	; 128
 1e0:	93 e1       	ldi	r25, 0x13	; 19
 1e2:	01 97       	sbiw	r24, 0x01	; 1
 1e4:	f1 f7       	brne	.-4      	; 0x1e2 <lcd_init+0x2a>
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
    lcd_e_toggle();
    delay(4992);         /* delay, busy flag can't be checked here */
   
    /* repeat last command */ 
    lcd_e_toggle();      
 1e6:	0e 94 41 00 	call	0x82	; 0x82 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 1ea:	c0 e4       	ldi	r28, 0x40	; 64
 1ec:	d0 e0       	ldi	r29, 0x00	; 0
 1ee:	ce 01       	movw	r24, r28
 1f0:	01 97       	sbiw	r24, 0x01	; 1
 1f2:	f1 f7       	brne	.-4      	; 0x1f0 <lcd_init+0x38>
    /* repeat last command */ 
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */
    
    /* repeat last command a third time */
    lcd_e_toggle();      
 1f4:	0e 94 41 00 	call	0x82	; 0x82 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 1f8:	ce 01       	movw	r24, r28
 1fa:	01 97       	sbiw	r24, 0x01	; 1
 1fc:	f1 f7       	brne	.-4      	; 0x1fa <lcd_init+0x42>
    /* repeat last command a third time */
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
 1fe:	85 b3       	in	r24, 0x15	; 21
 200:	8e 7f       	andi	r24, 0xFE	; 254
 202:	85 bb       	out	0x15, r24	; 21
    lcd_e_toggle();
 204:	0e 94 41 00 	call	0x82	; 0x82 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 208:	21 97       	sbiw	r28, 0x01	; 1
 20a:	f1 f7       	brne	.-4      	; 0x208 <__EEPROM_REGION_LENGTH__+0x8>
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
 20c:	88 e2       	ldi	r24, 0x28	; 40
 20e:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
 212:	88 e0       	ldi	r24, 0x08	; 8
 214:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_command>
    lcd_clrscr();                           /* display clear                */ 
 218:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 21c:	86 e0       	ldi	r24, 0x06	; 6
 21e:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
 222:	81 2f       	mov	r24, r17
 224:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_command>

}/* lcd_init */
 228:	df 91       	pop	r29
 22a:	cf 91       	pop	r28
 22c:	1f 91       	pop	r17
 22e:	08 95       	ret

00000230 <write>:
#define LCD_PORT PORTC
	


void write(int x){
	switch(x){
 230:	82 30       	cpi	r24, 0x02	; 2
 232:	91 05       	cpc	r25, r1
 234:	b9 f0       	breq	.+46     	; 0x264 <write+0x34>
 236:	2c f4       	brge	.+10     	; 0x242 <write+0x12>
 238:	00 97       	sbiw	r24, 0x00	; 0
 23a:	51 f0       	breq	.+20     	; 0x250 <write+0x20>
 23c:	01 97       	sbiw	r24, 0x01	; 1
 23e:	69 f0       	breq	.+26     	; 0x25a <write+0x2a>
 240:	08 95       	ret
 242:	84 30       	cpi	r24, 0x04	; 4
 244:	91 05       	cpc	r25, r1
 246:	c1 f0       	breq	.+48     	; 0x278 <write+0x48>
 248:	94 f0       	brlt	.+36     	; 0x26e <write+0x3e>
 24a:	05 97       	sbiw	r24, 0x05	; 5
 24c:	d1 f0       	breq	.+52     	; 0x282 <write+0x52>
 24e:	08 95       	ret
		case 0:lcd_puts("    ");break;
 250:	80 e6       	ldi	r24, 0x60	; 96
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	0e 94 cd 00 	call	0x19a	; 0x19a <lcd_puts>
 258:	08 95       	ret
		case 1:lcd_puts("#   ");break;
 25a:	85 e6       	ldi	r24, 0x65	; 101
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	0e 94 cd 00 	call	0x19a	; 0x19a <lcd_puts>
 262:	08 95       	ret
		case 2:lcd_puts("##  ");break;
 264:	8a e6       	ldi	r24, 0x6A	; 106
 266:	90 e0       	ldi	r25, 0x00	; 0
 268:	0e 94 cd 00 	call	0x19a	; 0x19a <lcd_puts>
 26c:	08 95       	ret
		case 3:lcd_puts("### ");break;
 26e:	8f e6       	ldi	r24, 0x6F	; 111
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	0e 94 cd 00 	call	0x19a	; 0x19a <lcd_puts>
 276:	08 95       	ret
		case 4:lcd_puts("####");break;
 278:	84 e7       	ldi	r24, 0x74	; 116
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	0e 94 cd 00 	call	0x19a	; 0x19a <lcd_puts>
 280:	08 95       	ret
		case 5:lcd_puts("####");break;
 282:	84 e7       	ldi	r24, 0x74	; 116
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	0e 94 cd 00 	call	0x19a	; 0x19a <lcd_puts>
 28a:	08 95       	ret

0000028c <main>:
	
}

int main(void)
{
	sei();
 28c:	78 94       	sei
	
	ADCSRA = (1 << ADEN) | (1 << ADPS1) | (1 << ADPS2) | (1<<ADIE);
 28e:	8e e8       	ldi	r24, 0x8E	; 142
 290:	86 b9       	out	0x06, r24	; 6
	ADMUX = (1<<REFS0);
 292:	80 e4       	ldi	r24, 0x40	; 64
 294:	87 b9       	out	0x07, r24	; 7
	DDRA=0;
 296:	1a ba       	out	0x1a, r1	; 26
	
	lcd_init(LCD_DISP_ON);
 298:	8c e0       	ldi	r24, 0x0C	; 12
 29a:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_init>
	lcd_putc((char)219);
 29e:	8b ed       	ldi	r24, 0xDB	; 219
 2a0:	0e 94 b8 00 	call	0x170	; 0x170 <lcd_putc>
	
	ini:;
	
	ADMUX =(1<<REFS0)|0;
 2a4:	80 e4       	ldi	r24, 0x40	; 64
 2a6:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1 << ADSC);
 2a8:	86 b1       	in	r24, 0x06	; 6
 2aa:	80 64       	ori	r24, 0x40	; 64
 2ac:	86 b9       	out	0x06, r24	; 6
	while (ADCSRA & (1 << ADSC))
 2ae:	36 99       	sbic	0x06, 6	; 6
 2b0:	fe cf       	rjmp	.-4      	; 0x2ae <main+0x22>
	{}
	int val=ADC*5/1023;
 2b2:	84 b1       	in	r24, 0x04	; 4
 2b4:	95 b1       	in	r25, 0x05	; 5
 2b6:	9c 01       	movw	r18, r24
 2b8:	22 0f       	add	r18, r18
 2ba:	33 1f       	adc	r19, r19
 2bc:	22 0f       	add	r18, r18
 2be:	33 1f       	adc	r19, r19
 2c0:	82 0f       	add	r24, r18
 2c2:	93 1f       	adc	r25, r19
 2c4:	6f ef       	ldi	r22, 0xFF	; 255
 2c6:	73 e0       	ldi	r23, 0x03	; 3
 2c8:	0e 94 b1 01 	call	0x362	; 0x362 <__udivmodhi4>
 2cc:	eb 01       	movw	r28, r22
	lcd_gotoxy(0,0);
 2ce:	60 e0       	ldi	r22, 0x00	; 0
 2d0:	80 e0       	ldi	r24, 0x00	; 0
 2d2:	0e 94 aa 00 	call	0x154	; 0x154 <lcd_gotoxy>
	write(val);
 2d6:	ce 01       	movw	r24, r28
 2d8:	0e 94 18 01 	call	0x230	; 0x230 <write>
	
	ADMUX =(1<<REFS0)|1;
 2dc:	81 e4       	ldi	r24, 0x41	; 65
 2de:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1 << ADSC);
 2e0:	86 b1       	in	r24, 0x06	; 6
 2e2:	80 64       	ori	r24, 0x40	; 64
 2e4:	86 b9       	out	0x06, r24	; 6
	while (ADCSRA & (1 << ADSC))
 2e6:	36 99       	sbic	0x06, 6	; 6
 2e8:	fe cf       	rjmp	.-4      	; 0x2e6 <main+0x5a>
	{}
	val=ADC*5/1023;
 2ea:	84 b1       	in	r24, 0x04	; 4
 2ec:	95 b1       	in	r25, 0x05	; 5
 2ee:	9c 01       	movw	r18, r24
 2f0:	22 0f       	add	r18, r18
 2f2:	33 1f       	adc	r19, r19
 2f4:	22 0f       	add	r18, r18
 2f6:	33 1f       	adc	r19, r19
 2f8:	82 0f       	add	r24, r18
 2fa:	93 1f       	adc	r25, r19
 2fc:	6f ef       	ldi	r22, 0xFF	; 255
 2fe:	73 e0       	ldi	r23, 0x03	; 3
 300:	0e 94 b1 01 	call	0x362	; 0x362 <__udivmodhi4>
 304:	eb 01       	movw	r28, r22
	lcd_gotoxy(12,0);
 306:	60 e0       	ldi	r22, 0x00	; 0
 308:	8c e0       	ldi	r24, 0x0C	; 12
 30a:	0e 94 aa 00 	call	0x154	; 0x154 <lcd_gotoxy>
	write(val);	
 30e:	ce 01       	movw	r24, r28
 310:	0e 94 18 01 	call	0x230	; 0x230 <write>
	
	ADMUX =(1<<REFS0)|2;
 314:	82 e4       	ldi	r24, 0x42	; 66
 316:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1 << ADSC);
 318:	86 b1       	in	r24, 0x06	; 6
 31a:	80 64       	ori	r24, 0x40	; 64
 31c:	86 b9       	out	0x06, r24	; 6
	while (ADCSRA & (1 << ADSC))
 31e:	36 99       	sbic	0x06, 6	; 6
 320:	fe cf       	rjmp	.-4      	; 0x31e <main+0x92>
	{}
	val=ADC*5/1023;
 322:	84 b1       	in	r24, 0x04	; 4
 324:	95 b1       	in	r25, 0x05	; 5
 326:	9c 01       	movw	r18, r24
 328:	22 0f       	add	r18, r18
 32a:	33 1f       	adc	r19, r19
 32c:	22 0f       	add	r18, r18
 32e:	33 1f       	adc	r19, r19
 330:	82 0f       	add	r24, r18
 332:	93 1f       	adc	r25, r19
 334:	6f ef       	ldi	r22, 0xFF	; 255
 336:	73 e0       	ldi	r23, 0x03	; 3
 338:	0e 94 b1 01 	call	0x362	; 0x362 <__udivmodhi4>
 33c:	eb 01       	movw	r28, r22
	lcd_gotoxy(0,1);
 33e:	61 e0       	ldi	r22, 0x01	; 1
 340:	80 e0       	ldi	r24, 0x00	; 0
 342:	0e 94 aa 00 	call	0x154	; 0x154 <lcd_gotoxy>
	write(val);
 346:	ce 01       	movw	r24, r28
 348:	0e 94 18 01 	call	0x230	; 0x230 <write>
	
	//_delay_ms(1000);
	goto ini;
 34c:	ab cf       	rjmp	.-170    	; 0x2a4 <main+0x18>

0000034e <__vector_14>:

}

ISR(ADC_vect) {
 34e:	1f 92       	push	r1
 350:	0f 92       	push	r0
 352:	0f b6       	in	r0, 0x3f	; 63
 354:	0f 92       	push	r0
 356:	11 24       	eor	r1, r1
		
 358:	0f 90       	pop	r0
 35a:	0f be       	out	0x3f, r0	; 63
 35c:	0f 90       	pop	r0
 35e:	1f 90       	pop	r1
 360:	18 95       	reti

00000362 <__udivmodhi4>:
 362:	aa 1b       	sub	r26, r26
 364:	bb 1b       	sub	r27, r27
 366:	51 e1       	ldi	r21, 0x11	; 17
 368:	07 c0       	rjmp	.+14     	; 0x378 <__udivmodhi4_ep>

0000036a <__udivmodhi4_loop>:
 36a:	aa 1f       	adc	r26, r26
 36c:	bb 1f       	adc	r27, r27
 36e:	a6 17       	cp	r26, r22
 370:	b7 07       	cpc	r27, r23
 372:	10 f0       	brcs	.+4      	; 0x378 <__udivmodhi4_ep>
 374:	a6 1b       	sub	r26, r22
 376:	b7 0b       	sbc	r27, r23

00000378 <__udivmodhi4_ep>:
 378:	88 1f       	adc	r24, r24
 37a:	99 1f       	adc	r25, r25
 37c:	5a 95       	dec	r21
 37e:	a9 f7       	brne	.-22     	; 0x36a <__udivmodhi4_loop>
 380:	80 95       	com	r24
 382:	90 95       	com	r25
 384:	bc 01       	movw	r22, r24
 386:	cd 01       	movw	r24, r26
 388:	08 95       	ret

0000038a <_exit>:
 38a:	f8 94       	cli

0000038c <__stop_program>:
 38c:	ff cf       	rjmp	.-2      	; 0x38c <__stop_program>
