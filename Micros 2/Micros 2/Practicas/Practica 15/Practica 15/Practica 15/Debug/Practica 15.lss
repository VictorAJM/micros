
Practica 15.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002b2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000306  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000306  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000338  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a0  00000000  00000000  00000374  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000ca8  00000000  00000000  00000414  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000796  00000000  00000000  000010bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000066e  00000000  00000000  00001852  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000170  00000000  00000000  00001ec0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000469  00000000  00000000  00002030  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000607  00000000  00000000  00002499  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000090  00000000  00000000  00002aa0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 ff 00 	call	0x1fe	; 0x1fe <main>
  64:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <toggle_e>:
#define UBRR_VALUE ((F_CPU / (16UL * BAUD_RATE)) - 1)

void Send(uint8_t data) {
	while (!(UCSRA & (1 << UDRE)))
	;
	UDR = data;
  6c:	85 b3       	in	r24, 0x15	; 21
  6e:	80 64       	ori	r24, 0x40	; 64
  70:	85 bb       	out	0x15, r24	; 21
  72:	00 c0       	rjmp	.+0      	; 0x74 <toggle_e+0x8>
  74:	85 b3       	in	r24, 0x15	; 21
  76:	8f 7b       	andi	r24, 0xBF	; 191
  78:	85 bb       	out	0x15, r24	; 21
  7a:	08 95       	ret

0000007c <lcd_write>:
  7c:	cf 93       	push	r28
  7e:	df 93       	push	r29
  80:	d8 2f       	mov	r29, r24
  82:	66 23       	and	r22, r22
  84:	21 f0       	breq	.+8      	; 0x8e <lcd_write+0x12>
  86:	85 b3       	in	r24, 0x15	; 21
  88:	80 61       	ori	r24, 0x10	; 16
  8a:	85 bb       	out	0x15, r24	; 21
  8c:	03 c0       	rjmp	.+6      	; 0x94 <lcd_write+0x18>
  8e:	85 b3       	in	r24, 0x15	; 21
  90:	8f 7e       	andi	r24, 0xEF	; 239
  92:	85 bb       	out	0x15, r24	; 21
  94:	85 b3       	in	r24, 0x15	; 21
  96:	8f 7d       	andi	r24, 0xDF	; 223
  98:	85 bb       	out	0x15, r24	; 21
  9a:	84 b3       	in	r24, 0x14	; 20
  9c:	8f 60       	ori	r24, 0x0F	; 15
  9e:	84 bb       	out	0x14, r24	; 20
  a0:	c5 b3       	in	r28, 0x15	; 21
  a2:	c0 7f       	andi	r28, 0xF0	; 240
  a4:	8d 2f       	mov	r24, r29
  a6:	82 95       	swap	r24
  a8:	8f 70       	andi	r24, 0x0F	; 15
  aa:	8c 2b       	or	r24, r28
  ac:	85 bb       	out	0x15, r24	; 21
  ae:	0e 94 36 00 	call	0x6c	; 0x6c <toggle_e>
  b2:	df 70       	andi	r29, 0x0F	; 15
  b4:	dc 2b       	or	r29, r28
  b6:	d5 bb       	out	0x15, r29	; 21
  b8:	0e 94 36 00 	call	0x6c	; 0x6c <toggle_e>
  bc:	cf 60       	ori	r28, 0x0F	; 15
  be:	c5 bb       	out	0x15, r28	; 21
  c0:	df 91       	pop	r29
  c2:	cf 91       	pop	r28
  c4:	08 95       	ret

000000c6 <lcd_read>:
  c6:	88 23       	and	r24, r24
  c8:	21 f0       	breq	.+8      	; 0xd2 <lcd_read+0xc>
  ca:	85 b3       	in	r24, 0x15	; 21
  cc:	80 61       	ori	r24, 0x10	; 16
  ce:	85 bb       	out	0x15, r24	; 21
  d0:	03 c0       	rjmp	.+6      	; 0xd8 <lcd_read+0x12>
  d2:	85 b3       	in	r24, 0x15	; 21
  d4:	8f 7e       	andi	r24, 0xEF	; 239
  d6:	85 bb       	out	0x15, r24	; 21
  d8:	85 b3       	in	r24, 0x15	; 21
  da:	80 62       	ori	r24, 0x20	; 32
  dc:	85 bb       	out	0x15, r24	; 21
  de:	84 b3       	in	r24, 0x14	; 20
  e0:	80 7f       	andi	r24, 0xF0	; 240
  e2:	84 bb       	out	0x14, r24	; 20
  e4:	85 b3       	in	r24, 0x15	; 21
  e6:	80 64       	ori	r24, 0x40	; 64
  e8:	85 bb       	out	0x15, r24	; 21
  ea:	00 c0       	rjmp	.+0      	; 0xec <lcd_read+0x26>
  ec:	93 b3       	in	r25, 0x13	; 19
  ee:	92 95       	swap	r25
  f0:	90 7f       	andi	r25, 0xF0	; 240
  f2:	85 b3       	in	r24, 0x15	; 21
  f4:	8f 7b       	andi	r24, 0xBF	; 191
  f6:	85 bb       	out	0x15, r24	; 21
  f8:	00 c0       	rjmp	.+0      	; 0xfa <lcd_read+0x34>
  fa:	85 b3       	in	r24, 0x15	; 21
  fc:	80 64       	ori	r24, 0x40	; 64
  fe:	85 bb       	out	0x15, r24	; 21
 100:	00 c0       	rjmp	.+0      	; 0x102 <lcd_read+0x3c>
 102:	83 b3       	in	r24, 0x13	; 19
 104:	8f 70       	andi	r24, 0x0F	; 15
 106:	25 b3       	in	r18, 0x15	; 21
 108:	2f 7b       	andi	r18, 0xBF	; 191
 10a:	25 bb       	out	0x15, r18	; 21
 10c:	89 2b       	or	r24, r25
 10e:	08 95       	ret

00000110 <lcd_waitbusy>:
 110:	80 e0       	ldi	r24, 0x00	; 0
 112:	0e 94 63 00 	call	0xc6	; 0xc6 <lcd_read>
 116:	88 23       	and	r24, r24
 118:	dc f3       	brlt	.-10     	; 0x110 <lcd_waitbusy>
 11a:	00 c0       	rjmp	.+0      	; 0x11c <lcd_waitbusy+0xc>
 11c:	80 e0       	ldi	r24, 0x00	; 0
 11e:	0e 94 63 00 	call	0xc6	; 0xc6 <lcd_read>
 122:	08 95       	ret

00000124 <lcd_command>:
 124:	cf 93       	push	r28
 126:	c8 2f       	mov	r28, r24
 128:	0e 94 88 00 	call	0x110	; 0x110 <lcd_waitbusy>
 12c:	60 e0       	ldi	r22, 0x00	; 0
 12e:	8c 2f       	mov	r24, r28
 130:	0e 94 3e 00 	call	0x7c	; 0x7c <lcd_write>
 134:	cf 91       	pop	r28
 136:	08 95       	ret

00000138 <lcd_gotoxy>:
 138:	61 11       	cpse	r22, r1
 13a:	04 c0       	rjmp	.+8      	; 0x144 <lcd_gotoxy+0xc>
 13c:	80 58       	subi	r24, 0x80	; 128
 13e:	0e 94 92 00 	call	0x124	; 0x124 <lcd_command>
 142:	08 95       	ret
 144:	80 54       	subi	r24, 0x40	; 64
 146:	0e 94 92 00 	call	0x124	; 0x124 <lcd_command>
 14a:	08 95       	ret

0000014c <lcd_clrscr>:
 14c:	81 e0       	ldi	r24, 0x01	; 1
 14e:	0e 94 92 00 	call	0x124	; 0x124 <lcd_command>
 152:	08 95       	ret

00000154 <lcd_putc>:
 154:	cf 93       	push	r28
 156:	c8 2f       	mov	r28, r24
 158:	0e 94 88 00 	call	0x110	; 0x110 <lcd_waitbusy>
 15c:	ca 30       	cpi	r28, 0x0A	; 10
 15e:	49 f4       	brne	.+18     	; 0x172 <lcd_putc+0x1e>
 160:	80 34       	cpi	r24, 0x40	; 64
 162:	10 f4       	brcc	.+4      	; 0x168 <lcd_putc+0x14>
 164:	80 e4       	ldi	r24, 0x40	; 64
 166:	01 c0       	rjmp	.+2      	; 0x16a <lcd_putc+0x16>
 168:	80 e0       	ldi	r24, 0x00	; 0
 16a:	80 58       	subi	r24, 0x80	; 128
 16c:	0e 94 92 00 	call	0x124	; 0x124 <lcd_command>
 170:	04 c0       	rjmp	.+8      	; 0x17a <lcd_putc+0x26>
 172:	61 e0       	ldi	r22, 0x01	; 1
 174:	8c 2f       	mov	r24, r28
 176:	0e 94 3e 00 	call	0x7c	; 0x7c <lcd_write>
 17a:	cf 91       	pop	r28
 17c:	08 95       	ret

0000017e <lcd_init>:
 17e:	1f 93       	push	r17
 180:	cf 93       	push	r28
 182:	df 93       	push	r29
 184:	18 2f       	mov	r17, r24
 186:	84 b3       	in	r24, 0x14	; 20
 188:	8f 67       	ori	r24, 0x7F	; 127
 18a:	84 bb       	out	0x14, r24	; 20
 18c:	80 ea       	ldi	r24, 0xA0	; 160
 18e:	9f e0       	ldi	r25, 0x0F	; 15
 190:	01 97       	sbiw	r24, 0x01	; 1
 192:	f1 f7       	brne	.-4      	; 0x190 <lcd_init+0x12>
 194:	85 b3       	in	r24, 0x15	; 21
 196:	82 60       	ori	r24, 0x02	; 2
 198:	85 bb       	out	0x15, r24	; 21
 19a:	85 b3       	in	r24, 0x15	; 21
 19c:	81 60       	ori	r24, 0x01	; 1
 19e:	85 bb       	out	0x15, r24	; 21
 1a0:	0e 94 36 00 	call	0x6c	; 0x6c <toggle_e>
 1a4:	80 ee       	ldi	r24, 0xE0	; 224
 1a6:	94 e0       	ldi	r25, 0x04	; 4
 1a8:	01 97       	sbiw	r24, 0x01	; 1
 1aa:	f1 f7       	brne	.-4      	; 0x1a8 <lcd_init+0x2a>
 1ac:	0e 94 36 00 	call	0x6c	; 0x6c <toggle_e>
 1b0:	c0 e1       	ldi	r28, 0x10	; 16
 1b2:	d0 e0       	ldi	r29, 0x00	; 0
 1b4:	ce 01       	movw	r24, r28
 1b6:	01 97       	sbiw	r24, 0x01	; 1
 1b8:	f1 f7       	brne	.-4      	; 0x1b6 <lcd_init+0x38>
 1ba:	0e 94 36 00 	call	0x6c	; 0x6c <toggle_e>
 1be:	ce 01       	movw	r24, r28
 1c0:	01 97       	sbiw	r24, 0x01	; 1
 1c2:	f1 f7       	brne	.-4      	; 0x1c0 <lcd_init+0x42>
 1c4:	85 b3       	in	r24, 0x15	; 21
 1c6:	8e 7f       	andi	r24, 0xFE	; 254
 1c8:	85 bb       	out	0x15, r24	; 21
 1ca:	0e 94 36 00 	call	0x6c	; 0x6c <toggle_e>
 1ce:	21 97       	sbiw	r28, 0x01	; 1
 1d0:	f1 f7       	brne	.-4      	; 0x1ce <lcd_init+0x50>
 1d2:	88 e2       	ldi	r24, 0x28	; 40
 1d4:	0e 94 92 00 	call	0x124	; 0x124 <lcd_command>
 1d8:	88 e0       	ldi	r24, 0x08	; 8
 1da:	0e 94 92 00 	call	0x124	; 0x124 <lcd_command>
 1de:	0e 94 a6 00 	call	0x14c	; 0x14c <lcd_clrscr>
 1e2:	86 e0       	ldi	r24, 0x06	; 6
 1e4:	0e 94 92 00 	call	0x124	; 0x124 <lcd_command>
 1e8:	81 2f       	mov	r24, r17
 1ea:	0e 94 92 00 	call	0x124	; 0x124 <lcd_command>
 1ee:	df 91       	pop	r29
 1f0:	cf 91       	pop	r28
 1f2:	1f 91       	pop	r17
 1f4:	08 95       	ret

000001f6 <Recive>:
}

char Recive() {
	while (!(UCSRA & (1<<RXC)));
 1f6:	5f 9b       	sbis	0x0b, 7	; 11
 1f8:	fe cf       	rjmp	.-4      	; 0x1f6 <Recive>
	
	return UDR;
 1fa:	8c b1       	in	r24, 0x0c	; 12
}
 1fc:	08 95       	ret

000001fe <main>:



int main(void)
{
	sei();
 1fe:	78 94       	sei
	//clc();
	//LCD
	lcd_init(LCD_DISP_ON);
 200:	8c e0       	ldi	r24, 0x0C	; 12
 202:	0e 94 bf 00 	call	0x17e	; 0x17e <lcd_init>
	lcd_clrscr();
 206:	0e 94 a6 00 	call	0x14c	; 0x14c <lcd_clrscr>
	
	//Puerto Serial
	UBRRH = (unsigned char)(UBRR_VALUE >> 8);
 20a:	10 bc       	out	0x20, r1	; 32
	UBRRL = (unsigned char)UBRR_VALUE;
 20c:	8c e0       	ldi	r24, 0x0C	; 12
 20e:	89 b9       	out	0x09, r24	; 9
	UCSRB = (1 << TXEN) | (1 << RXEN);
 210:	88 e1       	ldi	r24, 0x18	; 24
 212:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (1 << URSEL) | (1 << UCSZ1) | (1 << UCSZ0) | (1 << USBS);
 214:	8e e8       	ldi	r24, 0x8E	; 142
 216:	80 bd       	out	0x20, r24	; 32
	DDRD=0b00000010;
 218:	82 e0       	ldi	r24, 0x02	; 2
 21a:	81 bb       	out	0x11, r24	; 17
	
	int contador=0;
 21c:	c0 e0       	ldi	r28, 0x00	; 0
 21e:	d0 e0       	ldi	r29, 0x00	; 0
	
    while (1) 
    {
		char c=Recive();
 220:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <Recive>
 224:	18 2f       	mov	r17, r24
		if(c=='/'){
 226:	8f 32       	cpi	r24, 0x2F	; 47
 228:	41 f5       	brne	.+80     	; 0x27a <__EEPROM_REGION_LENGTH__+0x7a>
			if(contador!=0)contador--;
 22a:	20 97       	sbiw	r28, 0x00	; 0
 22c:	09 f0       	breq	.+2      	; 0x230 <__EEPROM_REGION_LENGTH__+0x30>
 22e:	21 97       	sbiw	r28, 0x01	; 1
			lcd_gotoxy(contador%16,contador/16);
 230:	7e 01       	movw	r14, r28
 232:	dd 23       	and	r29, r29
 234:	1c f4       	brge	.+6      	; 0x23c <__EEPROM_REGION_LENGTH__+0x3c>
 236:	8f e0       	ldi	r24, 0x0F	; 15
 238:	e8 0e       	add	r14, r24
 23a:	f1 1c       	adc	r15, r1
 23c:	f5 94       	asr	r15
 23e:	e7 94       	ror	r14
 240:	f5 94       	asr	r15
 242:	e7 94       	ror	r14
 244:	f5 94       	asr	r15
 246:	e7 94       	ror	r14
 248:	f5 94       	asr	r15
 24a:	e7 94       	ror	r14
 24c:	8e 01       	movw	r16, r28
 24e:	0f 70       	andi	r16, 0x0F	; 15
 250:	10 78       	andi	r17, 0x80	; 128
 252:	11 23       	and	r17, r17
 254:	34 f4       	brge	.+12     	; 0x262 <__EEPROM_REGION_LENGTH__+0x62>
 256:	01 50       	subi	r16, 0x01	; 1
 258:	11 09       	sbc	r17, r1
 25a:	00 6f       	ori	r16, 0xF0	; 240
 25c:	1f 6f       	ori	r17, 0xFF	; 255
 25e:	0f 5f       	subi	r16, 0xFF	; 255
 260:	1f 4f       	sbci	r17, 0xFF	; 255
 262:	6e 2d       	mov	r22, r14
 264:	80 2f       	mov	r24, r16
 266:	0e 94 9c 00 	call	0x138	; 0x138 <lcd_gotoxy>
			lcd_putc(' ');
 26a:	80 e2       	ldi	r24, 0x20	; 32
 26c:	0e 94 aa 00 	call	0x154	; 0x154 <lcd_putc>
			lcd_gotoxy(contador%16,contador/16);
 270:	6e 2d       	mov	r22, r14
 272:	80 2f       	mov	r24, r16
 274:	0e 94 9c 00 	call	0x138	; 0x138 <lcd_gotoxy>
			continue;
 278:	d3 cf       	rjmp	.-90     	; 0x220 <__EEPROM_REGION_LENGTH__+0x20>
		}
		if(contador==16){
 27a:	c0 31       	cpi	r28, 0x10	; 16
 27c:	d1 05       	cpc	r29, r1
 27e:	29 f4       	brne	.+10     	; 0x28a <__EEPROM_REGION_LENGTH__+0x8a>
			lcd_gotoxy(0,1);
 280:	61 e0       	ldi	r22, 0x01	; 1
 282:	80 e0       	ldi	r24, 0x00	; 0
 284:	0e 94 9c 00 	call	0x138	; 0x138 <lcd_gotoxy>
 288:	07 c0       	rjmp	.+14     	; 0x298 <__EEPROM_REGION_LENGTH__+0x98>
		}
		else if(contador==32){
 28a:	c0 32       	cpi	r28, 0x20	; 32
 28c:	d1 05       	cpc	r29, r1
 28e:	21 f4       	brne	.+8      	; 0x298 <__EEPROM_REGION_LENGTH__+0x98>
			contador=0;
			lcd_clrscr();
 290:	0e 94 a6 00 	call	0x14c	; 0x14c <lcd_clrscr>
		}
		if(contador==16){
			lcd_gotoxy(0,1);
		}
		else if(contador==32){
			contador=0;
 294:	c0 e0       	ldi	r28, 0x00	; 0
 296:	d0 e0       	ldi	r29, 0x00	; 0
			lcd_clrscr();
		}
		lcd_putc(c);
 298:	81 2f       	mov	r24, r17
 29a:	0e 94 aa 00 	call	0x154	; 0x154 <lcd_putc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 29e:	87 ea       	ldi	r24, 0xA7	; 167
 2a0:	91 e6       	ldi	r25, 0x61	; 97
 2a2:	01 97       	sbiw	r24, 0x01	; 1
 2a4:	f1 f7       	brne	.-4      	; 0x2a2 <__EEPROM_REGION_LENGTH__+0xa2>
 2a6:	00 c0       	rjmp	.+0      	; 0x2a8 <__EEPROM_REGION_LENGTH__+0xa8>
 2a8:	00 00       	nop
		_delay_ms(100);
		contador++;
 2aa:	21 96       	adiw	r28, 0x01	; 1
 2ac:	b9 cf       	rjmp	.-142    	; 0x220 <__EEPROM_REGION_LENGTH__+0x20>

000002ae <_exit>:
 2ae:	f8 94       	cli

000002b0 <__stop_program>:
 2b0:	ff cf       	rjmp	.-2      	; 0x2b0 <__stop_program>
