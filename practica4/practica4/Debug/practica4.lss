
practica4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000158  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000158  000001cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001ce  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000200  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  0000023c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006a3  00000000  00000000  00000264  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000601  00000000  00000000  00000907  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000030d  00000000  00000000  00000f08  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000048  00000000  00000000  00001218  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000336  00000000  00000000  00001260  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000091  00000000  00000000  00001596  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001627  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 41 00 	jmp	0x82	; 0x82 <__vector_1>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e5       	ldi	r30, 0x58	; 88
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 8d 00 	call	0x11a	; 0x11a <main>
  7a:	0c 94 aa 00 	jmp	0x154	; 0x154 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__vector_1>:
#include <avr/io.h>
#include <avr/interrupt.h>
#include <stdlib.h> // Necesario para la función rand()
#include <util/delay.h>
volatile uint8_t ran=1;
ISR(INT0_vect) {
  82:	1f 92       	push	r1
  84:	0f 92       	push	r0
  86:	0f b6       	in	r0, 0x3f	; 63
  88:	0f 92       	push	r0
  8a:	11 24       	eor	r1, r1
  8c:	8f 93       	push	r24
  8e:	9f 93       	push	r25
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  90:	87 ea       	ldi	r24, 0xA7	; 167
  92:	91 e6       	ldi	r25, 0x61	; 97
  94:	01 97       	sbiw	r24, 0x01	; 1
  96:	f1 f7       	brne	.-4      	; 0x94 <__vector_1+0x12>
  98:	00 c0       	rjmp	.+0      	; 0x9a <__vector_1+0x18>
  9a:	00 00       	nop
	_delay_ms(100);
	while (!(PIND&(1<<2)));
  9c:	82 9b       	sbis	0x10, 2	; 16
  9e:	fe cf       	rjmp	.-4      	; 0x9c <__vector_1+0x1a>
  a0:	87 ea       	ldi	r24, 0xA7	; 167
  a2:	91 e6       	ldi	r25, 0x61	; 97
  a4:	01 97       	sbiw	r24, 0x01	; 1
  a6:	f1 f7       	brne	.-4      	; 0xa4 <__vector_1+0x22>
  a8:	00 c0       	rjmp	.+0      	; 0xaa <__vector_1+0x28>
  aa:	00 00       	nop
	_delay_ms(100);
	if (ran == 1) {
  ac:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  b0:	81 30       	cpi	r24, 0x01	; 1
  b2:	19 f4       	brne	.+6      	; 0xba <__vector_1+0x38>
		PORTB = 1;
  b4:	88 bb       	out	0x18, r24	; 24
		PORTA = 0;
  b6:	1b ba       	out	0x1b, r1	; 27
  b8:	29 c0       	rjmp	.+82     	; 0x10c <__vector_1+0x8a>
	} else if (ran == 2) {
  ba:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  be:	82 30       	cpi	r24, 0x02	; 2
  c0:	21 f4       	brne	.+8      	; 0xca <__vector_1+0x48>
		PORTB = 0;
  c2:	18 ba       	out	0x18, r1	; 24
		PORTA = (1<<5) | (1<<2);
  c4:	84 e2       	ldi	r24, 0x24	; 36
  c6:	8b bb       	out	0x1b, r24	; 27
  c8:	21 c0       	rjmp	.+66     	; 0x10c <__vector_1+0x8a>
	} else if (ran == 3) {
  ca:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  ce:	83 30       	cpi	r24, 0x03	; 3
  d0:	29 f4       	brne	.+10     	; 0xdc <__vector_1+0x5a>
		PORTB = 1;
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	88 bb       	out	0x18, r24	; 24
		PORTA = (1<<0) | (1<<7);
  d6:	81 e8       	ldi	r24, 0x81	; 129
  d8:	8b bb       	out	0x1b, r24	; 27
  da:	18 c0       	rjmp	.+48     	; 0x10c <__vector_1+0x8a>
	} else if (ran == 4) {
  dc:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  e0:	84 30       	cpi	r24, 0x04	; 4
  e2:	21 f4       	brne	.+8      	; 0xec <__vector_1+0x6a>
		PORTB = 0;
  e4:	18 ba       	out	0x18, r1	; 24
		PORTA = (1<<0) | (1<<7) | (1<<5) | (1<<2);
  e6:	85 ea       	ldi	r24, 0xA5	; 165
  e8:	8b bb       	out	0x1b, r24	; 27
  ea:	10 c0       	rjmp	.+32     	; 0x10c <__vector_1+0x8a>
	} else if (ran == 5) {
  ec:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  f0:	85 30       	cpi	r24, 0x05	; 5
  f2:	29 f4       	brne	.+10     	; 0xfe <__vector_1+0x7c>
		PORTB = 1;
  f4:	81 e0       	ldi	r24, 0x01	; 1
  f6:	88 bb       	out	0x18, r24	; 24
		PORTA = (1<<0) | (1<<7) | (1<<5) | (1<<2);
  f8:	85 ea       	ldi	r24, 0xA5	; 165
  fa:	8b bb       	out	0x1b, r24	; 27
  fc:	07 c0       	rjmp	.+14     	; 0x10c <__vector_1+0x8a>
	} else if (ran == 6) {
  fe:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 102:	86 30       	cpi	r24, 0x06	; 6
 104:	19 f4       	brne	.+6      	; 0x10c <__vector_1+0x8a>
		PORTB = 0;
 106:	18 ba       	out	0x18, r1	; 24
		PORTA = (1<<0) | (1<<7) | (1<<5) | (1<<2) | (1<<1) | (1<<6);
 108:	87 ee       	ldi	r24, 0xE7	; 231
 10a:	8b bb       	out	0x1b, r24	; 27
	}
	
}
 10c:	9f 91       	pop	r25
 10e:	8f 91       	pop	r24
 110:	0f 90       	pop	r0
 112:	0f be       	out	0x3f, r0	; 63
 114:	0f 90       	pop	r0
 116:	1f 90       	pop	r1
 118:	18 95       	reti

0000011a <main>:

int main(void) {
	DDRD &= ~(1 << PD2);
 11a:	81 b3       	in	r24, 0x11	; 17
 11c:	8b 7f       	andi	r24, 0xFB	; 251
 11e:	81 bb       	out	0x11, r24	; 17
	DDRA = 0xFF;
 120:	8f ef       	ldi	r24, 0xFF	; 255
 122:	8a bb       	out	0x1a, r24	; 26
	DDRB = 0XFF;
 124:	87 bb       	out	0x17, r24	; 23
	PORTA = 0;
 126:	1b ba       	out	0x1b, r1	; 27
	PORTB = 0;
 128:	18 ba       	out	0x18, r1	; 24
	PORTD = 0xFF;
 12a:	82 bb       	out	0x12, r24	; 18
	MCUCR = 2;
 12c:	82 e0       	ldi	r24, 0x02	; 2
 12e:	85 bf       	out	0x35, r24	; 53
	GIFR = 0b11100000;
 130:	80 ee       	ldi	r24, 0xE0	; 224
 132:	8a bf       	out	0x3a, r24	; 58
	GICR = 0b01000000;
 134:	80 e4       	ldi	r24, 0x40	; 64
 136:	8b bf       	out	0x3b, r24	; 59
	sei();
 138:	78 94       	sei
	while (1) {
		ran++;
 13a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 13e:	8f 5f       	subi	r24, 0xFF	; 255
 140:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		if (ran==7) ran=1;
 144:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 148:	87 30       	cpi	r24, 0x07	; 7
 14a:	b9 f7       	brne	.-18     	; 0x13a <main+0x20>
 14c:	81 e0       	ldi	r24, 0x01	; 1
 14e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 152:	f3 cf       	rjmp	.-26     	; 0x13a <main+0x20>

00000154 <_exit>:
 154:	f8 94       	cli

00000156 <__stop_program>:
 156:	ff cf       	rjmp	.-2      	; 0x156 <__stop_program>
